{"version":3,"sources":["RegistrationStatusLockTarget.ts","AssignmentsFindView/findAssignments.worker.ts","Plan.ts","badges.tsx","AssignmentsFindView/index.tsx","safely.ts","CollectivelyCourseSetView.tsx","courses/index.ts","ExportView.tsx","FilterType.ts","getValueFromModal.tsx","ImportView.tsx","Requirements/Requirements.ts","Requirements/getRequirementAndDictionaryFromJSON.ts","requirementInstances/index.ts","RequirementView/RequirementSummaryView.tsx","RequirementView/RequirementWithChildrenView.tsx","RequirementView/CourseList.tsx","RequirementView/RequirementWithCoursesView.tsx","RequirementView/SelectionRequirementView.tsx","RequirementView/InnerRequirementView.tsx","RequirementView/ReassignmentConfirmationModal.tsx","RequirementView/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["RegistrationStatusLockTarget","Worker","RegistrationStatus","isRegistrable","course","courseToStatus","some","course1","status","title","Unregistered","getNextStatus","currentStatus","lockTarget","All","Acquired","toJSON","courseToRequirement","requirementToOthersCount","selectionNameToOptionName","Object","fromEntries","map","code","requirement","id","creditsCounts","fromJSON","json","codeToCourse","idToRequirement","Map","entries","get","undefined","Error","courseCode","requirementId","emptyPlan","CourseRegistrationStatusBadge","Badge","variant","Registered","RequirementRegistrationStatusBadge","DisabledCourseBadge","OverlayTrigger","overlay","Tooltip","AssignmentsFindView","show","plan","selectsAutomatically","additionalInformation","cancelButtonLabel","onCancel","onSubmit","useState","worker","setWorker","isLoading","setIsLoading","plans","setPlans","onMessage","useCallback","event","data","length","nextPlans","planJSON","useEffect","AssignmentsFindWorker","postMessage","requirementJSON","terminate","addEventListener","removeEventListener","Modal","onHide","Header","closeButton","Title","Body","ListGroup","className","plan1","getStatus","getRegisteredCreditCounts","Item","key","acquired","registered","action","onClick","selectionName","optionName","Spinner","animation","Footer","Button","AssignmentsFindButton","setShow","handleSubmit","nextPlan","safely","f","args","placeholder","trim","Table1","codeColumnIndex","titleColumnIndex","creditsCountColumnIndex","courseAndRecordPairs","setCourseToStatus","firstCourse","firstRecord","record","firstRecordIsHeader","Table","bordered","hover","responsive","style","whiteSpace","cell","index","filter","_","slice","recordIndex","getTdContent","mapCourse","mapRecord","recordValue","tds0","recordTitle","textAlign","creditCount","recordCreditsCount","tds1","tds","nextStatus","None","cursor","getColumnIndex","reduce","count","previous","current","Modal1","setAllCourseStatus","nextCourseToStatus","set","setAllCourseStatusToRegistered","setAllCourseStatusToAcquired","size","ButtonGroup","Modal0","csv","setCSV","validated","setValidated","records","parse","Array","feedback","handleCSVChange","nextCSV","Form","Group","Label","Control","as","rows","value","onChange","target","isInvalid","Feedback","type","File","custom","accept","label","file","files","item","reader","FileReader","result","readAsText","disabled","CollectivelyCourseSetView","page","setPage","setCourseAndRecordPairs","setCodeColumnIndex","has","courses","ExportView","FilterType","eventKey","jsonText","JSON","stringify","url","setURL","blob","Blob","onLoad","readAsDataURL","Card","Accordion","Toggle","Collapse","readOnly","onFocus","e","select","href","download","initialModalsAndCount","modals","useModals","modalsAndCount","setModalsAndCount","getValueFromModal","ModalType","props","a","Promise","resolve","reject","modal","onReturn","onExited","ImportConfirmationModal","ImportView","setJSONText","toggle","useAccordionToggle","handleJSONChange","nextJSON","preventDefault","Requirement","constructor","name","this","requiredCreditCount","getRequiredCreditCount","registeredCreditCounts","min","RequirementWithChildren","description","children","super","includesExcess","creditCounts","child","childRegisteredCreditCount","Math","max","childRequiredCreditCount","getVisibleRequirements","flatMap","RequirementWithCourses","allowsOthers","othersCount","courseStatus","SelectionRequirement","options","options0","optionNameToRequirement","getSelectedOptionName","getSelectedRequirement","selectedOptionName","selectedRequirement","numberOrRangeToRange","numberOrRange","getInnerRequirementAndDictionaryFromJSON","requirementNameToCount","requirementAndDictionaryPairs","optionAndDictionaryArray","optionJSON","option","getRequirementAndDictionaryFromJSON","coins17_0","mast17_0","klis17_0","CreditsCountLabelDelimiter","ExceededCreditsCountLabel","creditsCount","CreditsCountLabels","exceededCreditsCount","requiredCreditsCount","RequirementSummaryView","RequirementWithChildrenView","filterType","onCourseClick","onOthersCountsChange","onSelectionChange","CourseListItem","newRequirement","currentRequirement","isRegisteredButInvalid","isRegistrable0","handleClick","CourseList","OthersCountInput","currentOthersCount","setAcquired","registeredExcludingAcquired","setRegisteredExcludingAcquired","registeredIncludingAcquired","setRegisteredIncludingAcquired","computed","border","Row","Col","md","step","ButtonToolbar","RequirementWithCoursesView","isOpen","setIsOpen","showsInput","setShowsInput","Valid","activeKey","block","SelectionRequirementView","Dropdown","overflow","textOverflow","Menu","zIndex","active","handleOptionClick","newOptionName","InnerRequirementView","ReassignmentConfirmationModal","body","RequirementView","handleCourseClick","newOthersCount","nextSelectionNameToOptionName","visibleRequirements","nextCourseToRequirement","includes","StatusAlert","Alert","RequirementWithConfiguration","setPlan","setFilterType","useLockTarget","setLockTarget","lockTarget1","Check","checked","InnerMain","requirementName","usePlan","values","Link","to","Main","useParams","useLocalStorage","storedJSON","setStoredJSON","storedPlanEntries","planMap0","setPlanMap0","planMap","setPlanMap","newPlanMap","planJSONEntries","usePlanMap","newPlan","App","Navbar","bg","Brand","Container","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a24ace98.chunk.js","sourcesContent":["enum RegistrationStatusLockTarget {\n    Unregistered = 0,\n    Acquired = 2,\n    All = 3,\n    None = 4,\n}\n\nexport default RegistrationStatusLockTarget;","export default function() {\n  return new Worker(__webpack_public_path__ + \"static/js/findAssignments.worker.db8d8ebd.worker.js\");\n}\n","import Course from \"./Course\";\nimport RegistrationStatusLockTarget from \"./RegistrationStatusLockTarget\";\nimport { RequirementWithCourses } from \"./Requirements\";\n\nexport interface RegisteredCreditCounts {\n    acquired: number;\n    registered: number;\n}\n\nexport default interface Plan {\n    readonly courseToStatus: ReadonlyMap<Course, RegistrationStatus>;\n    readonly courseToRequirement: ReadonlyMap<Course, RequirementWithCourses>;\n    readonly requirementToOthersCount: ReadonlyMap<RequirementWithCourses, RegisteredCreditCounts>;\n    readonly selectionNameToOptionName: ReadonlyMap<string, string>;\n}\n\nexport type CourseCode = string;\nexport type RequirementId = string;\n\nexport enum RegistrationStatus {\n    Unregistered = 0,\n    Registered = 1,\n    Acquired = 2,\n}\n\nexport const isRegistrable = ({ course, courseToStatus }: {\n    course: Course,\n    courseToStatus: ReadonlyMap<Course, RegistrationStatus>,\n}) => ![...courseToStatus].some(\n    ([course1, status]) =>\n        course1 !== course && course1.title === course.title && status !== RegistrationStatus.Unregistered\n);\n\nexport const getNextStatus = ({ currentStatus, lockTarget }: {\n    currentStatus: RegistrationStatus,\n    lockTarget: RegistrationStatusLockTarget,\n}): RegistrationStatus => {\n    switch (lockTarget) {\n        case RegistrationStatusLockTarget.All:\n            return currentStatus;\n        case RegistrationStatusLockTarget.Acquired:\n        case RegistrationStatusLockTarget.Unregistered:\n            const difference = (3 + lockTarget - currentStatus) % 3;\n            switch (difference) {\n                case 0:\n                    return currentStatus;\n                case 1:\n                    return (currentStatus + 2) % 3;\n                default:\n                    return (currentStatus + 1) % 3;\n            }\n        default:\n            return (currentStatus + 1) % 3;\n    }\n}\n\nexport interface PlanJSON {\n    readonly courseToStatus: { [courseCode: string]: RegistrationStatus };\n    readonly courseToRequirement: { [courseCode: string]: RequirementId };\n    readonly requirementToOthersCount: { [requirementName: string]: RegisteredCreditCounts };\n    readonly selectionNameToOptionName: { [selectionName: string]: string };\n}\n\nexport const toJSON =\n    ({ courseToStatus, courseToRequirement, requirementToOthersCount, selectionNameToOptionName }: Plan): PlanJSON => ({\n        courseToStatus: Object.fromEntries(\n            [...courseToStatus].map(([course, status]) => [course.code, status])\n        ),\n        courseToRequirement: Object.fromEntries(\n            [...courseToRequirement].map(([course, requirement]) => [course.code, requirement.id])\n        ),\n        requirementToOthersCount: Object.fromEntries(\n            [...requirementToOthersCount].map(([requirement, creditsCounts]) => [requirement.id, creditsCounts])\n        ),\n        selectionNameToOptionName: Object.fromEntries(selectionNameToOptionName),\n    });\n\nexport const fromJSON = (json: PlanJSON, { codeToCourse, idToRequirement }: {\n    codeToCourse: ReadonlyMap<CourseCode, Course>,\n    idToRequirement: ReadonlyMap<RequirementId, RequirementWithCourses>,\n}): Plan => {\n    const courseToStatus = new Map(\n        Object.entries(json.courseToStatus).map(([code, status]) => {\n            const course = codeToCourse.get(code);\n            if (course === undefined) { throw new Error(); }\n            return [course, status];\n        })\n    );\n\n    const courseToRequirement = new Map(\n        Object.entries(json.courseToRequirement).map(([courseCode, requirementId]) => {\n            const course = codeToCourse.get(courseCode);\n            const requirement = idToRequirement.get(requirementId);\n\n            if (course === undefined) { throw new Error(); }\n            if (requirement === undefined) { throw new Error(); }\n\n            return [course, requirement];\n        })\n    );\n\n    const requirementToOthersCount = new Map(\n        Object.entries(json.requirementToOthersCount).map(([requirementId, creditsCounts]) => {\n            const requirement = idToRequirement.get(requirementId);\n            if (requirement === undefined) { throw new Error(); }\n            return [requirement, creditsCounts];\n        })\n    );\n\n    const selectionNameToOptionName = new Map(Object.entries(json.selectionNameToOptionName));\n\n    return { courseToStatus, courseToRequirement, requirementToOthersCount, selectionNameToOptionName }\n}\n\nexport const emptyPlan: Plan = {\n    courseToStatus: new Map(),\n    courseToRequirement: new Map(),\n    requirementToOthersCount: new Map(),\n    selectionNameToOptionName: new Map(),\n};\n","import React from 'react';\nimport { Badge, OverlayTrigger, Tooltip } from \"react-bootstrap\";\nimport { RegistrationStatus } from \"./Plan\";\n\nexport const CourseRegistrationStatusBadge: React.FC<{ status: RegistrationStatus }> = ({ status }) => {\n    switch (status) {\n        case RegistrationStatus.Acquired:\n            return (<Badge variant=\"success\">修得済み</Badge>);\n        case RegistrationStatus.Registered:\n            return (<Badge variant=\"primary\">履修する</Badge>);\n        default:\n            return (<Badge variant=\"secondary\">履修しない</Badge>);\n    }\n}\n\nexport const RequirementRegistrationStatusBadge: React.FC<{ status: RegistrationStatus }> = ({ status }) => {\n    switch (status) {\n        case RegistrationStatus.Acquired:\n            return (<Badge variant=\"success\">修得OK</Badge>);\n        case RegistrationStatus.Registered:\n            return (<Badge variant=\"primary\">履修OK</Badge>);\n        default:\n            return (<Badge variant=\"secondary\">不足</Badge>);\n    }\n}\n\nexport const DisabledCourseBadge: React.FC<{ id: string }> = ({ id }) => (\n    <OverlayTrigger\n        overlay={\n            <Tooltip id={id}>ほかに同名の科目を履修しているため、この科目は履修できません。</Tooltip>\n        }\n    >\n        <Badge variant=\"secondary\">履修不可</Badge>\n    </OverlayTrigger>\n);","import React, { useCallback, useEffect, useState } from 'react';\nimport { Button, ListGroup, Modal, Spinner } from \"react-bootstrap\";\n// eslint-disable-next-line import/no-webpack-loader-syntax\nimport AssignmentsFindWorker from 'worker-loader!./findAssignments.worker';\nimport { RequirementRegistrationStatusBadge } from '../badges';\nimport Course from '../Course';\nimport Plan, { fromJSON, PlanJSON, toJSON } from '../Plan';\nimport Requirements, { RequirementWithCourses } from '../Requirements';\n\nconst AssignmentsFindView: React.FC<{\n    show: boolean,\n    requirement: Requirements,\n    idToRequirement: ReadonlyMap<string, RequirementWithCourses>,\n    codeToCourse: ReadonlyMap<string, Course>,\n    plan: Plan,\n    selectsAutomatically: boolean,\n    additionalInformation: React.ReactNode,\n    cancelButtonLabel: string,\n    onCancel: () => void,\n    onSubmit: (plan: Plan) => void,\n}> = ({ show, requirement, idToRequirement, codeToCourse, plan, selectsAutomatically, additionalInformation, cancelButtonLabel, onCancel, onSubmit }) => {\n    const [worker, setWorker] = useState<Worker | undefined>(undefined);\n    const [isLoading, setIsLoading] = useState(false);\n    const [plans, setPlans] = useState<readonly Plan[] | undefined>(undefined);\n\n    const onMessage = useCallback((event: MessageEvent) => {\n        if (event.data === 'done') {\n            if (selectsAutomatically) {\n                if (plans === undefined) {\n                    onCancel();\n                } else if (plans.length === 1) {\n                    onSubmit(plans[0]);\n                } else {\n                    setIsLoading(false);\n                }\n            } else {\n                setIsLoading(false);\n            }\n        } else {\n            const planJSONList: readonly PlanJSON[] = event.data;\n            const nextPlans: readonly Plan[] = planJSONList.map(planJSON => fromJSON(planJSON, { codeToCourse, idToRequirement }));\n            setPlans(nextPlans);\n        }\n    }, [codeToCourse, idToRequirement, onCancel, onSubmit, plans, selectsAutomatically]);\n\n    useEffect(() => {\n        if (show) {\n            setIsLoading(true);\n            setPlans(undefined);\n            const worker = new AssignmentsFindWorker();\n            setWorker(worker);\n            worker.postMessage({\n                codeToCourse,\n                planJSON: toJSON(plan),\n                requirementJSON: requirement.toJSON(),\n            });\n\n            return () => {\n                worker.terminate();\n                setWorker(undefined);\n            }\n        }\n    }, [codeToCourse, plan, requirement, show]);\n\n    useEffect(() => {\n        worker?.addEventListener('message', onMessage);\n        return () => worker?.removeEventListener('message', onMessage);\n    }, [onMessage, worker]);\n\n    return (\n        <Modal show={show} onHide={onCancel}>\n            <Modal.Header closeButton>\n                <Modal.Title>最適な割り当ての自動探索</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                {\n                    isLoading ? (\n                        <>\n                            <p>\n                                全体として修得単位数や履修単位数が最大となるような割り当てを探しています。\n                                この処理は短時間で終わらない場合があります。\n                            </p>\n                            {\n                                plans === undefined ? (<></>) : (\n                                    <p>\n                                        これまでに見つかった割り当てが以下に表示されています。\n                                        まだ最適な割り当てがほかにないか探していますが、選択してすぐに適用することもできます。\n                                    </p>\n                                )\n                            }\n                        </>\n                    ) : plans === undefined ? (\n                        <p>\n                            割り当てを探しましたが、要件を満たす割り当ては見つかりませんでした。\n                        </p>\n                    ) : (\n                                <p>\n                                    全体として修得単位数や履修単位数が最大となるような割り当てとして、以下のものが見つかりました。\n                                    適用するものを選択してください。\n                                </p>\n                            )\n                }\n\n                {additionalInformation}\n\n                {\n                    plans === undefined ? (<></>) :\n                        (\n                            <ListGroup className={isLoading ? 'mb-3' : undefined}>\n                                {\n                                    plans.map(plan1 => {\n                                        const status = requirement.getStatus(plan1);\n                                        const creditsCounts = requirement.getRegisteredCreditCounts(plan1, false);\n                                        return (\n                                            <ListGroup.Item\n                                                key={`${creditsCounts.acquired}-${creditsCounts.registered}`}\n                                                action\n                                                onClick={() => onSubmit(plan1)}\n                                            >\n                                                <div className=\"d-flex justify-content-between align-items-center\">\n                                                    <div>\n                                                        修得\n                                                        <> </>\n                                                        <strong className=\"text-success\">{creditsCounts.acquired}</strong>\n                                                        <> / </>\n                                                        履修\n                                                        <> </>\n                                                        <strong className=\"text-primary\">{creditsCounts.registered}</strong>\n                                                    </div>\n                                                    <RequirementRegistrationStatusBadge status={status} />\n                                                </div>\n                                                {\n                                                    [...plan1.selectionNameToOptionName].map(([selectionName, optionName]) => (\n                                                        <div key={selectionName}>\n                                                            {selectionName}\n                                                            <> : </>\n                                                            <strong>{optionName}</strong>\n                                                        </div>\n                                                    ))\n                                                }\n                                            </ListGroup.Item>\n                                        )\n                                    })\n                                }\n                            </ListGroup>\n                        )\n                }\n                {\n                    isLoading ? (\n                        <div className=\"text-center\">\n                            <Spinner animation=\"border\" variant=\"primary\" />\n                        </div>\n                    ) : (<></>)\n                }\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={onCancel}>{cancelButtonLabel}</Button>\n            </Modal.Footer>\n        </Modal>\n    );\n}\n\nexport default AssignmentsFindView;\n\nexport const AssignmentsFindButton: React.FC<{\n    requirement: Requirements,\n    idToRequirement: ReadonlyMap<string, RequirementWithCourses>,\n    codeToCourse: ReadonlyMap<string, Course>,\n    plan: Plan,\n    onSubmit: (plan: Plan) => void,\n}> = ({ requirement, idToRequirement, codeToCourse, plan, onSubmit }) => {\n    const [show, setShow] = useState(false);\n\n    const onCancel = useCallback(() => setShow(false), []);\n    const handleSubmit = useCallback(nextPlan => {\n        setShow(false);\n        onSubmit(nextPlan);\n    }, [onSubmit]);\n\n    return (\n        <>\n            <Button variant=\"secondary\" onClick={() => setShow(true)}>\n                最適な割り当ての自動探索\n            </Button>\n            <AssignmentsFindView\n                show={show}\n                onCancel={onCancel}\n                requirement={requirement}\n                idToRequirement={idToRequirement}\n                codeToCourse={codeToCourse}\n                plan={plan}\n                selectsAutomatically={false}\n                additionalInformation={\n                    <p>\n                        先に<b>履修状況の設定</b>と<b>単位数の入力</b>を行っておいてください。\n                    </p>\n                }\n                cancelButtonLabel=\"キャンセル\"\n                onSubmit={handleSubmit}\n            />\n        </>\n    )\n}","const safely = <F extends (...args: any) => any>(f: F, ...args: Parameters<F>): ReturnType<F> | undefined => {\n    try {\n        return f(...args);\n    } catch {\n        return undefined;\n    }\n}\n\nexport default safely;","import parse from 'csv-parse/lib/sync';\nimport React, { useCallback, useState } from 'react';\nimport { Badge, Button, ButtonGroup, Form, Modal, OverlayTrigger, Table, Tooltip } from \"react-bootstrap\";\nimport AssignmentsFindView from './AssignmentsFindView';\nimport { CourseRegistrationStatusBadge, DisabledCourseBadge } from './badges';\nimport Course from './Course';\nimport Plan, { getNextStatus, isRegistrable, RegistrationStatus } from './Plan';\nimport RegistrationStatusLockTarget from './RegistrationStatusLockTarget';\nimport Requirements, { RequirementWithCourses } from './Requirements';\nimport safely from './safely';\n\nconst placeholder = `\n\"学籍番号\",\"学生氏名\",\"科目番号\",\"科目名 \",\"単位数\",\"春学期\",\"秋学期\",\"総合評価\",\"科目区分\",\"開講年度\",\"開講区分\"\n\"201700000\",\"＊＊ ＊＊\",\"GB10615\",\"コンピュータリテラシ\",\" 2.0\",\"-\",\"-\",\"A\",\"A\",\"2017\",\"通常\"\n\"201700000\",\"＊＊ ＊＊\",\"GB10664\",\"プログラミング入門A\",\" 1.0\",\"-\",\"-\",\"A\",\"A\",\"2017\",\"通常\"\n`.trim();\n\ntype RegistrationStatus12 = RegistrationStatus.Registered | RegistrationStatus.Acquired\n\nconst Table1: React.FC<{\n    codeColumnIndex: number,\n    titleColumnIndex: number | undefined,\n    creditsCountColumnIndex: number | undefined,\n    courseAndRecordPairs: readonly CourseAndRecordPair[],\n    courseToStatus: ReadonlyMap<Course, RegistrationStatus>,\n    setCourseToStatus: (courseToStatus: ReadonlyMap<Course, RegistrationStatus>) => void,\n}> = ({ codeColumnIndex, titleColumnIndex, creditsCountColumnIndex, courseAndRecordPairs, courseToStatus, setCourseToStatus }) => {\n    const {\n        course: firstCourse,\n        record: firstRecord,\n    } = courseAndRecordPairs[0];\n\n    const firstRecordIsHeader =\n        firstCourse === undefined &&\n        firstRecord[codeColumnIndex].trim() === '科目番号' &&\n        (titleColumnIndex === undefined || firstRecord[titleColumnIndex].trim() === '科目名') &&\n        (creditsCountColumnIndex === undefined || firstRecord[creditsCountColumnIndex].trim() === '単位数');\n\n    return (\n        <Table\n            bordered hover responsive\n            style={{ whiteSpace: 'nowrap' }}\n        >\n            <thead>\n                <tr>\n                    <th></th>\n                    <th>科目番号</th>\n                    <th>科目名</th>\n                    <th>単位数</th>\n                    {\n                        firstRecord\n                            .map((cell, index) => (<th key={index}>{firstRecordIsHeader ? cell : (<></>)}</th>))\n                            .filter((_, index) => index !== codeColumnIndex && index !== titleColumnIndex && index !== creditsCountColumnIndex)\n                    }\n                </tr>\n            </thead>\n            <tbody>\n                {\n                    (firstRecordIsHeader ? courseAndRecordPairs.slice(1) : courseAndRecordPairs).map(\n                        ({ course, record }, recordIndex) => {\n                            const getTdContent = <T,>(index: number | undefined, mapCourse: (course: Course) => T, mapRecord: (recordValue: string) => T) => {\n                                const recordValue = index === undefined ? undefined : record[index];\n                                return (\n                                    course === undefined ?\n                                        recordValue :\n                                        recordValue === undefined || mapRecord(recordValue) === mapCourse(course) ?\n                                            mapCourse(course) :\n                                            (\n                                                <>\n                                                    <div><del>{recordValue}</del></div>\n                                                    <div><ins>{mapCourse(course)}</ins></div>\n                                                </>\n                                            )\n                                );\n                            }\n\n                            const tds0 = (\n                                <>\n                                    <td><code>{record[codeColumnIndex]}</code></td>\n                                    <td>{getTdContent(titleColumnIndex, course => course.title, recordTitle => recordTitle.trim())}</td>\n                                    <td style={{ textAlign: 'center' }}>\n                                        {getTdContent(creditsCountColumnIndex, course => course.creditCount, recordCreditsCount => +recordCreditsCount)}\n                                    </td>\n                                </>\n                            );\n                            const tds1 = record\n                                .map((cell, index) => (\n                                    <td key={index}>\n                                        {\n                                            index === codeColumnIndex ?\n                                                (<code>{cell}</code>) :\n                                                index === titleColumnIndex ?\n                                                    cell :\n                                                    (<span className=\"text-muted\">{cell}</span>)\n                                        }\n                                    </td>\n                                ))\n                                .filter((_, index) =>\n                                    index !== codeColumnIndex &&\n                                    index !== titleColumnIndex &&\n                                    index !== creditsCountColumnIndex\n                                );\n\n                            const tds = (<>{tds0}{tds1}</>);\n\n                            if (course === undefined) {\n                                return (\n                                    <tr key={recordIndex} className=\"table-secondary\">\n                                        <td style={{ textAlign: 'center' }}>\n                                            <OverlayTrigger\n                                                overlay={\n                                                    <Tooltip id={`record${recordIndex}-tooltip`}>この科目は定義されていないため、このツールでは利用できません。</Tooltip>\n                                                }\n                                            >\n                                                <Badge variant=\"secondary\">未定義</Badge>\n                                            </OverlayTrigger>\n                                        </td>\n                                        {tds}\n                                    </tr>\n                                )\n                            } else if (isRegistrable({ course, courseToStatus })) {\n                                const status = courseToStatus.get(course) ?? RegistrationStatus.Unregistered;\n                                const nextStatus = getNextStatus({ currentStatus: status, lockTarget: RegistrationStatusLockTarget.None });\n\n                                return (\n                                    <tr\n                                        key={recordIndex}\n                                        onClick={\n                                            () => setCourseToStatus(new Map([\n                                                ...courseToStatus,\n                                                [course, nextStatus]\n                                            ]))\n                                        }\n                                        style={{ cursor: 'pointer' }}\n                                        className={status === RegistrationStatus.Unregistered ? undefined : `table-${status === RegistrationStatus.Acquired ? 'success' : 'primary'}`}\n                                    >\n                                        <td style={{ textAlign: 'center' }}>\n                                            <CourseRegistrationStatusBadge status={status} />\n                                        </td>\n                                        {tds}\n                                    </tr>\n                                );\n                            } else {\n                                return (\n                                    <tr key={recordIndex}>\n                                        <td style={{ textAlign: 'center' }}>\n                                            <DisabledCourseBadge id={`record${recordIndex}-tooltip`} />\n                                        </td>\n                                        {tds}\n                                    </tr>\n                                )\n                            }\n\n                        }\n                    )\n                }\n            </tbody>\n        </Table>\n    );\n}\n\ninterface CourseAndRecordPair {\n    course: Course | undefined;\n    record: readonly string[];\n}\n\nconst getColumnIndex = <T,>(courseAndRecordPairs: readonly CourseAndRecordPair[], mapCourse: (course: Course) => T, mapRecord: (recordValue: string) => T) =>\n    courseAndRecordPairs[0].record\n        .map((_, index) => courseAndRecordPairs.reduce((count, { course, record }) => {\n            const recordValue = record[index];\n            if (course !== undefined && mapRecord(recordValue) === mapCourse(course)) {\n                return count + 1;\n            } else {\n                return count;\n            }\n        }, 0))\n        .reduce<{\n            count: number,\n            index: number | undefined,\n        }>((previous, current, index) => {\n            if (current > previous.count) {\n                return {\n                    count: current,\n                    index,\n                }\n            } else {\n                return previous;\n            }\n        }, {\n            count: 0,\n            index: undefined,\n        }).index;\n\nconst Modal1: React.FC<{\n    codeColumnIndex: number,\n    courseAndRecordPairs: readonly CourseAndRecordPair[],\n    show: boolean,\n    courseToStatus: ReadonlyMap<Course, RegistrationStatus>,\n    setCourseToStatus: (courseToStatus: ReadonlyMap<Course, RegistrationStatus>) => void,\n    onCancel: () => void,\n    onSubmit: () => void,\n}> = ({ codeColumnIndex, courseAndRecordPairs, show, courseToStatus, setCourseToStatus, onCancel, onSubmit }) => {\n    const titleColumnIndex = getColumnIndex(courseAndRecordPairs, course => course.title, recordTitle => recordTitle.trim());\n    const creditsCountColumnIndex = getColumnIndex(courseAndRecordPairs, course => course.creditCount, recordCreditsCount => +recordCreditsCount)\n\n    const setAllCourseStatus = useCallback((status: RegistrationStatus12) => {\n        const nextCourseToStatus = new Map();\n        for (const { course } of courseAndRecordPairs) {\n            if (course !== undefined && isRegistrable({ course, courseToStatus: nextCourseToStatus })) {\n                nextCourseToStatus.set(course, status);\n            }\n        }\n        setCourseToStatus(nextCourseToStatus);\n    }, [courseAndRecordPairs, setCourseToStatus]);\n    const setAllCourseStatusToRegistered = useCallback(() => setAllCourseStatus(RegistrationStatus.Registered), [setAllCourseStatus]);\n    const setAllCourseStatusToAcquired = useCallback(() => setAllCourseStatus(RegistrationStatus.Acquired), [setAllCourseStatus]);\n\n    return (\n        <Modal size=\"xl\" show={show} onHide={onCancel}>\n            <Modal.Header closeButton>\n                <Modal.Title>CSVから履修状況を一括登録</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <p>CSVデータから見つかった科目が以下に表示されています。</p>\n                <p>\n                    それぞれの科目を [履修する] / [修得済み] のどちらかに設定してください。\n                    CSVデータに不要な科目が含まれている場合は、 [履修しない] に設定してください。\n                </p>\n                <p>\n                    [OK] を押すと、設定された履修状況のもとで、最適な科目群への割り当てがないか探します。\n                    割り当てが見つかればそれが適用され、見つからない場合は履修状況の設定だけが行われます。\n                    <strong>現在の履修 / 修得状況は失われます。</strong>\n                </p>\n                <ButtonGroup className=\"mb-3\">\n                    <Button\n                        variant=\"outline-primary\"\n                        onClick={setAllCourseStatusToRegistered}\n                    >\n                        すべて履修する\n                    </Button>\n                    <Button\n                        variant=\"outline-success\"\n                        onClick={setAllCourseStatusToAcquired}\n                    >\n                        すべて修得済み\n                    </Button>\n                </ButtonGroup>\n                <Table1\n                    codeColumnIndex={codeColumnIndex}\n                    titleColumnIndex={titleColumnIndex}\n                    creditsCountColumnIndex={creditsCountColumnIndex}\n                    courseAndRecordPairs={courseAndRecordPairs}\n                    courseToStatus={courseToStatus}\n                    setCourseToStatus={setCourseToStatus}\n                />\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={onCancel}>戻る</Button>\n                <Button onClick={onSubmit}>OK</Button>\n            </Modal.Footer>\n        </Modal>\n    );\n}\n\nconst Modal0: React.FC<{\n    codeToCourse: ReadonlyMap<string, Course>,\n    show: boolean,\n    onCancel: () => void,\n    onSubmit: ({ courseAndRecordPairs, codeColumnIndex }: {\n        courseAndRecordPairs: readonly CourseAndRecordPair[],\n        codeColumnIndex: number,\n    }) => void,\n}> = ({ codeToCourse, show, onCancel: onHide, onSubmit }) => {\n    const [csv, setCSV] = useState(\"\");\n    const [validated, setValidated] = useState(false);\n\n    const records: readonly (readonly string[])[] | undefined = safely(parse, csv);\n    const { courseAndRecordPairs, index: codeColumnIndex } = (\n        records === undefined || records.length === 0 ? undefined : records[0]\n            .map((_, index) => records.reduce(({ count, courseAndRecordPairs }, record) => {\n                const code = record[index];\n                const course = codeToCourse.get(code.trim());\n                return {\n                    count: course === undefined ? count : count + 1,\n                    courseAndRecordPairs: [...courseAndRecordPairs, { record, course }],\n                };\n            }, { count: 0, courseAndRecordPairs: new Array<CourseAndRecordPair>() }))\n            .reduce<{\n                count: number;\n                courseAndRecordPairs: readonly CourseAndRecordPair[] | undefined;\n                index: number | undefined;\n            }>((previous, current, index) => {\n                if (current.count > previous.count) {\n                    return { ...current, index };\n                } else {\n                    return previous;\n                }\n            }, {\n                count: 0,\n                courseAndRecordPairs: undefined,\n                index: undefined,\n            })\n    ) ?? {\n        courseAndRecordPairs: undefined,\n        index: undefined,\n    };\n\n    const feedback =\n        records === undefined ? 'CSVの形式が不正です' :\n            records.length === 0 ? 'CSVを入力してください' :\n                codeColumnIndex === undefined ? '科目がひとつも見つかりません' :\n                    undefined;\n\n    const handleCSVChange = (nextCSV: string) => {\n        setCSV(nextCSV);\n        setValidated(true);\n    }\n\n    return (\n        <Modal size=\"lg\" show={show} onHide={onHide}>\n            <Modal.Header closeButton>\n                <Modal.Title>CSVから履修状況を一括登録</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <p>\n                    ひとつの列に科目番号が記述されたCSVデータを用意してください。\n                    次のようなCSVデータを使用できます。\n                </p>\n                <ul>\n                    <li>TWINS の [成績照会] 画面からダウンロードしたCSVファイル</li>\n                    <li>各行に科目番号のみを記述したデータ</li>\n                </ul>\n                <p>\n                    用意したデータをテキストボックスに貼り付けるか、ファイルとして読み込んでください。\n                </p>\n\n                <Form.Group>\n                    <Form.Label>CSV / 科目番号のリスト</Form.Label>\n                    <Form.Control\n                        as=\"textarea\"\n                        rows={5}\n                        placeholder={placeholder}\n                        value={csv}\n                        className=\"text-monospace\"\n                        onChange={\n                            (event: React.ChangeEvent<HTMLTextAreaElement>) => handleCSVChange(event.target.value)\n                        }\n                        style={{ whiteSpace: 'pre' }}\n                        isInvalid={validated && feedback !== undefined}\n                    />\n                    <Form.Control.Feedback type=\"invalid\">{feedback}</Form.Control.Feedback>\n                </Form.Group>\n                <Form.Group>\n                    <Form.Label>CSVファイル</Form.Label>\n                    <Form.File\n                        custom\n                        accept=\".csv,text/csv,text/plain\"\n                        id=\"csv-file-input\"\n                        label=\"Choose file\"\n                        onChange={\n                            (event: React.ChangeEvent<HTMLInputElement>) => {\n                                const file = event.target.files?.item(0);\n                                if (file === null || file === undefined) {\n                                    return;\n                                }\n                                const reader = new FileReader();\n                                reader.addEventListener('load', () => {\n                                    if (typeof reader.result === 'string') {\n                                        handleCSVChange(reader.result);\n                                    }\n                                });\n                                reader.readAsText(file);\n                            }\n                        }\n                    />\n                </Form.Group>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={onHide}>キャンセル</Button>\n                {\n                    courseAndRecordPairs === undefined || codeColumnIndex === undefined ?\n                        (<Button disabled>次へ</Button>) :\n                        (<Button onClick={() => onSubmit({ courseAndRecordPairs, codeColumnIndex })}>次へ</Button>)\n                }\n            </Modal.Footer>\n        </Modal>\n    )\n};\n\nconst CollectivelyCourseSetView: React.FC<{\n    codeToCourse: ReadonlyMap<string, Course>,\n    requirement: Requirements,\n    idToRequirement: ReadonlyMap<string, RequirementWithCourses>,\n    plan: Plan,\n    onSubmit: (plan: Plan) => void,\n}> = ({ codeToCourse, requirement, idToRequirement, plan, onSubmit }) => {\n    const [page, setPage] = useState<0 | 1 | 2 | undefined>();\n    const [courseAndRecordPairs, setCourseAndRecordPairs] = useState<readonly CourseAndRecordPair[]>();\n    const [codeColumnIndex, setCodeColumnIndex] = useState<number>();\n    const [courseToStatus, setCourseToStatus] = useState<ReadonlyMap<Course, RegistrationStatus>>(new Map());\n\n    return (\n        <>\n            <Button variant=\"secondary\" onClick={() => setPage(0)}>CSVから履修状況を一括登録</Button>\n            <Modal0\n                codeToCourse={codeToCourse}\n                show={page === 0}\n                onCancel={() => setPage(undefined)}\n                onSubmit={\n                    ({ courseAndRecordPairs, codeColumnIndex }) => {\n                        const nextCourseToStatus = new Map(courseToStatus);\n                        for (const { course } of courseAndRecordPairs) {\n                            if (course !== undefined && !nextCourseToStatus.has(course) && isRegistrable({ course, courseToStatus: nextCourseToStatus })) {\n                                nextCourseToStatus.set(course, RegistrationStatus.Registered);\n                            }\n                        }\n                        setCourseToStatus(nextCourseToStatus);\n                        setCourseAndRecordPairs(courseAndRecordPairs);\n                        setCodeColumnIndex(codeColumnIndex);\n                        setPage(1);\n                    }\n                }\n            />\n            {\n                courseAndRecordPairs === undefined || codeColumnIndex === undefined ? (<></>) : (\n                    <Modal1\n                        courseAndRecordPairs={courseAndRecordPairs}\n                        codeColumnIndex={codeColumnIndex}\n                        show={page === 1}\n                        courseToStatus={courseToStatus}\n                        setCourseToStatus={setCourseToStatus}\n                        onCancel={() => setPage(0)}\n                        onSubmit={() => setPage(2)}\n                    />\n                )\n            }\n            {\n                courseToStatus === undefined ? (<></>) : (\n                    <AssignmentsFindView\n                        show={page === 2}\n                        requirement={requirement}\n                        idToRequirement={idToRequirement}\n                        codeToCourse={codeToCourse}\n                        plan={{ ...plan, courseToStatus }}\n                        selectsAutomatically={true}\n                        cancelButtonLabel=\"スキップ\"\n                        additionalInformation={\n                            <p>スキップすると科目群への割り当てを行わず、履修状況の設定だけを行います。</p>\n                        }\n                        onCancel={\n                            () => {\n                                setPage(undefined);\n                                onSubmit({ ...plan, courseToStatus });\n                            }\n                        }\n                        onSubmit={\n                            plan => {\n                                setPage(undefined);\n                                onSubmit(plan);\n                            }\n                        }\n                    />\n                )\n            }\n        </>\n    )\n}\n\nexport default CollectivelyCourseSetView;","import Course from '../Course';\nimport courses from './courses1.json';\n\nconst codeToCourse = new Map<string, Course>();\n\nfor (const course of courses) {\n    codeToCourse.set(course.code, course);\n}\n\nexport default codeToCourse;","import React, { useEffect, useState } from 'react';\nimport { Accordion, Button, Card, Form } from \"react-bootstrap\";\nimport Plan, { toJSON } from \"./Plan\";\n\nconst ExportView = ({ plan, eventKey }: {\n    plan: Plan,\n    eventKey: string,\n}) => {\n    const jsonText = JSON.stringify(toJSON(plan));\n    const [url, setURL] = useState<string | undefined>();\n    useEffect(() => {\n        const blob = new Blob([jsonText], { type: 'application/json' });\n        const reader = new FileReader();\n        const onLoad = () => {\n            const url = reader.result;\n            if (typeof url === 'string') {\n                setURL(url);\n            }\n        }\n        reader.addEventListener('load', onLoad);\n        reader.readAsDataURL(blob);\n        return () => reader.removeEventListener('load', onLoad);\n    }, [jsonText]);\n\n    return (\n        <Card>\n            <Card.Header>\n                <Accordion.Toggle eventKey={eventKey} variant=\"link\" as={Button}>\n                    エクスポート\n                </Accordion.Toggle>\n            </Card.Header>\n            <Accordion.Collapse eventKey={eventKey}>\n                <Card.Body>\n                    <Form>\n                        <Form.Group>\n                            <Form.Label>JSON</Form.Label>\n                            <Form.Control\n                                readOnly className=\"input-monospace\"\n                                value={jsonText}\n                                onFocus={(e: React.FocusEvent<HTMLInputElement>) => e.target.select()}\n                            />\n                        </Form.Group>\n                        <Button as='a' href={url} download>保存</Button>\n                    </Form>\n                </Card.Body>\n            </Accordion.Collapse>\n        </Card>\n    );\n}\n\nexport default ExportView;","enum FilterType {\n    None,\n    Registered,\n    Valid,\n}\n\nexport default FilterType;","import React, { useState } from 'react';\n\nconst getValueFromModal = async <T, P>(\n    ModalType: React.ComponentType<{\n        onReturn: (value: T) => void,\n        onExited: () => void,\n    } & P>,\n    props: P,\n    setModalsAndCount: React.Dispatch<React.SetStateAction<ModalsAndCount>>,\n): Promise<T> => new Promise((resolve, reject) => {\n    try {\n        setModalsAndCount(({ modals, count }) => {\n            const modal = (\n                <ModalType\n                    {...props}\n                    onReturn={value => resolve(value)}\n                    onExited={() => setModalsAndCount(\n                        ({ modals, count }) => ({\n                            modals: modals.filter(value => value !== modal),\n                            count,\n                        })\n                    )}\n                    key={count}\n                />\n            );\n            return ({\n                modals: [...modals, modal],\n                count: count + 1,\n            })\n        });\n    } catch (e) {\n        reject(e);\n    }\n});\n\nexport interface ModalsAndCount {\n    readonly modals: readonly JSX.Element[];\n    readonly count: number;\n}\n\nconst initialModalsAndCount: ModalsAndCount = {\n    modals: [],\n    count: 0,\n};\n\nexport const useModals = () => {\n    const [modalsAndCount, setModalsAndCount] = useState(initialModalsAndCount);\n    return {\n        modals: modalsAndCount.modals,\n        setModalsAndCount,\n    };\n};\n\nexport default getValueFromModal;","import React, { useState } from 'react';\nimport { Accordion, Button, Card, Form, Modal, useAccordionToggle } from \"react-bootstrap\";\nimport Course from \"./Course\";\nimport getValueFromModal, { useModals } from './getValueFromModal';\nimport Plan, { emptyPlan, fromJSON, toJSON } from \"./Plan\";\nimport { RequirementWithCourses } from \"./Requirements\";\nimport safely from './safely';\n\nconst ImportConfirmationModal = ({ onReturn, onExited }: {\n    onReturn: (value: boolean) => void,\n    onExited: () => void\n}) => {\n    const [show, setShow] = useState(true);\n\n    return (\n        <Modal show={show} onHide={() => { setShow(false); onReturn(false); }} onExited={onExited}>\n            <Modal.Header closeButton>\n                <Modal.Title>インポート</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                インポートすると現在の設定状態は失われますが、よろしいですか？\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={() => { setShow(false); onReturn(false); }}>いいえ</Button>\n                <Button variant=\"danger\" onClick={() => { setShow(false); onReturn(true); }}>はい</Button>\n            </Modal.Footer>\n        </Modal>\n    );\n}\n\nconst ImportView = ({ eventKey, codeToCourse, idToRequirement, onSubmit }: {\n    eventKey: string,\n    codeToCourse: ReadonlyMap<string, Course>,\n    idToRequirement: ReadonlyMap<string, RequirementWithCourses>,\n    onSubmit: (nextPlan: Plan) => void,\n}) => {\n    const [jsonText, setJSONText] = useState(\"\");\n    const [validated, setValidated] = useState(false);\n    const toggle = useAccordionToggle(eventKey, () => { });\n    const { modals, setModalsAndCount } = useModals();\n\n    const json = safely(JSON.parse, jsonText);\n    const nextPlan = json && safely(fromJSON, json, { codeToCourse, idToRequirement });\n    const isInvalid = nextPlan === undefined;\n\n    const handleJSONChange = (nextJSON: string) => {\n        setJSONText(nextJSON);\n        setValidated(true);\n    }\n\n    const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        if (\n            nextPlan === undefined ||\n            !await getValueFromModal(ImportConfirmationModal, {}, setModalsAndCount)\n        ) {\n            return;\n        }\n        onSubmit(nextPlan);\n        toggle(e);\n    };\n\n    return (\n        <>\n            {modals}\n            <Card>\n                <Card.Header>\n                    <Accordion.Toggle eventKey={eventKey} variant=\"link\" as={Button}>\n                        インポート\n                    </Accordion.Toggle>\n                </Card.Header>\n                <Accordion.Collapse eventKey={eventKey}>\n                    <Card.Body>\n                        <p>\n                            保存したJSONデータをテキストボックスに貼り付けるか、ファイルとして読み込みます。\n                            次に [インポート] ボタンを押します。\n                            <strong>現在の設定状態は失われます。</strong>\n                        </p>\n                        <Form onSubmit={handleSubmit}>\n                            <Form.Group>\n                                <Form.Label>JSON</Form.Label>\n                                <Form.Control\n                                    className=\"input-monospace\"\n                                    isInvalid={validated && isInvalid}\n                                    value={jsonText}\n                                    placeholder={JSON.stringify(toJSON(emptyPlan))}\n                                    onChange={(event: React.ChangeEvent<HTMLInputElement>) => handleJSONChange(event.target.value)}\n                                />\n                                <Form.Control.Feedback type=\"invalid\">JSONの形式が不正です</Form.Control.Feedback>\n                            </Form.Group>\n                            <Form.Group>\n                                <Form.Label>JSONファイル</Form.Label>\n                                <Form.File\n                                    custom\n                                    label=\"Choose file\"\n                                    accept=\".json,application/json\"\n                                    id=\"json-file-input\"\n                                    onChange={\n                                        (event: React.ChangeEvent<HTMLInputElement>) => {\n                                            const file = event.target.files?.item(0);\n                                            if (file === null || file === undefined) {\n                                                return;\n                                            }\n                                            const reader = new FileReader();\n                                            reader.addEventListener('load', () => {\n                                                if (typeof reader.result === 'string') {\n                                                    handleJSONChange(reader.result);\n                                                }\n                                            });\n                                            reader.readAsText(file);\n                                        }\n                                    }\n                                />\n                            </Form.Group>\n                            <Button type=\"submit\" disabled={isInvalid}>インポート</Button>\n                        </Form>\n                    </Card.Body>\n                </Accordion.Collapse>\n            </Card>\n        </>\n    );\n}\n\nexport default ImportView;","import Course from \"../Course\";\nimport Plan, { RegisteredCreditCounts, RegistrationStatus } from \"../Plan\";\nimport { RequirementWithChildrenJSON, RequirementWithCoursesJSON, SelectionRequirementJSON } from './RequirementsJSON';\n\ntype Requirements = RequirementWithChildren | RequirementWithCourses | SelectionRequirement;\nexport default Requirements;\n\nabstract class Requirement {\n    readonly id: string\n    readonly name: string;\n    abstract getRegisteredCreditCounts(plan: Plan, includesExcess: boolean): RegisteredCreditCounts;\n    abstract getRequiredCreditCount(selectionNameToOptionName: ReadonlyMap<string, string>): Range;\n    abstract getVisibleRequirements(selectionNameToOptionName: ReadonlyMap<string, string>): readonly RequirementWithCourses[];\n    constructor({ id, name }: { id: string, name: string }) {\n        this.id = id;\n        this.name = name;\n    }\n    getStatus(plan: Plan): RegistrationStatus {\n        const requiredCreditCount = this.getRequiredCreditCount(plan.selectionNameToOptionName);\n        const registeredCreditCounts = this.getRegisteredCreditCounts(plan, false);\n        return registeredCreditCounts.acquired >= requiredCreditCount.min ?\n            RegistrationStatus.Acquired :\n            registeredCreditCounts.registered >= requiredCreditCount.min ?\n                RegistrationStatus.Registered :\n                RegistrationStatus.Unregistered;\n    }\n}\n\nexport interface Range {\n    min: number;\n    max: number;\n}\n\nexport interface RequirementWithChildrenInit {\n    readonly id: string;\n    readonly name: string;\n    readonly description?: string;\n    readonly children: Iterable<Requirements>;\n    readonly creditCount?: Range;\n}\n\nexport class RequirementWithChildren extends Requirement implements RequirementWithChildrenInit {\n    readonly description?: string;\n    readonly children: readonly Requirements[];\n    readonly creditCount?: Range;\n    constructor({ id, name, description, children, creditCount }: RequirementWithChildrenInit) {\n        super({ id, name });\n        this.description = description\n        this.children = [...children];\n        this.creditCount = creditCount;\n    }\n    getRegisteredCreditCounts(plan: Plan, includesExcess: boolean): RegisteredCreditCounts {\n        const creditCounts = this.children.reduce(\n            (previous, child) => {\n                const childRegisteredCreditCount = child.getRegisteredCreditCounts(plan, includesExcess);\n                return {\n                    acquired: previous.acquired + childRegisteredCreditCount.acquired,\n                    registered: previous.registered + childRegisteredCreditCount.registered,\n                }\n            },\n            { acquired: 0, registered: 0 }\n        );\n        return includesExcess || this.creditCount === undefined ? creditCounts : {\n            acquired: Math.min(this.creditCount.max, creditCounts.acquired),\n            registered: Math.min(this.creditCount.max, creditCounts.registered),\n        };\n    }\n    getRequiredCreditCount(selectionNameToOptionName: ReadonlyMap<string, string>): Range {\n        return this.creditCount === undefined ? this.children.reduce((previous, child) => {\n            const childRequiredCreditCount = child.getRequiredCreditCount(selectionNameToOptionName);\n            return {\n                min: previous.min + childRequiredCreditCount.min,\n                max: previous.max + childRequiredCreditCount.max,\n            }\n        }, { min: 0, max: 0 }) : this.creditCount;\n    }\n    getStatus(plan: Plan): RegistrationStatus {\n        return Math.min(\n            super.getStatus(plan),\n            ...this.children.map(child => child.getStatus(plan))\n        );\n    }\n    getVisibleRequirements(selectionNameToOptionName: ReadonlyMap<string, string>): readonly RequirementWithCourses[] {\n        return this.children.flatMap(requirement => requirement.getVisibleRequirements(selectionNameToOptionName));\n    }\n    toJSON(): RequirementWithChildrenJSON {\n        return {\n            name: this.name,\n            description: this.description,\n            children: this.children.map(child => child.toJSON()),\n            creditCount: this.creditCount,\n        }\n    }\n}\n\nexport interface RequirementWithCoursesInit {\n    readonly id: string;\n    readonly name: string;\n    readonly description?: string;\n    readonly courses: Iterable<Course>;\n    readonly creditCount: Range;\n    readonly allowsOthers?: boolean;\n}\n\nexport class RequirementWithCourses extends Requirement {\n    readonly description?: string;\n    readonly courses: readonly Course[];\n    readonly creditCount: Range;\n    readonly allowsOthers: boolean;\n    constructor({ id, name, description, courses, creditCount, allowsOthers = false }: RequirementWithCoursesInit) {\n        super({ id, name });\n        this.description = description;\n        this.courses = [...courses];\n        this.creditCount = creditCount;\n        this.allowsOthers = allowsOthers;\n    }\n    getRegisteredCreditCounts(plan: Plan, includesExcess: boolean): RegisteredCreditCounts {\n        const othersCount = plan.requirementToOthersCount.get(this) || { acquired: 0, registered: 0 };\n        const creditCounts = this.courses.reduce((previous, course): RegisteredCreditCounts => {\n            const courseStatus = plan.courseToStatus.get(course) || RegistrationStatus.Unregistered;\n            if (plan.courseToRequirement.get(course) === this) {\n                return courseStatus === RegistrationStatus.Acquired ?\n                    {\n                        acquired: previous.acquired + course.creditCount,\n                        registered: previous.registered + course.creditCount,\n                    } :\n                    courseStatus === RegistrationStatus.Registered ?\n                        {\n                            acquired: previous.acquired,\n                            registered: previous.registered + course.creditCount,\n                        } :\n                        previous;\n            } else {\n                return previous;\n            }\n        }, othersCount);\n        return includesExcess || this.creditCount === undefined ? creditCounts : {\n            acquired: Math.min(this.creditCount.max, creditCounts.acquired),\n            registered: Math.min(this.creditCount.max, creditCounts.registered),\n        };\n    }\n    getRequiredCreditCount() {\n        return this.creditCount;\n    }\n    getVisibleRequirements() {\n        return [this] as const;\n    }\n    toJSON(): RequirementWithCoursesJSON {\n        return {\n            name: this.name,\n            description: this.description,\n            courses: this.courses.map(course => course.code),\n            creditCount: this.creditCount,\n            allowsOthers: this.allowsOthers,\n        }\n    }\n}\n\ninterface Option {\n    name: string;\n    requirement: Requirements;\n}\n\nexport interface SelectionRequirementInit {\n    readonly id: string;\n    readonly name: string;\n    readonly options: Iterable<Option>;\n}\n\nexport class SelectionRequirement extends Requirement implements SelectionRequirementInit {\n    readonly name: string;\n    readonly options: readonly Option[];\n    readonly optionNameToRequirement: ReadonlyMap<string, Requirements>;\n    constructor({ id, name, options: options0 }: SelectionRequirementInit) {\n        super({ id, name });\n        this.name = name;\n        const options = [...options0]\n        this.options = options;\n        this.optionNameToRequirement = new Map(options.map(({ name, requirement }) => [name, requirement]));\n    }\n    getSelectedOptionName(selectionNameToOptionName: ReadonlyMap<string, string>) {\n        const selectedOptionName = selectionNameToOptionName.get(this.name) || this.options[0].name;\n        return selectedOptionName;\n    }\n    getSelectedRequirement(selectionNameToOptionName: ReadonlyMap<string, string>) {\n        const selectedOptionName = this.getSelectedOptionName(selectionNameToOptionName);\n        const selectedRequirement = this.optionNameToRequirement.get(selectedOptionName);\n        return selectedRequirement;\n    }\n    getRegisteredCreditCounts(plan: Plan, includesExcess: boolean): RegisteredCreditCounts {\n        const selectedRequirement = this.getSelectedRequirement(plan.selectionNameToOptionName);\n        if (selectedRequirement === undefined) {\n            return { acquired: 0, registered: 0 };\n        } else {\n            return selectedRequirement.getRegisteredCreditCounts(plan, includesExcess);\n        }\n    }\n    getRequiredCreditCount(selectionNameToOptionName: ReadonlyMap<string, string>): Range {\n        const selectedRequirement = this.getSelectedRequirement(selectionNameToOptionName);\n        if (selectedRequirement === undefined) {\n            return { min: 0, max: 0 };\n        } else {\n            return selectedRequirement.getRequiredCreditCount(selectionNameToOptionName);\n        }\n    }\n    getVisibleRequirements(selectionNameToOptionName: ReadonlyMap<string, string>): readonly RequirementWithCourses[] {\n        const selectedRequirement = this.getSelectedRequirement(selectionNameToOptionName);\n        if (selectedRequirement === undefined) {\n            return [];\n        } else {\n            return selectedRequirement.getVisibleRequirements(selectionNameToOptionName);\n        }\n    }\n    toJSON(): SelectionRequirementJSON {\n        return {\n            name: this.name,\n            options: this.options.map(({ name, requirement }) => ({\n                name,\n                requirement: requirement.toJSON(),\n            }))\n        }\n    }\n}\n","import Course from \"../Course\";\nimport Requirements, { Range, RequirementWithChildren, RequirementWithCourses, SelectionRequirement } from \"./Requirements\";\nimport RequirementsJSON from \"./RequirementsJSON\";\n\ninterface RequirementAndDictionary {\n    readonly requirement: Requirements;\n    readonly idToRequirement: ReadonlyMap<string, RequirementWithCourses>;\n}\n\nconst numberOrRangeToRange = (numberOrRange: number | Range): Range =>\n    typeof numberOrRange === 'number' ? {\n        min: numberOrRange,\n        max: numberOrRange,\n    } : numberOrRange;\n\nconst getInnerRequirementAndDictionaryFromJSON = (\n    json: RequirementsJSON,\n    codeToCourse: ReadonlyMap<string, Course>,\n    requirementNameToCount: Map<string, number>\n): RequirementAndDictionary => {\n    const count = requirementNameToCount.get(json.name) ?? 0;\n    requirementNameToCount.set(json.name, count + 1);\n    const id = `${json.name}_${count}`;\n    if ('courses' in json) {\n        const requirement = new RequirementWithCourses({\n            id,\n            name: json.name,\n            description: json.description,\n            creditCount: numberOrRangeToRange(json.creditCount),\n            courses: json.courses.map(courseCode => {\n                const course = codeToCourse.get(courseCode);\n                if (course === undefined) { throw new Error(`科目番号 ${courseCode} は定義されていません。`); }\n                return course;\n            }),\n            allowsOthers: json.allowsOthers,\n        });\n        return {\n            requirement,\n            idToRequirement: new Map([[requirement.id, requirement]]),\n        };\n    } else if ('children' in json) {\n        const requirementAndDictionaryPairs = json.children.map(child => getInnerRequirementAndDictionaryFromJSON(child, codeToCourse, requirementNameToCount));\n        const requirement = new RequirementWithChildren({\n            id,\n            name: json.name,\n            description: json.description,\n            children: requirementAndDictionaryPairs.map(({ requirement }) => requirement),\n            creditCount: json.creditCount === undefined ? undefined : numberOrRangeToRange(json.creditCount),\n        });\n        return {\n            requirement,\n            idToRequirement: new Map(\n                requirementAndDictionaryPairs.flatMap(({ idToRequirement }) => [...idToRequirement.entries()])\n            ),\n        };\n    } else {\n        const optionAndDictionaryArray = json.options.map(optionJSON => {\n            if ('requirement' in optionJSON) {\n                const { requirement, idToRequirement } = getInnerRequirementAndDictionaryFromJSON(optionJSON.requirement, codeToCourse, requirementNameToCount);\n                return {\n                    option: { requirement, name: optionJSON.name },\n                    idToRequirement,\n                };\n            } else {\n                const { requirement, idToRequirement } = getInnerRequirementAndDictionaryFromJSON(optionJSON, codeToCourse, requirementNameToCount);\n                return {\n                    option: { requirement, name: requirement.name },\n                    idToRequirement,\n                };\n            }\n        })\n        const requirement = new SelectionRequirement({\n            id,\n            name: json.name,\n            options: optionAndDictionaryArray.map(({ option }) => option),\n        });\n        return {\n            requirement,\n            idToRequirement: new Map(\n                optionAndDictionaryArray.flatMap(({ idToRequirement }) => [...idToRequirement.entries()])\n            ),\n        };\n    }\n};\n\nconst getRequirementAndDictionaryFromJSON = (\n    json: RequirementsJSON,\n    codeToCourse: ReadonlyMap<string, Course>\n) => getInnerRequirementAndDictionaryFromJSON(json, codeToCourse, new Map())\n\nexport default getRequirementAndDictionaryFromJSON;\n","import codeToCourse from '../courses';\nimport { getRequirementAndDictionaryFromJSON } from '../Requirements';\nimport coins17_0 from './coins17.json';\nimport klis17_0 from './klis17.json';\nimport mast17_0 from './mast17.json';\n\nconst requirementAndDictionaryPairs = new Map([\n    ['coins17', {\n        id: 'coins17',\n        name: '情報科学類 / 2017年度入学',\n        ...getRequirementAndDictionaryFromJSON(coins17_0, codeToCourse)\n    }],\n    ['mast17', {\n        id: 'mast17',\n        name: '情報メディア創成学類 / 2017年度入学',\n        ...getRequirementAndDictionaryFromJSON(mast17_0, codeToCourse)\n    }],\n    ['klis17', {\n        id: 'klis17',\n        name: '知識情報・図書館学類 / 2017年度入学',\n        ...getRequirementAndDictionaryFromJSON(klis17_0, codeToCourse)\n    }],\n]);\n\nexport default requirementAndDictionaryPairs;","import React from 'react';\nimport { RequirementRegistrationStatusBadge } from '../badges';\nimport Plan from '../Plan';\nimport Requirements, { RequirementWithChildren, RequirementWithCourses } from '../Requirements';\n\nconst CreditsCountLabelDelimiter = () => (<span className=\"text-muted\"> / </span>)\n\nconst ExceededCreditsCountLabel = ({ creditsCount }: { creditsCount: number }) => (\n    <>\n        <span className=\"text-muted\">(</span>\n        +{creditsCount}\n        <span className=\"text-muted\">)</span>\n    </>\n);\n\nconst CreditsCountLabels = ({ requirement, plan }: {\n    requirement: Requirements,\n    plan: Plan,\n}) => {\n    const creditsCount = requirement.getRegisteredCreditCounts(plan, false);\n    const exceededCreditsCount = requirement.getRegisteredCreditCounts(plan, true);\n    const requiredCreditsCount = requirement.getRequiredCreditCount(plan.selectionNameToOptionName);\n\n    return (\n        <div>\n            <span>\n                <span className=\"text-muted\">修得</span>\n                <> </>\n                <strong className=\"text-success\">{creditsCount.acquired}</strong>\n                {exceededCreditsCount.acquired > creditsCount.acquired ? (<ExceededCreditsCountLabel creditsCount={exceededCreditsCount.acquired - creditsCount.acquired} />) : (<></>)}\n            </span>\n            <CreditsCountLabelDelimiter />\n            <span>\n                <span className=\"text-muted\">履修</span>\n                <> </>\n                <strong className=\"text-primary\">{creditsCount.registered}</strong>\n                {exceededCreditsCount.registered > creditsCount.registered ? (<ExceededCreditsCountLabel creditsCount={exceededCreditsCount.registered - creditsCount.registered} />) : (<></>)}\n            </span>\n            <CreditsCountLabelDelimiter />\n            <span>\n                <span className=\"text-muted\">必要</span>\n                <> </>\n                <strong>\n                    {\n                        requiredCreditsCount.min === requiredCreditsCount.max ?\n                            requiredCreditsCount.min :\n                            `${requiredCreditsCount.min}~${requiredCreditsCount.max}`\n                    }\n                </strong>\n            </span>\n        </div>\n    )\n};\n\nexport const RequirementSummaryView = ({ requirement, plan }: {\n    requirement: RequirementWithChildren | RequirementWithCourses,\n    plan: Plan,\n}) => {\n    const status = requirement.getStatus(plan);\n    return (\n        <>\n            <h5 className=\"d-flex justify-content-between align-items-center\">\n                <div>{requirement.name}</div>\n                <div className=\"ml-2 flex-shrink-0\" >\n                    <RequirementRegistrationStatusBadge status={status} />\n                </div>\n            </h5>\n            <div>\n                {requirement.description === undefined ? (<></>) : (<div className=\"text-muted\">{requirement.description}</div>)}\n                <CreditsCountLabels requirement={requirement} plan={plan} />\n            </div>\n        </>\n    );\n}\n","import React from 'react';\nimport { ListGroup } from 'react-bootstrap';\nimport Course from '../Course';\nimport FilterType from '../FilterType';\nimport Plan, { RegisteredCreditCounts } from '../Plan';\nimport RegistrationStatusLockTarget from '../RegistrationStatusLockTarget';\nimport { RequirementWithChildren, RequirementWithCourses } from '../Requirements';\nimport InnerRequirementView from './InnerRequirementView';\nimport { RequirementSummaryView } from './RequirementSummaryView';\n\nconst RequirementWithChildrenView = ({ requirement, filterType, lockTarget, plan, onCourseClick, onOthersCountsChange, onSelectionChange }: {\n    requirement: RequirementWithChildren,\n    filterType: FilterType,\n    lockTarget: RegistrationStatusLockTarget,\n    plan: Plan,\n    onCourseClick: (course: Course, requirement: RequirementWithCourses) => void,\n    onOthersCountsChange: (requirement: RequirementWithCourses, newOthersCount: RegisteredCreditCounts) => void,\n    onSelectionChange: (selectionName: string, newOptionName: string) => void,\n}) => (\n        <>\n            <RequirementSummaryView requirement={requirement} plan={plan} />\n            <ListGroup className=\"mt-3\">\n                {\n                    requirement.children.map(child => (\n                        <ListGroup.Item key={child.id}>\n                            <InnerRequirementView\n                                requirement={child} plan={plan}\n                                filterType={filterType} lockTarget={lockTarget}\n                                onCourseClick={onCourseClick} onSelectionChange={onSelectionChange}\n                                onOthersCountsChange={onOthersCountsChange}\n                            />\n                        </ListGroup.Item>\n                    ))\n                }\n            </ListGroup>\n        </>\n    );\n\nexport default RequirementWithChildrenView;","import React, { useCallback } from 'react';\nimport { Badge, ListGroup, OverlayTrigger, Tooltip } from \"react-bootstrap\";\nimport { CourseRegistrationStatusBadge, DisabledCourseBadge } from '../badges';\nimport Course from \"../Course\";\nimport Plan, { getNextStatus, isRegistrable, RegistrationStatus } from '../Plan';\nimport RegistrationStatusLockTarget from '../RegistrationStatusLockTarget';\nimport Requirements, { RequirementWithCourses } from \"../Requirements\";\n\nconst CourseListItem = ({ course, onClick, newRequirement, plan, lockTarget }: {\n    course: Course,\n    newRequirement: Requirements,\n    plan: Plan,\n    lockTarget: RegistrationStatusLockTarget,\n    onClick: () => void,\n}) => {\n    const status = plan.courseToStatus.get(course) ?? RegistrationStatus.Unregistered;\n    const currentRequirement = plan.courseToRequirement.get(course);\n    const isRegisteredButInvalid = status !== RegistrationStatus.Unregistered && currentRequirement !== newRequirement;\n    const isRegistrable0 = isRegistrable({\n        course,\n        courseToStatus: plan.courseToStatus\n    });\n    const action = (getNextStatus({ currentStatus: status, lockTarget }) !== status && isRegistrable0) || isRegisteredButInvalid;\n    const handleClick = useCallback(() => {\n        if (isRegistrable0) {\n            onClick();\n        }\n    }, [isRegistrable0, onClick]);\n\n    return (\n        <ListGroup.Item\n            action={action}\n            onClick={handleClick}\n            variant={\n                isRegisteredButInvalid ? 'dark' :\n                    status === RegistrationStatus.Acquired ? 'success' :\n                        status === RegistrationStatus.Registered ? 'primary' :\n                            undefined\n            }\n        >\n            <div className=\"d-flex justify-content-between align-items-center\">\n                <div>\n                    <div>{course.title}</div>\n                    <code>{course.code}</code>\n                </div>\n                <div className=\"ml-2 text-right flex-shrink-0\">\n                    {\n                        isRegisteredButInvalid ?\n                            (\n                                <OverlayTrigger\n                                    overlay={\n                                        <Tooltip id=\"tooltip1\">\n                                            {\n                                                currentRequirement === undefined ?\n                                                    'この科目はどの科目群にも割り当てられていないため、合計単位数の計算に含まれません。' :\n                                                    'この科目はほかの科目群に割り当てられているため、ここでは合計単位数の計算に含まれません。'\n                                            }\n                                        </Tooltip>\n                                    }\n                                >\n                                    {\n                                        currentRequirement === undefined ?\n                                            (<Badge variant=\"secondary\">?</Badge>) :\n                                            (<Badge variant=\"warning\">!</Badge>)\n                                    }\n                                </OverlayTrigger>\n                            ) :\n                            (<></>)\n                    }\n                    {\n                        isRegistrable0 ?\n                            (<CourseRegistrationStatusBadge status={status} />) :\n                            (<DisabledCourseBadge id=\"tooltip2\" />)\n                    }\n                    <div><span className=\"text-muted\">単位数</span> <strong>{course.creditCount}</strong></div>\n                </div>\n            </div>\n        </ListGroup.Item>\n    )\n};\n\nconst CourseList = ({ requirement, courses, plan, onCourseClick, lockTarget }: {\n    requirement: RequirementWithCourses,\n    courses: readonly Course[],\n    plan: Plan,\n    lockTarget: RegistrationStatusLockTarget\n    onCourseClick: (course: Course) => void,\n}) => (\n        <ListGroup>\n            {\n                courses.map((course: Course) => (\n                    <CourseListItem\n                        key={course.code}\n                        course={course} plan={plan}\n                        newRequirement={requirement}\n                        lockTarget={lockTarget}\n                        onClick={() => onCourseClick(course)}\n                    />\n                ))\n            }\n        </ListGroup>\n    );\n\nexport default CourseList;","import React, { useState } from 'react';\nimport { Accordion, Button, ButtonToolbar, Card, Col, Form } from 'react-bootstrap';\nimport Course from '../Course';\nimport FilterType from '../FilterType';\nimport Plan, { RegisteredCreditCounts, RegistrationStatus } from '../Plan';\nimport RegistrationStatusLockTarget from '../RegistrationStatusLockTarget';\nimport { RequirementWithCourses } from '../Requirements';\nimport CourseList from './CourseList';\nimport { RequirementSummaryView } from './RequirementSummaryView';\n\nconst OthersCountInput = ({ currentOthersCount, onReturn, onHide }: {\n    currentOthersCount: RegisteredCreditCounts,\n    onReturn: (newOthersCount: RegisteredCreditCounts) => void,\n    onHide: () => void,\n}) => {\n    const [acquired, setAcquired] = useState<number | undefined>();\n    const [registeredExcludingAcquired, setRegisteredExcludingAcquired] = useState<number | undefined>();\n    const [registeredIncludingAcquired, setRegisteredIncludingAcquired] = useState<number | undefined>();\n\n    const computed = {\n        acquired: acquired ?? currentOthersCount.acquired,\n        registered:\n            registeredIncludingAcquired !== undefined ?\n                registeredIncludingAcquired :\n                registeredExcludingAcquired !== undefined ?\n                    (acquired !== undefined ? acquired : currentOthersCount.acquired) + registeredExcludingAcquired :\n                    acquired !== undefined ?\n                        currentOthersCount.registered + acquired - currentOthersCount.acquired :\n                        currentOthersCount.registered,\n    }\n\n    return (\n        <Card border=\"primary\">\n            <Card.Header>単位数を入力</Card.Header>\n            <Card.Body>\n                <Form onSubmit={(e: React.FormEvent<HTMLFormElement>) => {\n                    e.preventDefault();\n                    onReturn(computed);\n                    onHide();\n                }}>\n                    <Form.Row>\n                        <Form.Group as={Col} md=\"4\">\n                            <Form.Label>修得済みの単位数 <span className=\"text-muted\">(a)</span></Form.Label>\n                            <Form.Control\n                                type=\"number\"\n                                min={0}\n                                step={0.5}\n                                placeholder={`${computed.acquired}`}\n                                value={acquired === undefined ? '' : `${acquired}`}\n                                onChange={\n                                    (e: React.ChangeEvent<HTMLInputElement>) =>\n                                        setAcquired(e.target.value === '' ? undefined : +e.target.value)\n                                }\n                                isInvalid={computed.acquired < 0}\n                            />\n                            <Form.Control.Feedback type=\"invalid\">(a) &gt;= 0</Form.Control.Feedback>\n                        </Form.Group>\n                        <Form.Group as={Col} md=\"4\">\n                            <Form.Label>履修する単位数 <span className=\"text-muted\">(b)</span></Form.Label>\n                            <Form.Control\n                                type=\"number\"\n                                min={0}\n                                step={0.5}\n                                placeholder={`${computed.registered - computed.acquired}`}\n                                value={registeredExcludingAcquired === undefined ? '' : `${registeredExcludingAcquired}`}\n                                onChange={\n                                    (e: React.ChangeEvent<HTMLInputElement>) => {\n                                        if (e.target.value === '') {\n                                            setRegisteredExcludingAcquired(undefined);\n                                        } else {\n                                            setRegisteredExcludingAcquired(+e.target.value);\n                                            setRegisteredIncludingAcquired(undefined);\n                                        }\n                                    }\n                                }\n                                isInvalid={computed.acquired > computed.registered}\n                            />\n                            <Form.Control.Feedback type=\"invalid\">(b) &gt;= 0</Form.Control.Feedback>\n                        </Form.Group>\n                        <Form.Group as={Col} md=\"4\">\n                            <Form.Label>計 <span className=\"text-muted\">(a) + (b)</span></Form.Label>\n                            <Form.Control\n                                type=\"number\"\n                                min={0}\n                                step={0.5}\n                                placeholder={`${computed.registered}`}\n                                value={registeredIncludingAcquired === undefined ? '' : `${registeredIncludingAcquired}`}\n                                onChange={\n                                    (e: React.ChangeEvent<HTMLInputElement>) => {\n                                        if (e.target.value === '') {\n                                            setRegisteredIncludingAcquired(undefined);\n                                        } else {\n                                            setRegisteredIncludingAcquired(+e.target.value);\n                                            setRegisteredExcludingAcquired(undefined);\n                                        }\n                                    }\n                                }\n                            />\n                        </Form.Group>\n                    </Form.Row>\n                    <ButtonToolbar>\n                        <Button\n                            type=\"submit\"\n                            disabled={computed.acquired < 0 || computed.acquired > computed.registered}\n                        >\n                            OK\n                        </Button>\n                        <Button variant=\"secondary\" onClick={onHide}>キャンセル</Button>\n                    </ButtonToolbar>\n                </Form>\n            </Card.Body>\n        </Card>\n    )\n}\n\nconst RequirementWithCoursesView = ({ requirement, filterType, lockTarget, plan, onCourseClick, onOthersCountsChange }: {\n    requirement: RequirementWithCourses,\n    filterType: FilterType,\n    lockTarget: RegistrationStatusLockTarget,\n    plan: Plan,\n    onCourseClick: (course: Course, requirement: RequirementWithCourses) => void,\n    onOthersCountsChange: (newOthersCount: RegisteredCreditCounts) => void,\n}) => {\n    const [isOpen, setIsOpen] = useState(false);\n    const [showsInput, setShowsInput] = useState(false);\n\n    const courses = requirement.courses.filter(course =>\n        filterType === FilterType.None ||\n        (plan.courseToStatus.has(course) && plan.courseToStatus.get(course) !== RegistrationStatus.Unregistered)\n    ).filter(course => filterType !== FilterType.Valid || requirement === plan.courseToRequirement.get(course));\n\n    return (\n        <>\n            <Accordion activeKey={isOpen ? '0' : ''}>\n                <div className={`bg-white ${isOpen ? 'sticky-top' : ''}`}>\n                    <RequirementSummaryView requirement={requirement} plan={plan} />\n                    {\n                        courses.length === 0 ?\n                            requirement.allowsOthers ? (\n                                showsInput ? (<></>) : (\n                                    <Button block className=\"mt-3\" variant=\"secondary\" onClick={() => setShowsInput(true)}>\n                                        単位数を入力\n                                    </Button>\n                                )\n                            ) : (\n                                    <Button block className=\"mt-3\" variant=\"outline-secondary\" disabled>\n                                        {filterType === FilterType.None ? '' : '履修する'}科目はありません\n                                    </Button>\n                                ) : (\n                                <Button\n                                    block className=\"mt-3\"\n                                    onClick={() => setIsOpen(!isOpen)}\n                                    variant={isOpen ? 'primary' : 'outline-secondary'}\n                                >\n                                    {filterType === FilterType.None ? '' : '履修する'}科目を{isOpen ? '非' : ''}表示\n                                </Button>\n                            )\n                    }\n                </div>\n                {\n                    showsInput ? (\n                        <div className=\"mt-3\">\n                            <OthersCountInput\n                                currentOthersCount={plan.requirementToOthersCount.get(requirement) || { acquired: 0, registered: 0 }}\n                                onReturn={onOthersCountsChange} onHide={() => setShowsInput(false)}\n                            />\n                        </div>\n                    ) : (<></>)\n                }\n                <Accordion.Collapse eventKey=\"0\">\n                    {\n                        courses.length === 0 ? (<></>) : (\n                            <div className=\"mt-3\">\n                                <CourseList\n                                    courses={courses} plan={plan}\n                                    requirement={requirement} lockTarget={lockTarget}\n                                    onCourseClick={course => onCourseClick(course, requirement)}\n                                />\n                            </div>\n                        )\n                    }\n                </Accordion.Collapse>\n            </Accordion>\n        </>\n    );\n}\n\nexport default RequirementWithCoursesView;","import React from 'react';\nimport { Dropdown } from 'react-bootstrap';\nimport Course from '../Course';\nimport FilterType from '../FilterType';\nimport Plan, { RegisteredCreditCounts } from '../Plan';\nimport RegistrationStatusLockTarget from '../RegistrationStatusLockTarget';\nimport { RequirementWithCourses, SelectionRequirement } from '../Requirements';\nimport InnerRequirementView from './InnerRequirementView';\n\nconst SelectionRequirementView = ({ requirement, filterType, lockTarget, plan, onCourseClick, onOthersCountsChange, onSelectionChange }: {\n    requirement: SelectionRequirement,\n    filterType: FilterType,\n    lockTarget: RegistrationStatusLockTarget,\n    plan: Plan,\n    onCourseClick: (course: Course, requirement: RequirementWithCourses) => void,\n    onOthersCountsChange: (requirement: RequirementWithCourses, newOthersCount: RegisteredCreditCounts) => void,\n    onSelectionChange: (selectionName: string, newOptionName: string) => void,\n}) => {\n    const selectedOptionName = requirement.getSelectedOptionName(plan.selectionNameToOptionName);\n    const selectedRequirement = requirement.getSelectedRequirement(plan.selectionNameToOptionName);\n\n    const handleOptionClick = (newOptionName: string) => {\n        if (selectedOptionName !== newOptionName) {\n            onSelectionChange(requirement.name, newOptionName);\n        }\n    };\n\n    return (\n        <>\n            <Dropdown>\n                <Dropdown.Toggle id=\"\" variant=\"secondary\" disabled={filterType === FilterType.Valid}>\n                    <span\n                        style={{\n                            overflow: 'hidden',\n                            textOverflow: 'ellipsis',\n                        }}\n                    >\n                        {requirement.name}\n                        <> : </>\n                        <strong>{selectedOptionName}</strong>\n                    </span>\n                </Dropdown.Toggle>\n\n                <Dropdown.Menu style={{ zIndex: 1100 }}>\n                    {\n                        requirement.options.map(option => (\n                            <Dropdown.Item key={option.name}\n                                active={option.name === selectedOptionName}\n                                onClick={() => handleOptionClick(option.name)}\n                            >\n                                {option.name}\n                            </Dropdown.Item>\n                        ))\n                    }\n                </Dropdown.Menu>\n            </Dropdown>\n            {\n                selectedRequirement === undefined ? (<></>) : (\n                    <div className=\"mt-3\">\n                        <InnerRequirementView\n                            requirement={selectedRequirement} plan={plan}\n                            filterType={filterType} lockTarget={lockTarget}\n                            onCourseClick={onCourseClick} onOthersCountsChange={onOthersCountsChange}\n                            onSelectionChange={onSelectionChange}\n                        />\n                    </div>\n                )\n            }\n        </>\n    );\n}\n\nexport default SelectionRequirementView;","import React from 'react';\nimport Course from \"../Course\";\nimport FilterType from '../FilterType';\nimport Plan, { RegisteredCreditCounts } from '../Plan';\nimport RegistrationStatusLockTarget from '../RegistrationStatusLockTarget';\nimport Requirements, { RequirementWithChildren, RequirementWithCourses } from \"../Requirements\";\nimport RequirementWithChildrenView from './RequirementWithChildrenView';\nimport RequirementWithCoursesView from './RequirementWithCoursesView';\nimport SelectionRequirementView from './SelectionRequirementView';\n\nconst InnerRequirementView = ({ requirement, filterType, lockTarget, plan, onCourseClick, onOthersCountsChange, onSelectionChange }: {\n    requirement: Requirements,\n    filterType: FilterType,\n    lockTarget: RegistrationStatusLockTarget,\n    plan: Plan,\n    onCourseClick: (course: Course, requirement: RequirementWithCourses) => void,\n    onOthersCountsChange: (requirement: RequirementWithCourses, newOthersCount: RegisteredCreditCounts) => void,\n    onSelectionChange: (selectionName: string, newOptionName: string) => void,\n}) => {\n    if (requirement instanceof RequirementWithChildren) {\n        return (\n            <RequirementWithChildrenView\n                requirement={requirement} plan={plan}\n                filterType={filterType} lockTarget={lockTarget}\n                onCourseClick={onCourseClick} onOthersCountsChange={onOthersCountsChange} onSelectionChange={onSelectionChange}\n            />\n        )\n    } else if (requirement instanceof RequirementWithCourses) {\n        return (\n            <RequirementWithCoursesView\n                requirement={requirement} plan={plan}\n                filterType={filterType} lockTarget={lockTarget}\n                onCourseClick={onCourseClick}\n                onOthersCountsChange={creditsCounts => onOthersCountsChange(requirement, creditsCounts)}\n            />\n        )\n    } else {\n        return (\n            <SelectionRequirementView\n                requirement={requirement} plan={plan}\n                filterType={filterType} lockTarget={lockTarget}\n                onCourseClick={onCourseClick} onOthersCountsChange={onOthersCountsChange} onSelectionChange={onSelectionChange}\n            />\n        );\n    }\n}\n\nexport default InnerRequirementView;\n","import React, { useState } from \"react\";\nimport { Button, Card, Modal } from \"react-bootstrap\";\nimport Plan from \"../Plan\";\nimport { RequirementWithCourses } from \"../Requirements\";\nimport { RequirementSummaryView } from \"./RequirementSummaryView\";\n\nconst ReassignmentConfirmationModal = ({ currentRequirement, plan, onReturn, onExited }: {\n    currentRequirement: RequirementWithCourses,\n    plan: Plan,\n    onReturn: (value: boolean) => void,\n    onExited: () => void,\n}) => {\n    const [show, setShow] = useState(true);\n\n    return (\n        <Modal show={show} onHide={() => { setShow(false); onReturn(false); }} onExited={onExited}>\n            <Modal.Header closeButton>\n                <Modal.Title>科目群の割り当てを変更</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <p>\n                    この科目は、すでに以下の科目群に割り当てられています。\n                    <strong>続けると、この科目群への割り当ては解除されます。</strong>\n                </p>\n                <p>各科目に割り当てできる科目群は1つまでです。</p>\n                <Card body>\n                    <RequirementSummaryView requirement={currentRequirement} plan={plan} />\n                </Card>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={() => { setShow(false); onReturn(false); }}>キャンセル</Button>\n                <Button variant=\"primary\" onClick={() => { setShow(false); onReturn(true); }}>続ける</Button>\n            </Modal.Footer>\n        </Modal>\n    );\n};\n\nexport default ReassignmentConfirmationModal;","import React from 'react';\nimport Course from '../Course';\nimport FilterType from '../FilterType';\nimport getValueFromModal, { useModals } from '../getValueFromModal';\nimport Plan, { getNextStatus, RegisteredCreditCounts, RegistrationStatus } from '../Plan';\nimport RegistrationStatusLockTarget from '../RegistrationStatusLockTarget';\nimport Requirements, { RequirementWithCourses } from '../Requirements';\nimport InnerRequirementView from './InnerRequirementView';\nimport ReassignmentConfirmationModal from './ReassignmentConfirmationModal';\n\nconst RequirementView = ({ requirement, plan, filterType, lockTarget, onChange }: {\n    requirement: Requirements,\n    filterType: FilterType,\n    lockTarget: RegistrationStatusLockTarget,\n    plan: Plan,\n    onChange: (newPlan: Plan) => void,\n}) => {\n    const { courseToStatus, courseToRequirement, requirementToOthersCount, selectionNameToOptionName } = plan;\n    const { modals, setModalsAndCount } = useModals();\n\n    const handleCourseClick = async (course: Course, requirement: RequirementWithCourses) => {\n        const currentStatus: RegistrationStatus = courseToStatus.get(course) || RegistrationStatus.Unregistered;\n        const currentRequirement = courseToRequirement.get(course);\n        let nextCourseToStatus = courseToStatus;\n        if (currentStatus === RegistrationStatus.Unregistered || currentRequirement === requirement) {\n            const nextStatus = getNextStatus({ currentStatus, lockTarget });\n            nextCourseToStatus = new Map([...courseToStatus, [course, nextStatus]]);\n        } else if (\n            currentRequirement !== undefined &&\n            !await getValueFromModal(\n                ReassignmentConfirmationModal,\n                { currentRequirement, plan },\n                setModalsAndCount\n            )\n        ) {\n            return;\n        }\n        onChange({\n            ...plan,\n            courseToStatus: nextCourseToStatus,\n            courseToRequirement: new Map([...courseToRequirement, [course, requirement]]),\n        });\n    }\n\n    const handleOthersCountsChange = (requirement: RequirementWithCourses, newOthersCount: RegisteredCreditCounts) => {\n        onChange({\n            ...plan,\n            requirementToOthersCount: new Map([\n                ...requirementToOthersCount,\n                [requirement, newOthersCount]\n            ]),\n        });\n    }\n\n    const handleSelectionChange = (selectionName: string, newOptionName: string) => {\n        const nextSelectionNameToOptionName = new Map([...selectionNameToOptionName, [selectionName, newOptionName]]);\n        const visibleRequirements = requirement.getVisibleRequirements(nextSelectionNameToOptionName);\n        const nextCourseToRequirement = new Map([...courseToRequirement.entries()].filter(\n            ([_, requirement]) => visibleRequirements.includes(requirement)\n        ));\n        onChange({\n            ...plan,\n            courseToRequirement: nextCourseToRequirement,\n            selectionNameToOptionName: nextSelectionNameToOptionName,\n        });\n    }\n\n    return (\n        <>\n            {modals}\n            <InnerRequirementView\n                requirement={requirement} plan={plan}\n                filterType={filterType} lockTarget={lockTarget}\n                onCourseClick={handleCourseClick} onOthersCountsChange={handleOthersCountsChange}\n                onSelectionChange={handleSelectionChange}\n            />\n        </>\n    );\n}\n\nexport default RequirementView;","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React, { useState } from 'react';\nimport { Accordion, Alert, Container, Dropdown, Form, Navbar } from 'react-bootstrap';\nimport { HashRouter, Link, Redirect, Route, Switch, useParams } from 'react-router-dom';\nimport { useLocalStorage } from 'react-use';\nimport './App.css';\nimport { AssignmentsFindButton } from './AssignmentsFindView';\nimport { RequirementRegistrationStatusBadge } from './badges';\nimport CollectivelyCourseSetView from './CollectivelyCourseSetView';\nimport codeToCourse from './courses';\nimport ExportView from './ExportView';\nimport FilterType from './FilterType';\nimport ImportView from './ImportView';\nimport Plan, { emptyPlan, fromJSON, PlanJSON, RegistrationStatus, toJSON } from './Plan';\nimport RegistrationStatusLockTarget from './RegistrationStatusLockTarget';\nimport requirementAndDictionaryPairs from './requirementInstances';\nimport Requirements, { RequirementWithCourses } from './Requirements';\nimport RequirementView from './RequirementView';\n\nconst StatusAlert: React.FC<{\n    requirement: Requirements,\n    plan: Plan,\n}> = ({ requirement, plan }) => {\n    const status = requirement.getStatus(plan);\n    const variant = status === RegistrationStatus.Acquired ? 'success' : status === RegistrationStatus.Registered ? 'primary' : 'secondary';\n\n    return (\n        <Alert variant={variant} className=\"d-flex align-items-center\">\n            <div className=\"mr-2\">\n                <RequirementRegistrationStatusBadge status={status} />\n            </div>\n            現在の\n            {\n                status === RegistrationStatus.Acquired ? '修得状況は要件を満たしています。' :\n                    status === RegistrationStatus.Registered ? '履修状況は要件を満たしていますが、修得状況は要件を満たしていません。' :\n                        '履修状況は要件を満たしていません。'\n            }\n        </Alert>\n    );\n}\n\nconst RequirementWithConfiguration: React.FC<{\n    requirement: Requirements,\n    idToRequirement: ReadonlyMap<string, RequirementWithCourses>,\n    plan: Plan,\n    setPlan: (nextPlan: Plan) => void,\n}> = ({ requirement, idToRequirement, plan, setPlan }) => {\n    const [filterType, setFilterType] = useState(FilterType.None);\n    const { lockTarget, setLockTarget } = useLockTarget(filterType);\n\n    return (\n        <>\n            <Accordion className=\"mb-3\">\n                <ExportView eventKey=\"0\" plan={plan} />\n                <ImportView\n                    eventKey=\"1\"\n                    onSubmit={setPlan}\n                    codeToCourse={codeToCourse}\n                    idToRequirement={idToRequirement}\n                />\n            </Accordion>\n            <div className=\"mb-3\">\n                <CollectivelyCourseSetView\n                    requirement={requirement}\n                    codeToCourse={codeToCourse}\n                    idToRequirement={idToRequirement}\n                    plan={plan}\n                    onSubmit={setPlan}\n                />\n            </div>\n            <div className=\"mb-3\">\n                <AssignmentsFindButton\n                    requirement={requirement}\n                    idToRequirement={idToRequirement}\n                    codeToCourse={codeToCourse}\n                    plan={plan}\n                    onSubmit={setPlan}\n                />\n            </div>\n            <Form.Group>\n                <Form.Label>履修状況のロック</Form.Label>\n                {\n                    [\n                        {\n                            label: \"ロックしない\",\n                            lockTarget: RegistrationStatusLockTarget.None,\n                            disabled: filterType !== FilterType.None,\n                        },\n                        {\n                            label: \"[履修する] と [修得済み] の間の変更のみ許可\",\n                            lockTarget: RegistrationStatusLockTarget.Unregistered,\n                        },\n                        {\n                            label: \"[履修しない] と [履修する] の間の変更のみ許可\",\n                            lockTarget: RegistrationStatusLockTarget.Acquired,\n                            disabled: filterType !== FilterType.None,\n                        },\n                        {\n                            label: \"すべてロックする\",\n                            lockTarget: RegistrationStatusLockTarget.All,\n                        },\n                    ].map(({ label, disabled, lockTarget: lockTarget1 }) => (\n                        <Form.Check\n                            custom type=\"radio\"\n                            id={`lockTargetCheck${lockTarget1}`}\n                            label={label} key={lockTarget1}\n                            disabled={disabled}\n                            checked={lockTarget === lockTarget1}\n                            onChange={() => setLockTarget(lockTarget1)}\n                        />\n                    ))\n                }\n            </Form.Group>\n            <Form.Group>\n                <Form.Check\n                    custom\n                    id=\"filterTypeCheck0\"\n                    label=\"履修する科目のみ表示する\"\n                    checked={filterType !== FilterType.None}\n                    onChange={\n                        () => {\n                            if (filterType === FilterType.None) {\n                                setFilterType(FilterType.Registered);\n                            } else {\n                                setFilterType(FilterType.None);\n                            }\n                        }\n                    }\n                />\n                <Form.Check\n                    custom\n                    id=\"filterTypeCheck1\"\n                    label=\"単位数の計算に含まれる科目のみ表示する\"\n                    checked={filterType === FilterType.Valid}\n                    onChange={\n                        () => {\n                            if (filterType === FilterType.Valid) {\n                                setFilterType(FilterType.Registered);\n                            } else {\n                                setFilterType(FilterType.Valid);\n                            }\n                        }\n                    }\n                />\n            </Form.Group>\n            <hr />\n            <StatusAlert requirement={requirement} plan={plan} />\n            <div className=\"mb-3\">\n                <RequirementView\n                    requirement={requirement}\n                    lockTarget={lockTarget} filterType={filterType}\n                    plan={plan} onChange={setPlan}\n                />\n            </div>\n        </>\n    );\n}\n\nconst InnerMain: React.FC<{\n    requirement: Requirements;\n    idToRequirement: ReadonlyMap<string, RequirementWithCourses>;\n    requirementId: string;\n    requirementName: string;\n}> = ({ requirement, idToRequirement, requirementId, requirementName }) => {\n    const { plan, setPlan } = usePlan(requirementId);\n\n    return (\n        <>\n            <Dropdown className=\"mb-3\">\n                <Dropdown.Toggle id=\"department-dropdown\" variant=\"secondary\">\n                    <span\n                        style={{\n                            overflow: 'hidden',\n                            textOverflow: 'ellipsis',\n                        }}\n                    >\n                        学類\n                    <> : </>\n                        <strong>{requirementName}</strong>\n                    </span>\n                </Dropdown.Toggle>\n                <Dropdown.Menu>\n                    {\n                        [...requirementAndDictionaryPairs.values()].map(\n                            ({ id, name }) => (\n                                <Dropdown.Item as={Link} to={`/${id}`} active={id === requirementId} key={id}>\n                                    {name}\n                                </Dropdown.Item>\n                            )\n                        )\n                    }\n                </Dropdown.Menu>\n            </Dropdown>\n            <hr />\n            <RequirementWithConfiguration requirement={requirement} idToRequirement={idToRequirement} plan={plan} setPlan={setPlan} />\n        </>\n    );\n}\n\nconst Main: React.FC = () => {\n    const { requirementId }: { requirementId: string } = useParams();\n    if (requirementId === undefined) {\n        return (<Redirect to=\"/\" />);\n    }\n\n    const {\n        requirement,\n        idToRequirement,\n        name: requirementName,\n    } = requirementAndDictionaryPairs.get(requirementId) ?? {};\n    if (requirement === undefined || idToRequirement === undefined || requirementName === undefined) {\n        return (<Redirect to=\"/\" />);\n    }\n\n    return (\n        <InnerMain\n            requirement={requirement}\n            idToRequirement={idToRequirement}\n            requirementId={requirementId}\n            requirementName={requirementName}\n        />\n    );\n}\n\nconst App: React.FC = () => (\n    <HashRouter>\n        <Navbar variant=\"dark\" bg=\"dark\">\n            <Navbar.Brand>卒業要件を満たしたい</Navbar.Brand>\n        </Navbar>\n        <Container>\n            <Alert variant=\"danger\" className=\"my-3\">\n                このツールの結果を利用する場合、必ず履修要覧や支援室などでその結果が正しいことを確認するようにしてください。\n                <strong>科目や要件の定義が誤っていることや、実際には認められない履修の組み合わせが存在することがあります。</strong>\n            </Alert>\n            <Switch>\n                <Route path=\"/:requirementId\">\n                    <Main />\n                </Route>\n                <Route path=\"/\">\n                    <Redirect to=\"/coins17\" />\n                </Route>\n            </Switch>\n        </Container>\n    </HashRouter>\n);\n\nconst useLockTarget = (filterType: FilterType) => {\n    const [lockTarget, setLockTarget] = useState(RegistrationStatusLockTarget.None);\n\n    if (filterType === FilterType.None) {\n        return { lockTarget, setLockTarget };\n    } else if (lockTarget === RegistrationStatusLockTarget.None) {\n        return {\n            lockTarget: RegistrationStatusLockTarget.Unregistered,\n            setLockTarget,\n        };\n    } else if (lockTarget === RegistrationStatusLockTarget.Acquired) {\n        return {\n            lockTarget: RegistrationStatusLockTarget.All,\n            setLockTarget,\n        };\n    } else {\n        return { lockTarget, setLockTarget };\n    }\n}\n\nconst COURSES_STATE = \"courses-state\"\n\nconst usePlanMap = () => {\n    const [storedJSON, setStoredJSON] = useLocalStorage<readonly (readonly [string, PlanJSON])[]>(COURSES_STATE);\n    const [planMap0, setPlanMap0] = useState(() => {\n        if (storedJSON === undefined) {\n            const storedPlanMap: ReadonlyMap<string, Plan> = new Map();\n            return storedPlanMap;\n        } else {\n            try {\n                const storedPlanEntries = storedJSON.map(([requirementName, planJSON]) => {\n                    const idToRequirement = requirementAndDictionaryPairs.get(requirementName)?.idToRequirement;\n                    if (idToRequirement === undefined) {\n                        return undefined;\n                    } else {\n                        try {\n                            return [requirementName, fromJSON(planJSON, { codeToCourse, idToRequirement })] as const;\n                        } catch {\n                            return undefined;\n                        }\n                    }\n                }).filter((value): value is NonNullable<typeof value> => value !== undefined);\n                const storedPlanMap: ReadonlyMap<string, Plan> = new Map(storedPlanEntries);\n                return storedPlanMap;\n            } catch {\n                const storedPlanMap: ReadonlyMap<string, Plan> = new Map();\n                return storedPlanMap;\n            }\n        }\n    });\n    const setPlanMap = (newPlanMap: ReadonlyMap<string, Plan>) => {\n        const planJSONEntries = [...newPlanMap].map(([requirementName, plan]) => [requirementName, toJSON(plan)] as const);\n        setPlanMap0(newPlanMap);\n        setStoredJSON(planJSONEntries);\n    };\n    return {\n        planMap: planMap0,\n        setPlanMap,\n    };\n}\n\nconst usePlan = (requirementName: string) => {\n    const { planMap, setPlanMap } = usePlanMap();\n\n    const plan = planMap.get(requirementName) || emptyPlan;\n    const setPlan = (newPlan: Plan) => {\n        const newPlanMap = new Map([\n            ...planMap,\n            [requirementName, newPlan]\n        ]);\n        setPlanMap(newPlanMap);\n    };\n\n    return { plan, setPlan };\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'react-app-polyfill/stable';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}