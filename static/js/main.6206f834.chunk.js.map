{"version":3,"sources":["courses/index.ts","RegistrationStatus.ts","Plan.ts","ExportAndImportView.tsx","Requirements.ts","requirements/index.ts","RequirementSelector.tsx","CourseList.tsx","RequirementView.tsx","CourseMovementConfirmationModal.tsx","getValueFromModal.tsx","RequirementsRootView.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["codeToCourse","Map","courses","course","set","code","RegistrationStatus","toJSON","courseToStatus","courseToRequirement","requirementToOthersCount","selectionNameToOptionName","map","status","requirement","name","creditsCounts","fromJSON","json","nameToRequirement","get","undefined","Error","courseCode","requirementName","emptyPlan","ExportAndImportView","plan","onHide","onReturn","useState","JSON","stringify","jsonString","setJSONString","nextPlan","parse","isInvalid","Card","Header","Body","Form","onSubmit","e","preventDefault","Group","Label","Control","className","value","onChange","target","onFocus","select","Feedback","type","ButtonToolbar","Button","variant","disabled","onClick","Requirement","requiredCreditsCount","this","getRequiredCreditsCount","registeredCreditsCounts","getRegisteredCreditsCount","acquired","min","Acquired","registered","Registered","Unregistered","RequirementWithChildren","description","children","creditsCount","includesExcess","reduce","previous","child","childRegisteredCreditsCount","Math","max","childRequiredCreditsCount","getStatus","RequirementWithCourses","allowsOthers","othersCount","courseStatus","SelectionRequirement","selectionName","options0","options","optionNameToRequirement","selectedOptionName","getSelectedOptionName","selectedRequirement","getSelectedRequirement","numberOrRangeToRange","numberOrRange","obj","isCompatible","$object","$number","getRequirementAndDictionaryFromJSON","selectionNameToCount","dictionary","requirementAndDictionaryArray","flatMap","entries","selectionCount","optionAndDictionaryArray","optionJSON","option","requirementAndDictionaryMap","coins17_0","mast17_0","klis17_0","defaultSelected","RequirementSelector","as","newRequirementName","CourseListItem","currentRequirement","newRequirement","ListGroup","Item","action","title","Badge","CourseList","onCourseClick","key","has","filter","includes","CreditsCountLabelDelimiter","ExceededCreditsCountLabel","CreditsCountLabels","exceededCreditsCount","RequirementSummaryView","RequirementWithChildrenView","showsOnlyRegistered","onOthersCountsChange","onSelectionChange","OthersCountInput","currentOthersCount","setAcquired","registeredExcludingAcquired","setRegisteredExcludingAcquired","registeredIncludingAcquired","setRegisteredIncludingAcquired","computed","border","Row","Col","md","controlId","placeholder","RequirementWithCoursesView","isOpen","setIsOpen","showsInput","setShowsInput","Accordion","activeKey","length","block","Collapse","eventKey","SelectionRequirementView","Dropdown","Toggle","id","style","overflow","textOverflow","Menu","zIndex","active","newOptionName","RequirementView","CourseMovementConfirmationModal","onExited","show","setShow","Modal","body","Footer","initialModalsAndCount","modals","count","getValueFromModal","ModalType","props","setModalsAndCount","a","async","Promise","resolve","reject","modal","RequirementsRootView","modalsAndCount","useModals","clearCourseToRequirementInSelection","newCourseToRequirement","clearCourseToRequirement","delete","currentStatus","newCourseToStatus","newOthersCount","usePlan","useLocalStorage","storedJSON","setStoredJSON","storedPlanEntries","planJSON","requirementAndDictionary","planMap0","setPlanMap0","planMap","setPlanMap","newPlanMap","planJSONEntries","usePlanMap","setPlan","newPlan","App","selected","setSelected","setShowsOnlyRegistered","showsExportAndImportView","setShowsExportAndImportView","Navbar","bg","Brand","Container","Alert","Check","custom","label","checked","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6206f834.chunk.js","sourcesContent":["import Course from '../Course';\nimport courses from './courses1.json';\n\nconst codeToCourse = new Map<string, Course>();\n\nfor (const course of courses) {\n    codeToCourse.set(course.code, course);\n}\n\nexport default codeToCourse;","enum RegistrationStatus {\n    Unregistered = 0,\n    Registered = 1,\n    Acquired = 2,\n}\n\nexport default RegistrationStatus;","import Course from \"./Course\";\nimport RegistrationStatus from \"./RegistrationStatus\";\nimport { RegisteredCreditsCounts, RequirementWithCourses } from \"./Requirements\";\n\nexport type CourseCode = string;\nexport type RequirementName = string;\n\nexport interface PlanJSON {\n    readonly courseToStatus: readonly [CourseCode, RegistrationStatus][];\n    readonly courseToRequirement: readonly [CourseCode, RequirementName][];\n    readonly requirementToOthersCount: readonly [RequirementName, RegisteredCreditsCounts][];\n    readonly selectionNameToOptionName: readonly [string, string][];\n}\n\nexport default interface Plan {\n    readonly courseToStatus: ReadonlyMap<Course, RegistrationStatus>;\n    readonly courseToRequirement: ReadonlyMap<Course, RequirementWithCourses>;\n    readonly requirementToOthersCount: ReadonlyMap<RequirementWithCourses, RegisteredCreditsCounts>;\n    readonly selectionNameToOptionName: ReadonlyMap<string, string>;\n}\n\nexport const toJSON =\n    ({ courseToStatus, courseToRequirement, requirementToOthersCount, selectionNameToOptionName }: Plan): PlanJSON => ({\n        courseToStatus: [...courseToStatus].map(([course, status]) => [course.code, status]),\n        courseToRequirement: [...courseToRequirement].map(([course, requirement]) => [course.code, requirement.name]),\n        requirementToOthersCount: [...requirementToOthersCount].map(([requirement, creditsCounts]) => [requirement.name, creditsCounts]),\n        selectionNameToOptionName: [...selectionNameToOptionName],\n    });\n\nexport const fromJSON = (json: PlanJSON, { codeToCourse, nameToRequirement }: {\n    codeToCourse: ReadonlyMap<CourseCode, Course>,\n    nameToRequirement: ReadonlyMap<RequirementName, RequirementWithCourses>,\n}): Plan => {\n    const courseToStatus = new Map([...json.courseToStatus].map(([code, status]) => {\n        const course = codeToCourse.get(code);\n        if (course === undefined) { throw new Error(); }\n        return [course, status];\n    }));\n\n    const courseToRequirement = new Map([...json.courseToRequirement].map(([courseCode, requirementName]) => {\n        const course = codeToCourse.get(courseCode);\n        const requirement = nameToRequirement.get(requirementName);\n\n        if (course === undefined) { throw new Error(); }\n        if (requirement === undefined) { throw new Error(); }\n\n        return [course, requirement];\n    }));\n\n    const requirementToOthersCount = new Map([...json.requirementToOthersCount].map(([requirementName, creditsCounts]) => {\n        const requirement = nameToRequirement.get(requirementName);\n        if (requirement === undefined) { throw new Error(); }\n        return [requirement, creditsCounts];\n    }));\n\n    const selectionNameToOptionName = new Map(json.selectionNameToOptionName);\n\n    return { courseToStatus, courseToRequirement, requirementToOthersCount, selectionNameToOptionName }\n}\n\nexport const emptyPlan: Plan = {\n    courseToStatus: new Map(),\n    courseToRequirement: new Map(),\n    requirementToOthersCount: new Map(),\n    selectionNameToOptionName: new Map(),\n};","import React, { useState } from 'react';\nimport { Button, ButtonToolbar, Card, Form } from \"react-bootstrap\";\nimport Course from \"./Course\";\nimport Plan, { fromJSON, toJSON } from \"./Plan\";\nimport { RequirementWithCourses } from \"./Requirements\";\n\nconst ExportAndImportView = ({ plan, codeToCourse, nameToRequirement, onHide, onReturn }: {\n    plan: Plan,\n    codeToCourse: ReadonlyMap<string, Course>,\n    nameToRequirement: ReadonlyMap<string, RequirementWithCourses>,\n    onHide: () => void,\n    onReturn: (nextPlan: Plan) => void,\n}) => {\n    const [jsonString, setJSONString] = useState(() => JSON.stringify(toJSON(plan)));\n\n    const nextPlan = (() => {\n        try {\n            return fromJSON(\n                JSON.parse(jsonString),\n                { codeToCourse, nameToRequirement }\n            );\n        } catch {\n            return undefined;\n        }\n    })();\n    const isInvalid = nextPlan === undefined;\n\n    const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        if (nextPlan === undefined) {\n            return;\n        }\n        onReturn(nextPlan);\n        onHide();\n    };\n\n    return (\n        <Card>\n            <Card.Header>エクスポート / インポート</Card.Header>\n            <Card.Body>\n                <dl>\n                    <dt>エクスポート</dt>\n                    <dd>テキストボックスの内容をコピーしてテキストファイルなどに保存します。</dd>\n\n                    <dt>インポート</dt>\n                    <dd>\n                        テキストボックスに保存したテキストを貼り付けてから、 [インポート] ボタンを押します。\n                        <strong>インポートすると現在の設定状態は失われます。</strong>\n                    </dd>\n                </dl>\n\n                <Form onSubmit={handleSubmit}>\n                    <Form.Group>\n                        <Form.Label>JSON</Form.Label>\n                        <Form.Control\n                            className=\"input-monospace\"\n                            value={jsonString}\n                            isInvalid={isInvalid}\n                            onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => setJSONString(e.target.value)}\n                            onFocus={(e: React.FocusEvent<HTMLInputElement>) => e.target.select()}\n                        />\n                        <Form.Control.Feedback type=\"invalid\">JSONが不正です</Form.Control.Feedback>\n                    </Form.Group>\n                    <ButtonToolbar>\n                        <Button variant=\"danger\" type=\"submit\" disabled={isInvalid}>\n                            インポート\n                        </Button>\n                        <Button variant=\"secondary\" onClick={onHide}>閉じる</Button>\n                    </ButtonToolbar>\n                </Form>\n            </Card.Body>\n        </Card>\n    );\n}\n\nexport default ExportAndImportView","import { $number, $object, isCompatible } from \"@hiroto/json-type-checker\";\nimport Course from \"./Course\";\nimport Plan from \"./Plan\";\nimport RegistrationStatus from \"./RegistrationStatus\";\n\ntype Requirements = RequirementWithChildren | RequirementWithCourses | SelectionRequirement;\nexport default Requirements;\n\nabstract class Requirement {\n    abstract getRegisteredCreditsCount(plan: Plan, includesExcess: boolean): RegisteredCreditsCounts;\n    abstract getRequiredCreditsCount(selectionNameToOptionName: ReadonlyMap<string, string>): Range;\n    constructor(readonly name: string) { }\n    getStatus(plan: Plan): RegistrationStatus {\n        const requiredCreditsCount = this.getRequiredCreditsCount(plan.selectionNameToOptionName);\n        const registeredCreditsCounts = this.getRegisteredCreditsCount(plan, false);\n        return registeredCreditsCounts.acquired >= requiredCreditsCount.min ?\n            RegistrationStatus.Acquired :\n            registeredCreditsCounts.registered >= requiredCreditsCount.min ?\n                RegistrationStatus.Registered :\n                RegistrationStatus.Unregistered;\n    };\n}\n\nexport interface Range {\n    min: number;\n    max: number;\n}\nexport const isRange = (obj: unknown): obj is Range => isCompatible(obj, $object({ min: $number, max: $number }));\n\nexport interface RegisteredCreditsCounts {\n    acquired: number;\n    registered: number;\n}\n\nexport interface RequirementWithChildrenInit {\n    readonly name: string;\n    readonly description?: string;\n    readonly children: Iterable<Requirements>;\n    readonly creditsCount?: Range;\n}\n\nexport class RequirementWithChildren extends Requirement implements RequirementWithChildrenInit {\n    readonly description?: string;\n    readonly children: readonly Requirements[];\n    readonly creditsCount?: Range;\n    constructor({ name, description, children, creditsCount }: RequirementWithChildrenInit) {\n        super(name);\n        this.description = description\n        this.children = [...children];\n        this.creditsCount = creditsCount;\n    }\n    getRegisteredCreditsCount(plan: Plan, includesExcess: boolean): RegisteredCreditsCounts {\n        const creditsCounts = this.children.reduce(\n            (previous, child) => {\n                const childRegisteredCreditsCount = child.getRegisteredCreditsCount(plan, includesExcess);\n                return {\n                    acquired: previous.acquired + childRegisteredCreditsCount.acquired,\n                    registered: previous.registered + childRegisteredCreditsCount.registered,\n                }\n            },\n            { acquired: 0, registered: 0 }\n        );\n        return includesExcess || this.creditsCount === undefined ? creditsCounts : {\n            acquired: Math.min(this.creditsCount.max, creditsCounts.acquired),\n            registered: Math.min(this.creditsCount.max, creditsCounts.registered),\n        };\n    }\n    getRequiredCreditsCount(selectionNameToOptionName: ReadonlyMap<string, string>): Range {\n        return this.creditsCount === undefined ? this.children.reduce((previous, child) => {\n            const childRequiredCreditsCount = child.getRequiredCreditsCount(selectionNameToOptionName);\n            return {\n                min: previous.min + childRequiredCreditsCount.min,\n                max: previous.max + childRequiredCreditsCount.max,\n            }\n        }, { min: 0, max: 0 }) : this.creditsCount;\n    }\n    getStatus(plan: Plan): RegistrationStatus {\n        return Math.min(\n            super.getStatus(plan),\n            ...this.children.map(child => child.getStatus(plan))\n        );\n    };\n}\n\nexport interface RequirementWithCoursesInit {\n    readonly name: string;\n    readonly description?: string;\n    readonly courses: Iterable<Course>;\n    readonly creditsCount: Range;\n    readonly allowsOthers?: boolean;\n}\n\nexport class RequirementWithCourses extends Requirement {\n    readonly description?: string;\n    readonly courses: readonly Course[];\n    readonly creditsCount: Range;\n    readonly allowsOthers: boolean;\n    constructor({ name, description, courses, creditsCount, allowsOthers = false }: RequirementWithCoursesInit) {\n        super(name);\n        this.description = description;\n        this.courses = [...courses];\n        this.creditsCount = creditsCount;\n        this.allowsOthers = allowsOthers;\n    }\n    getRegisteredCreditsCount(plan: Plan, includesExcess: boolean): RegisteredCreditsCounts {\n        const othersCount = plan.requirementToOthersCount.get(this) || { acquired: 0, registered: 0 };\n        const creditsCounts = this.courses.reduce((previous, course): RegisteredCreditsCounts => {\n            const courseStatus = plan.courseToStatus.get(course) || RegistrationStatus.Unregistered;\n            if (plan.courseToRequirement.get(course) === this) {\n                return courseStatus === RegistrationStatus.Acquired ?\n                    {\n                        acquired: previous.acquired + course.creditsCount,\n                        registered: previous.registered + course.creditsCount,\n                    } :\n                    courseStatus === RegistrationStatus.Registered ?\n                        {\n                            acquired: previous.acquired,\n                            registered: previous.registered + course.creditsCount,\n                        } :\n                        previous;\n            } else {\n                return previous;\n            }\n        }, othersCount);\n        return includesExcess || this.creditsCount === undefined ? creditsCounts : {\n            acquired: Math.min(this.creditsCount.max, creditsCounts.acquired),\n            registered: Math.min(this.creditsCount.max, creditsCounts.registered),\n        };\n    }\n    getRequiredCreditsCount() {\n        return this.creditsCount;\n    }\n}\n\ninterface Option {\n    name: string;\n    requirement: Requirements;\n}\n\nexport interface SelectionRequirementInit {\n    readonly name: string;\n    readonly selectionName: string;\n    readonly options: Iterable<Option>;\n}\n\nexport class SelectionRequirement extends Requirement implements SelectionRequirementInit {\n    readonly selectionName: string;\n    readonly options: Option[];\n    readonly optionNameToRequirement: ReadonlyMap<string, Requirements>;\n    constructor({ name, selectionName, options: options0 }: SelectionRequirementInit) {\n        super(name);\n        this.selectionName = selectionName;\n        const options = [...options0]\n        this.options = options;\n        this.optionNameToRequirement = new Map(options.map(({ name, requirement }) => [name, requirement]));\n    }\n    getSelectedOptionName(selectionNameToOptionName: ReadonlyMap<string, string>) {\n        const selectedOptionName = selectionNameToOptionName.get(this.selectionName) || this.options[0].name;\n        return selectedOptionName;\n    }\n    getSelectedRequirement(selectionNameToOptionName: ReadonlyMap<string, string>) {\n        const selectedOptionName = this.getSelectedOptionName(selectionNameToOptionName);\n        const selectedRequirement = this.optionNameToRequirement.get(selectedOptionName);\n        return selectedRequirement;\n    }\n    getRegisteredCreditsCount(plan: Plan, includesExcess: boolean): RegisteredCreditsCounts {\n        const selectedRequirement = this.getSelectedRequirement(plan.selectionNameToOptionName);\n        if (selectedRequirement === undefined) {\n            return { acquired: 0, registered: 0 };\n        } else {\n            return selectedRequirement.getRegisteredCreditsCount(plan, includesExcess);\n        }\n    }\n    getRequiredCreditsCount(selectionNameToOptionName: ReadonlyMap<string, string>): Range {\n        const selectedRequirement = this.getSelectedRequirement(selectionNameToOptionName);\n        if (selectedRequirement === undefined) {\n            return { min: 0, max: 0 };\n        } else {\n            return selectedRequirement.getRequiredCreditsCount(selectionNameToOptionName);\n        }\n    }\n}\n","import codeToCourse from '../courses';\nimport Requirements, { isRange, Range, RequirementWithChildren, RequirementWithCourses, SelectionRequirement } from '../Requirements';\nimport coins17_0 from './coins17.json';\nimport klis17_0 from './klis17.json';\nimport mast17_0 from './mast17.json';\n\ntype RequirementsJSON = RequirementWithChildrenJSON | RequirementWithCoursesJSON | SelectionRequirementJSON;\n\ninterface RequirementWithChildrenJSON {\n    readonly name: string;\n    readonly description?: string;\n    readonly children: readonly RequirementsJSON[];\n    readonly creditsCount?: number | Range;\n}\n\ninterface RequirementWithCoursesJSON {\n    readonly name: string;\n    readonly description?: string;\n    readonly courses: readonly string[];\n    readonly creditsCount: number | Range;\n    readonly allowsOthers?: boolean;\n}\n\ntype OptionJSON = {\n    readonly name: string;\n    readonly requirement: RequirementsJSON;\n} | RequirementsJSON;\n\ninterface SelectionRequirementJSON {\n    readonly name?: string;\n    readonly selectionName: string;\n    readonly options: readonly OptionJSON[];\n}\n\ninterface RequirementAndDictionary {\n    readonly requirement: Requirements;\n    readonly dictionary: ReadonlyMap<string, RequirementWithCourses>;\n}\n\nconst numberOrRangeToRange = (numberOrRange: number | Range): Range =>\n    isRange(numberOrRange) ? numberOrRange : {\n        min: numberOrRange,\n        max: numberOrRange,\n    };\n\nconst getRequirementAndDictionaryFromJSON = (json: RequirementsJSON, selectionNameToCount: Map<string, number>): RequirementAndDictionary => {\n    if ('courses' in json) {\n        const requirement = new RequirementWithCourses({\n            name: json.name,\n            description: json.description,\n            creditsCount: numberOrRangeToRange(json.creditsCount),\n            courses: json.courses.map(courseCode => {\n                const course = codeToCourse.get(courseCode);\n                if (course === undefined) { throw new Error(`科目番号 ${courseCode} は定義されていません。`); }\n                return course;\n            }),\n            allowsOthers: json.allowsOthers,\n        });\n        return {\n            requirement,\n            dictionary: new Map([[requirement.name, requirement]]),\n        };\n    } else if ('children' in json) {\n        const requirementAndDictionaryArray = json.children.map(child => getRequirementAndDictionaryFromJSON(child, selectionNameToCount));\n        const requirement = new RequirementWithChildren({\n            name: json.name,\n            description: json.description,\n            children: requirementAndDictionaryArray.map(({ requirement }) => requirement),\n            creditsCount: json.creditsCount === undefined ? undefined : numberOrRangeToRange(json.creditsCount),\n        });\n        return {\n            requirement,\n            dictionary: new Map(\n                requirementAndDictionaryArray.flatMap(({ dictionary }) => [...dictionary.entries()])\n            ),\n        };\n    } else {\n        const selectionCount = selectionNameToCount.get(json.selectionName) || 0;\n        selectionNameToCount.set(json.selectionName, selectionCount + 1);\n        const optionAndDictionaryArray = json.options.map(optionJSON => {\n            if ('requirement' in optionJSON) {\n                const { requirement, dictionary } = getRequirementAndDictionaryFromJSON(optionJSON.requirement, selectionNameToCount);\n                return {\n                    option: { requirement, name: optionJSON.name },\n                    dictionary,\n                };\n            } else {\n                const { requirement, dictionary } = getRequirementAndDictionaryFromJSON(optionJSON, selectionNameToCount);\n                return {\n                    option: { requirement, name: requirement.name },\n                    dictionary,\n                };\n            }\n        })\n        const requirement = new SelectionRequirement({\n            name: `${json.selectionName}_${selectionCount}`,\n            selectionName: json.selectionName,\n            options: optionAndDictionaryArray.map(({ option }) => option),\n        });\n        return {\n            requirement,\n            dictionary: new Map(\n                optionAndDictionaryArray.flatMap(({ dictionary }) => [...dictionary.entries()])\n            )\n        };\n    }\n};\n\nconst requirementAndDictionaryMap = new Map([\n    ['coins17', { name: 'coins17', ...getRequirementAndDictionaryFromJSON(coins17_0, new Map()) }],\n    ['mast17', { name: 'mast17', ...getRequirementAndDictionaryFromJSON(mast17_0, new Map()) }],\n    ['klis17', { name: 'klis17', ...getRequirementAndDictionaryFromJSON(klis17_0, new Map()) }],\n]);\n\nexport default requirementAndDictionaryMap;","import React from \"react\";\nimport { Form } from \"react-bootstrap\";\nimport Requirements, { RequirementWithCourses } from \"./Requirements\";\nimport requirementAndDictionaryMap from './requirements/index';\n\nconst RequirementSelector = ({ onChange }: {\n    onChange: (selected: {\n        name: string,\n        requirement: Requirements,\n        dictionary: ReadonlyMap<string, RequirementWithCourses>,\n    }) => void\n}) => {\n    return (\n        <Form.Group>\n            <Form.Label>学類を選択</Form.Label>\n            <Form.Control\n                as=\"select\"\n                onChange={\n                    e => {\n                        const newRequirementName = (e.target as HTMLSelectElement).value;\n                        onChange(requirementAndDictionaryMap.get(newRequirementName)!);\n                    }\n                }\n            >\n                <option value=\"coins17\">情報科学類（2017年度入学）</option>\n                <option value=\"mast17\">情報メディア創成学類（2017年度入学）</option>\n                <option value=\"klis17\">知識情報・図書館学類（2017年度入学）</option>\n            </Form.Control>\n        </Form.Group>\n    )\n};\n\nexport const defaultSelected = requirementAndDictionaryMap.get('coins17')!;\nexport default RequirementSelector;","import React from 'react';\nimport { Badge, ListGroup } from \"react-bootstrap\";\nimport Course from \"./Course\";\nimport Plan from './Plan';\nimport RegistrationStatus from \"./RegistrationStatus\";\nimport Requirements, { RequirementWithCourses } from \"./Requirements\";\n\nconst CourseListItem = ({ course, status, onClick, currentRequirement, newRequirement, disabled }: {\n    course: Course,\n    status: RegistrationStatus,\n    onClick: () => void,\n    currentRequirement: Requirements | undefined,\n    newRequirement: Requirements,\n    disabled: boolean,\n}) => (\n        <ListGroup.Item action disabled={disabled} onClick={onClick}\n            variant={\n                status === RegistrationStatus.Unregistered ? undefined :\n                    currentRequirement === newRequirement ?\n                        status === RegistrationStatus.Acquired ? 'success' : 'primary' :\n                        'dark'\n            }>\n            <div className=\"d-flex justify-content-between align-items-center\">\n                <div>\n                    <div>{course.title}</div>\n                    <code>{course.code}</code>\n                </div>\n                <div className=\"ml-2 text-right flex-shrink-0\">\n                    {\n                        status === RegistrationStatus.Unregistered || currentRequirement === newRequirement ?\n                            (<></>) :\n                            currentRequirement === undefined ?\n                                (<Badge variant=\"secondary\">?</Badge>) :\n                                (<Badge variant=\"warning\">!</Badge>)\n                    }\n                    <Badge variant={status === RegistrationStatus.Acquired ? 'success' : status === RegistrationStatus.Registered ? 'primary' : 'secondary'}>\n                        {status === RegistrationStatus.Acquired ? '修得済み' : status === RegistrationStatus.Registered ? '履修する' : '履修しない'}\n                    </Badge>\n                    <div><span className=\"text-muted\">単位数</span> <strong>{course.creditsCount}</strong></div>\n                </div>\n            </div>\n        </ListGroup.Item>\n    );\n\nconst CourseList = ({ requirement, courses, plan, onCourseClick }: {\n    requirement: RequirementWithCourses,\n    courses: readonly Course[],\n    plan: Plan,\n    onCourseClick: (course: Course) => void,\n}) => (\n        <ListGroup>\n            {\n                courses.map((course: Course) => (\n                    <CourseListItem\n                        key={course.code} course={course}\n                        currentRequirement={plan.courseToRequirement.get(course)}\n                        newRequirement={requirement}\n                        status={plan.courseToStatus.get(course) || RegistrationStatus.Unregistered}\n                        onClick={() => onCourseClick(course)}\n                        disabled={\n                            (!plan.courseToStatus.has(course) || plan.courseToStatus.get(course) === RegistrationStatus.Unregistered) &&\n                            [...plan.courseToStatus.entries()]\n                                .filter(([_, status]) => status !== RegistrationStatus.Unregistered)\n                                .map(([course, _]) => course.title)\n                                .includes(course.title)\n                        }\n                    />\n                ))\n            }\n        </ListGroup>\n    );\n\nexport default CourseList;","import React, { useState } from 'react';\nimport { Accordion, Badge, Button, ButtonToolbar, Card, Col, Dropdown, Form, ListGroup } from \"react-bootstrap\";\nimport Course from \"./Course\";\nimport CourseList from \"./CourseList\";\nimport Plan from './Plan';\nimport RegistrationStatus from \"./RegistrationStatus\";\nimport Requirements, { RegisteredCreditsCounts, RequirementWithChildren, RequirementWithCourses, SelectionRequirement } from \"./Requirements\";\n\nconst CreditsCountLabelDelimiter = () => (<span className=\"text-muted\"> / </span>)\n\nconst ExceededCreditsCountLabel = ({ creditsCount }: { creditsCount: number }) => (\n    <>\n        <span className=\"text-muted\">(</span>\n        +{creditsCount}\n        <span className=\"text-muted\">)</span>\n    </>\n);\n\nconst CreditsCountLabels = ({ requirement, plan }: {\n    requirement: Requirements,\n    plan: Plan,\n}) => {\n    const creditsCount = requirement.getRegisteredCreditsCount(plan, false);\n    const exceededCreditsCount = requirement.getRegisteredCreditsCount(plan, true);\n    const requiredCreditsCount = requirement.getRequiredCreditsCount(plan.selectionNameToOptionName);\n\n    return (\n        <div>\n            <span>\n                <span className=\"text-muted\">習得</span>\n                <> </>\n                <strong className=\"text-success\">{creditsCount.acquired}</strong>\n                {exceededCreditsCount.acquired > creditsCount.acquired ? (<ExceededCreditsCountLabel creditsCount={exceededCreditsCount.acquired - creditsCount.acquired} />) : (<></>)}\n            </span>\n            <CreditsCountLabelDelimiter />\n            <span>\n                <span className=\"text-muted\">履修</span>\n                <> </>\n                <strong className=\"text-primary\">{creditsCount.registered}</strong>\n                {exceededCreditsCount.registered > creditsCount.registered ? (<ExceededCreditsCountLabel creditsCount={exceededCreditsCount.registered - creditsCount.registered} />) : (<></>)}\n            </span>\n            <CreditsCountLabelDelimiter />\n            <span>\n                <span className=\"text-muted\">必要</span>\n                <> </>\n                <strong>\n                    {\n                        requiredCreditsCount.min === requiredCreditsCount.max ?\n                            requiredCreditsCount.min :\n                            `${requiredCreditsCount.min}~${requiredCreditsCount.max}`\n                    }\n                </strong>\n            </span>\n        </div>\n    )\n};\n\nexport const RequirementSummaryView = ({ requirement, plan }: {\n    requirement: RequirementWithChildren | RequirementWithCourses,\n    plan: Plan,\n}) => {\n    const status = requirement.getStatus(plan);\n    return (\n        <>\n            <h5 className=\"d-flex justify-content-between align-items-center\">\n                <div>{requirement.name}</div>\n                <Badge className=\"ml-2 flex-shrink-0\" variant={status === RegistrationStatus.Acquired ? 'success' : status === RegistrationStatus.Registered ? 'primary' : 'secondary'}>\n                    {status === RegistrationStatus.Acquired ? '修得OK' : status === RegistrationStatus.Registered ? '履修OK' : '不足'}\n                </Badge>\n            </h5>\n            <div>\n                {requirement.description === undefined ? (<></>) : (<div className=\"text-muted\">{requirement.description}</div>)}\n                <CreditsCountLabels requirement={requirement} plan={plan} />\n            </div>\n        </>\n    );\n}\n\nconst RequirementWithChildrenView = ({ requirement, showsOnlyRegistered, plan, onCourseClick, onOthersCountsChange, onSelectionChange }: {\n    requirement: RequirementWithChildren,\n    showsOnlyRegistered: boolean,\n    plan: Plan,\n    onCourseClick: (course: Course, requirement: RequirementWithCourses) => void,\n    onOthersCountsChange: (requirement: RequirementWithCourses, newOthersCount: RegisteredCreditsCounts) => void,\n    onSelectionChange: (selectionName: string, newOptionName: string) => void,\n}) => (\n        <>\n            <RequirementSummaryView requirement={requirement} plan={plan} />\n            <ListGroup className=\"mt-3\">\n                {\n                    requirement.children.map(child => (\n                        <ListGroup.Item key={child.name}>\n                            <RequirementView\n                                requirement={child} showsOnlyRegistered={showsOnlyRegistered} plan={plan}\n                                onCourseClick={onCourseClick} onSelectionChange={onSelectionChange}\n                                onOthersCountsChange={onOthersCountsChange}\n                            />\n                        </ListGroup.Item>\n                    ))\n                }\n            </ListGroup>\n        </>\n    );\n\nconst OthersCountInput = ({ currentOthersCount, onReturn, onHide }: {\n    currentOthersCount: RegisteredCreditsCounts,\n    onReturn: (newOthersCount: RegisteredCreditsCounts) => void,\n    onHide: () => void,\n}) => {\n    const [acquired, setAcquired] = useState(undefined as number | undefined);\n    const [registeredExcludingAcquired, setRegisteredExcludingAcquired] = useState(undefined as number | undefined);\n    const [registeredIncludingAcquired, setRegisteredIncludingAcquired] = useState(undefined as number | undefined);\n\n    const computed = {\n        acquired: acquired || currentOthersCount.acquired,\n        registered:\n            registeredIncludingAcquired !== undefined ?\n                registeredIncludingAcquired :\n                registeredExcludingAcquired !== undefined ?\n                    (acquired !== undefined ? acquired : currentOthersCount.acquired) + registeredExcludingAcquired :\n                    acquired !== undefined ?\n                        currentOthersCount.registered + acquired - currentOthersCount.acquired :\n                        currentOthersCount.registered,\n    }\n\n    return (\n        <Card border=\"primary\">\n            <Card.Header>単位数を入力</Card.Header>\n            <Card.Body>\n                <Form onSubmit={(e: React.FormEvent<HTMLFormElement>) => {\n                    e.preventDefault();\n                    onReturn(computed);\n                    onHide();\n                }}>\n                    <Form.Row>\n                        <Form.Group as={Col} md=\"4\" controlId=\"validationCustom01\">\n                            <Form.Label>習得済みの単位数 <span className=\"text-muted\">(a)</span></Form.Label>\n                            <Form.Control\n                                type=\"number\" min={0}\n                                placeholder={`${computed.acquired}`}\n                                value={acquired === undefined ? '' : `${acquired}`}\n                                onChange={\n                                    (e: React.ChangeEvent<HTMLInputElement>) =>\n                                        setAcquired(e.target.value === '' ? undefined : +e.target.value)\n                                }\n                                isInvalid={computed.acquired < 0}\n                            />\n                            <Form.Control.Feedback type=\"invalid\">(a) &gt;= 0</Form.Control.Feedback>\n                        </Form.Group>\n                        <Form.Group as={Col} md=\"4\" controlId=\"validationCustom02\">\n                            <Form.Label>履修する単位数 <span className=\"text-muted\">(b)</span></Form.Label>\n                            <Form.Control\n                                type=\"number\" min={0}\n                                placeholder={`${computed.registered - computed.acquired}`}\n                                value={registeredExcludingAcquired === undefined ? '' : `${registeredExcludingAcquired}`}\n                                onChange={\n                                    (e: React.ChangeEvent<HTMLInputElement>) => {\n                                        if (e.target.value === '') {\n                                            setRegisteredExcludingAcquired(undefined);\n                                        } else {\n                                            setRegisteredExcludingAcquired(+e.target.value);\n                                            setRegisteredIncludingAcquired(undefined);\n                                        }\n                                    }\n                                }\n                                isInvalid={computed.acquired > computed.registered}\n                            />\n                            <Form.Control.Feedback type=\"invalid\">(b) &gt;= 0</Form.Control.Feedback>\n                        </Form.Group>\n                        <Form.Group as={Col} md=\"4\" controlId=\"validationCustom02\">\n                            <Form.Label>計 <span className=\"text-muted\">(a) + (b)</span></Form.Label>\n                            <Form.Control\n                                type=\"number\" min={0}\n                                placeholder={`${computed.registered}`}\n                                value={registeredIncludingAcquired === undefined ? '' : `${registeredIncludingAcquired}`}\n                                onChange={\n                                    (e: React.ChangeEvent<HTMLInputElement>) => {\n                                        if (e.target.value === '') {\n                                            setRegisteredIncludingAcquired(undefined);\n                                        } else {\n                                            setRegisteredIncludingAcquired(+e.target.value);\n                                            setRegisteredExcludingAcquired(undefined);\n                                        }\n                                    }\n                                }\n                            />\n                        </Form.Group>\n                    </Form.Row>\n                    <ButtonToolbar>\n                        <Button\n                            type=\"submit\"\n                            disabled={computed.acquired < 0 || computed.acquired > computed.registered}\n                        >OK</Button>\n                        <Button variant=\"secondary\" onClick={onHide}>キャンセル</Button>\n                    </ButtonToolbar>\n                </Form>\n            </Card.Body>\n        </Card>\n    )\n}\n\nconst RequirementWithCoursesView = ({ requirement, showsOnlyRegistered, plan, onCourseClick, onOthersCountsChange }: {\n    requirement: RequirementWithCourses,\n    showsOnlyRegistered: boolean,\n    plan: Plan,\n    onCourseClick: (course: Course, requirement: RequirementWithCourses) => void,\n    onOthersCountsChange: (newOthersCount: RegisteredCreditsCounts) => void,\n}) => {\n    const [isOpen, setIsOpen] = useState(false);\n    const [showsInput, setShowsInput] = useState(false);\n\n    const courses = requirement.courses.filter(course =>\n        !showsOnlyRegistered || (plan.courseToStatus.get(course) !== RegistrationStatus.Unregistered &&\n            requirement === plan.courseToRequirement.get(course)));\n\n    return (\n        <>\n            <Accordion activeKey={isOpen ? '0' : ''}>\n                <div className={`bg-white ${isOpen ? 'sticky-top' : ''}`}>\n                    <RequirementSummaryView requirement={requirement} plan={plan} />\n                    {\n                        courses.length === 0 ?\n                            requirement.allowsOthers ? (\n                                showsInput ? (<></>) : (\n                                    <Button block className=\"mt-3\" variant=\"secondary\" onClick={() => setShowsInput(true)}>\n                                        単位数を入力\n                                    </Button>\n                                )\n                            ) : (\n                                    <Button block className=\"mt-3\" variant=\"outline-secondary\" disabled>\n                                        {showsOnlyRegistered ? '履修する' : ''}科目はありません\n                                    </Button>\n                                ) : (\n                                <Button\n                                    block className=\"mt-3\"\n                                    onClick={() => setIsOpen(!isOpen)}\n                                    variant={isOpen ? 'primary' : 'outline-secondary'}\n                                >\n                                    {showsOnlyRegistered ? '履修する' : ''}科目を{isOpen ? '非' : ''}表示\n                                </Button>\n                            )\n                    }\n                </div>\n                {\n                    showsInput ? (\n                        <div className=\"mt-3\">\n                            <OthersCountInput\n                                currentOthersCount={plan.requirementToOthersCount.get(requirement) || { acquired: 0, registered: 0 }}\n                                onReturn={onOthersCountsChange} onHide={() => setShowsInput(false)}\n                            />\n                        </div>\n                    ) : (<></>)\n                }\n                <Accordion.Collapse eventKey=\"0\">\n                    {\n                        courses.length === 0 ? (<></>) : (\n                            <div className=\"mt-3\">\n                                <CourseList requirement={requirement} courses={courses} plan={plan}\n                                    onCourseClick={course => onCourseClick(course, requirement)}\n                                />\n                            </div>\n                        )\n                    }\n                </Accordion.Collapse>\n            </Accordion>\n        </>\n    );\n}\n\nconst SelectionRequirementView = ({ requirement, showsOnlyRegistered, plan, onCourseClick, onOthersCountsChange, onSelectionChange }: {\n    requirement: SelectionRequirement,\n    showsOnlyRegistered: boolean,\n    plan: Plan,\n    onCourseClick: (course: Course, requirement: RequirementWithCourses) => void,\n    onOthersCountsChange: (requirement: RequirementWithCourses, newOthersCount: RegisteredCreditsCounts) => void,\n    onSelectionChange: (selectionName: string, newOptionName: string) => void,\n}) => {\n    const selectedOptionName = requirement.getSelectedOptionName(plan.selectionNameToOptionName);\n    const selectedRequirement = requirement.getSelectedRequirement(plan.selectionNameToOptionName);\n\n    const handleOptionClick = (newOptionName: string) => {\n        if (selectedOptionName !== newOptionName) {\n            onSelectionChange(requirement.selectionName, newOptionName);\n        }\n    };\n\n    return (\n        <>\n            <Dropdown>\n                <Dropdown.Toggle id=\"\" variant=\"secondary\" disabled={showsOnlyRegistered}>\n                    <span style={{\n                        overflow: 'hidden',\n                        textOverflow: 'ellipsis',\n                    }}>\n                        {requirement.selectionName}\n                        <> : </>\n                        <strong>{selectedOptionName}</strong>\n                    </span>\n                </Dropdown.Toggle>\n\n                <Dropdown.Menu style={{ zIndex: 1100 }}>\n                    {\n                        requirement.options.map(option => (\n                            <Dropdown.Item key={option.name}\n                                active={option.name === selectedOptionName}\n                                onClick={() => handleOptionClick(option.name)}\n                            >\n                                {option.name}\n                            </Dropdown.Item>\n                        ))\n                    }\n                </Dropdown.Menu>\n            </Dropdown>\n            {\n                selectedRequirement === undefined ? (<></>) : (\n                    <div className=\"mt-3\">\n                        <RequirementView\n                            requirement={selectedRequirement} showsOnlyRegistered={showsOnlyRegistered} plan={plan}\n                            onCourseClick={onCourseClick} onOthersCountsChange={onOthersCountsChange}\n                            onSelectionChange={onSelectionChange}\n                        />\n                    </div>\n                )\n            }\n        </>\n    );\n}\n\nconst RequirementView = ({ requirement, showsOnlyRegistered, plan, onCourseClick, onOthersCountsChange, onSelectionChange }: {\n    requirement: Requirements,\n    showsOnlyRegistered: boolean,\n    plan: Plan,\n    onCourseClick: (course: Course, requirement: RequirementWithCourses) => void,\n    onOthersCountsChange: (requirement: RequirementWithCourses, newOthersCount: RegisteredCreditsCounts) => void,\n    onSelectionChange: (selectionName: string, newOptionName: string) => void,\n}) => {\n    if (requirement instanceof RequirementWithChildren) {\n        return (\n            <RequirementWithChildrenView\n                requirement={requirement} showsOnlyRegistered={showsOnlyRegistered} plan={plan}\n                onCourseClick={onCourseClick} onOthersCountsChange={onOthersCountsChange} onSelectionChange={onSelectionChange}\n            />\n        )\n    } else if (requirement instanceof RequirementWithCourses) {\n        return (\n            <RequirementWithCoursesView\n                requirement={requirement} showsOnlyRegistered={showsOnlyRegistered} plan={plan}\n                onCourseClick={onCourseClick}\n                onOthersCountsChange={creditsCounts => onOthersCountsChange(requirement, creditsCounts)}\n            />\n        )\n    } else {\n        return (\n            <SelectionRequirementView\n                requirement={requirement} showsOnlyRegistered={showsOnlyRegistered} plan={plan}\n                onCourseClick={onCourseClick} onOthersCountsChange={onOthersCountsChange} onSelectionChange={onSelectionChange}\n            />\n        );\n    }\n}\n\nexport default RequirementView;\n","import React, { useState } from \"react\";\nimport { Button, Card, Modal } from \"react-bootstrap\";\nimport Plan from \"./Plan\";\nimport { RequirementWithCourses } from \"./Requirements\";\nimport { RequirementSummaryView } from \"./RequirementView\";\n\nconst CourseMovementConfirmationModal = ({ currentRequirement, plan, onReturn, onExited }: {\n    currentRequirement: RequirementWithCourses,\n    plan: Plan,\n    onReturn: (value: boolean) => void,\n    onExited: () => void,\n}) => {\n    const [show, setShow] = useState(true);\n\n    return (\n        <Modal show={show} onHide={() => { setShow(false); onReturn(false); }} onExited={onExited}>\n            <Modal.Body>\n                <p>\n                    この科目はすでに以下の要件に割り当てられています。\n                    <strong>続けると、この要件への割り当ては解除されます。</strong>\n                </p>\n                <p>各科目に割り当てできる要件は1つまでです。</p>\n                <Card body>\n                    <RequirementSummaryView requirement={currentRequirement} plan={plan} />\n                </Card>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={() => { setShow(false); onReturn(false); }}>キャンセル</Button>\n                <Button variant=\"primary\" onClick={() => { setShow(false); onReturn(true); }}>続ける</Button>\n            </Modal.Footer>\n        </Modal>\n    );\n};\n\nexport default CourseMovementConfirmationModal;","import React, { useState } from 'react';\n\nconst getValueFromModal = async <T, P>(\n    ModalType: React.ComponentType<{\n        onReturn: (value: T) => void,\n        onExited: () => void,\n    } & P>,\n    props: P,\n    setModalsAndCount: React.Dispatch<React.SetStateAction<ModalsAndCount>>,\n): Promise<T> => new Promise((resolve, reject) => {\n    try {\n        setModalsAndCount(({ modals, count }) => {\n            const modal = (\n                <ModalType\n                    {...props}\n                    onReturn={value => resolve(value)}\n                    onExited={() => setModalsAndCount(\n                        ({ modals, count }) => ({\n                            modals: modals.filter(value => value !== modal),\n                            count,\n                        })\n                    )}\n                    key={count}\n                />\n            );\n            return ({\n                modals: [...modals, modal],\n                count: count + 1,\n            })\n        });\n    } catch (e) {\n        reject(e);\n    }\n});\n\nexport interface ModalsAndCount {\n    readonly modals: readonly JSX.Element[];\n    readonly count: number;\n}\n\nconst initialModalsAndCount: ModalsAndCount = {\n    modals: [],\n    count: 0,\n};\n\nexport const useModals = () => {\n    const [modalsAndCount, setModalsAndCount] = useState(initialModalsAndCount);\n    return {\n        modals: modalsAndCount.modals,\n        setModalsAndCount,\n    };\n};\n\nexport default getValueFromModal;","import React from 'react';\nimport Course from './Course';\nimport CourseMovementConfirmationModal from './CourseMovementConfirmationModal';\nimport getValueFromModal, { useModals } from './getValueFromModal';\nimport Plan from './Plan';\nimport RegistrationStatus from './RegistrationStatus';\nimport Requirements, { RegisteredCreditsCounts, RequirementWithChildren, RequirementWithCourses, SelectionRequirement } from './Requirements';\nimport RequirementView from './RequirementView';\n\nconst RequirementsRootView = ({ requirement, plan, showsOnlyRegistered, onChange }: {\n    requirement: Requirements,\n    showsOnlyRegistered: boolean,\n    plan: Plan,\n    onChange: (newPlan: Plan) => void,\n}) => {\n    const { courseToStatus, courseToRequirement, requirementToOthersCount, selectionNameToOptionName } = plan;\n    const { modals, setModalsAndCount } = useModals();\n\n    const handleCourseClick = async (course: Course, requirement: RequirementWithCourses) => {\n        const currentStatus: RegistrationStatus = courseToStatus.get(course) || RegistrationStatus.Unregistered;\n        const currentRequirement = courseToRequirement.get(course);\n        let newCourseToStatus = courseToStatus;\n        if (currentStatus === RegistrationStatus.Unregistered || currentRequirement === requirement) {\n            newCourseToStatus = new Map([\n                ...courseToStatus,\n                [\n                    course,\n                    showsOnlyRegistered ?\n                        currentStatus === RegistrationStatus.Acquired ? RegistrationStatus.Registered : RegistrationStatus.Acquired :\n                        (currentStatus + 1) % 3\n                ]\n            ]);\n        } else if (\n            currentRequirement !== undefined &&\n            !await getValueFromModal(\n                CourseMovementConfirmationModal,\n                { currentRequirement, plan },\n                setModalsAndCount\n            )\n        ) {\n            return;\n        }\n        onChange({\n            ...plan,\n            courseToStatus: newCourseToStatus,\n            courseToRequirement: new Map([...courseToRequirement, [course, requirement]]),\n        });\n    }\n\n    const clearCourseToRequirement = (requirement: Requirements, newCourseToRequirement: Map<Course, RequirementWithCourses>) => {\n        if (requirement instanceof RequirementWithChildren) {\n            for (const child of requirement.children) {\n                clearCourseToRequirement(child, newCourseToRequirement);\n            }\n        } else if (requirement instanceof RequirementWithCourses) {\n            for (const course of requirement.courses) {\n                if (newCourseToRequirement.get(course) === requirement) {\n                    newCourseToRequirement.delete(course);\n                }\n            }\n        } else {\n            const selectedRequirement = requirement.getSelectedRequirement(selectionNameToOptionName);\n            if (selectedRequirement !== undefined) {\n                clearCourseToRequirement(selectedRequirement, newCourseToRequirement);\n            }\n        }\n    }\n\n    const clearCourseToRequirementInSelection = (selectionName: string, requirement: Requirements, newCourseToRequirement: Map<Course, RequirementWithCourses>) => {\n        if (requirement instanceof RequirementWithChildren) {\n            for (const child of requirement.children) {\n                clearCourseToRequirementInSelection(selectionName, child, newCourseToRequirement);\n            }\n        } else if (requirement instanceof SelectionRequirement && requirement.selectionName === selectionName) {\n            clearCourseToRequirement(requirement, newCourseToRequirement);\n        }\n    }\n\n    const handleOthersCountsChange = (requirement: RequirementWithCourses, newOthersCount: RegisteredCreditsCounts) => {\n        onChange({\n            ...plan,\n            requirementToOthersCount: new Map([\n                ...requirementToOthersCount,\n                [requirement, newOthersCount]\n            ]),\n        });\n    }\n\n    const handleSelectionChange = (selectionName: string, newOptionName: string) => {\n        const newCourseToRequirement = new Map(courseToRequirement);\n        clearCourseToRequirementInSelection(selectionName, requirement, newCourseToRequirement);\n        onChange({\n            ...plan,\n            courseToRequirement: newCourseToRequirement,\n            selectionNameToOptionName: new Map([...selectionNameToOptionName, [selectionName, newOptionName]]),\n        });\n    }\n\n    return (\n        <>\n            {modals}\n            <RequirementView\n                requirement={requirement} showsOnlyRegistered={showsOnlyRegistered} plan={plan}\n                onCourseClick={handleCourseClick} onOthersCountsChange={handleOthersCountsChange}\n                onSelectionChange={handleSelectionChange}\n            />\n        </>\n    );\n}\n\nexport default RequirementsRootView;","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React, { useState } from 'react';\nimport { Alert, Button, Container, Form, Navbar } from 'react-bootstrap';\nimport { useLocalStorage } from 'react-use';\nimport './App.css';\nimport codeToCourse from './courses';\nimport ExportAndImportView from './ExportAndImportView';\nimport Plan, { emptyPlan, fromJSON, PlanJSON, toJSON } from './Plan';\nimport requirementAndDictionaryMap from './requirements/';\nimport RequirementSelector, { defaultSelected } from './RequirementSelector';\nimport RequirementsRootView from './RequirementsRootView';\n\nconst COURSES_STATE = \"courses-state\"\n\nconst App = () => {\n    const [selected, setSelected] = useState(defaultSelected);\n    const [showsOnlyRegistered, setShowsOnlyRegistered] = useState(false);\n    const [showsExportAndImportView, setShowsExportAndImportView] = useState(false);\n    const { plan, setPlan } = usePlan(selected.name);\n\n    return (\n        <>\n            <Navbar variant=\"dark\" bg=\"dark\">\n                <Navbar.Brand>卒業要件を満たしたい</Navbar.Brand>\n            </Navbar>\n            <Container>\n                <Alert variant=\"danger\" className=\"my-3\">\n                    このツールの結果を利用する場合、必ず履修要覧や支援室などでその結果が正しいことを確認するようにしてください。\n                    <strong>科目や要件の定義が誤っていたり、実際には認められない履修の組み合わせがある可能性があります。</strong>\n                </Alert>\n                <RequirementSelector onChange={setSelected} />\n                <div className=\"mb-3\">\n                    {\n                        showsExportAndImportView ? (\n                            <ExportAndImportView\n                                plan={plan} codeToCourse={codeToCourse} nameToRequirement={selected.dictionary}\n                                onReturn={setPlan} onHide={() => setShowsExportAndImportView(false)}\n                            />\n                        ) : (\n                                <Button variant=\"secondary\" onClick={() => setShowsExportAndImportView(true)}>\n                                    エクスポート / インポート\n                                </Button>\n                            )\n                    }\n                </div>\n                <Form.Check custom className=\"mb-3\" id=\"showsOnlyRegisteredCheck\"\n                    label=\"履修する科目のみ表示する\"\n                    checked={showsOnlyRegistered}\n                    onChange={() => setShowsOnlyRegistered(!showsOnlyRegistered)}\n                />\n                <div className=\"mb-3\">\n                    <RequirementsRootView\n                        requirement={selected.requirement} showsOnlyRegistered={showsOnlyRegistered}\n                        plan={plan} onChange={setPlan}\n                    />\n                </div>\n            </Container>\n        </>\n    );\n}\n\nconst usePlanMap = () => {\n    const [storedJSON, setStoredJSON] = useLocalStorage<readonly (readonly [string, PlanJSON])[]>(COURSES_STATE);\n    const [planMap0, setPlanMap0] = useState(() => {\n        try {\n            const storedPlanEntries = storedJSON.map(([requirementName, planJSON]) => {\n                const requirementAndDictionary = requirementAndDictionaryMap.get(requirementName);\n                if (requirementAndDictionary === undefined) {\n                    return undefined;\n                } else {\n                    try {\n                        return [requirementName, fromJSON(planJSON, {\n                            codeToCourse,\n                            nameToRequirement: requirementAndDictionary.dictionary,\n                        })] as const;\n                    } catch {\n                        return undefined;\n                    }\n                }\n            }).filter((value): value is NonNullable<typeof value> => value !== undefined);\n            const storedPlanMap: ReadonlyMap<string, Plan> = new Map(storedPlanEntries);\n            return storedPlanMap;\n        } catch {\n            const storedPlanMap: ReadonlyMap<string, Plan> = new Map();\n            return storedPlanMap;\n        }\n    });\n    const setPlanMap = (newPlanMap: ReadonlyMap<string, Plan>) => {\n        const planJSONEntries = [...newPlanMap].map(([requirementName, plan]) => [requirementName, toJSON(plan)] as const);\n        setPlanMap0(newPlanMap);\n        setStoredJSON(planJSONEntries);\n    };\n    return {\n        planMap: planMap0,\n        setPlanMap,\n    };\n}\n\nconst usePlan = (requirementName: string) => {\n    const { planMap, setPlanMap } = usePlanMap();\n\n    const plan = planMap.get(requirementName) || emptyPlan;\n    const setPlan = (newPlan: Plan) => {\n        const newPlanMap = new Map([\n            ...planMap,\n            [requirementName, newPlan]\n        ]);\n        setPlanMap(newPlanMap);\n    };\n\n    return { plan, setPlan };\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'react-app-polyfill/stable';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}