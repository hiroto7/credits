{"version":3,"sources":["RegistrationStatusLockTarget.ts","AssignmentsFindView/findAssignments.worker.ts","Plan.ts","AssignmentsFindView/index.tsx","safely.ts","CollectivelyCourseSetView.tsx","courses/index.ts","ExportView.tsx","FilterType.ts","getValueFromModal.tsx","ImportView.tsx","Requirements/Requirements.ts","Requirements/getRequirementAndDictionaryFromJSON.ts","requirementInstances/index.ts","RequirementView/RequirementSummaryView.tsx","RequirementView/CourseMovementConfirmationModal.tsx","RequirementView/RequirementWithChildrenView.tsx","RequirementView/CourseList.tsx","RequirementView/RequirementWithCoursesView.tsx","RequirementView/SelectionRequirementView.tsx","RequirementView/InnerRequirementView.tsx","RequirementView/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["RegistrationStatusLockTarget","Worker","RegistrationStatus","getNextStatus","currentStatus","lockTarget","All","Acquired","Unregistered","toJSON","courseToStatus","courseToRequirement","requirementToOthersCount","selectionNameToOptionName","Object","fromEntries","map","course","status","code","requirement","id","creditsCounts","fromJSON","json","codeToCourse","idToRequirement","Map","entries","get","undefined","Error","courseCode","requirementId","emptyPlan","AssignmentsFindView","show","plan","selectsAutomatically","additionalInformation","cancelButtonLabel","onCancel","onSubmit","useState","worker","setWorker","isLoading","setIsLoading","plans","setPlans","onMessage","useCallback","event","data","length","nextPlans","planJSON","useEffect","AssignmentsFindWorker","postMessage","requirementJSON","terminate","addEventListener","removeEventListener","Modal","onHide","Header","closeButton","Title","Body","ListGroup","className","plan1","getStatus","getRegisteredCreditCounts","Item","key","acquired","registered","action","onClick","Badge","variant","Registered","selectionName","optionName","Spinner","animation","Footer","Button","AssignmentsFindButton","setShow","handleSubmit","nextPlan","safely","f","args","placeholder","trim","Table1","codeColumnIndex","titleColumnIndex","creditsCountColumnIndex","courseAndRecordPairs","setCourseToStatus","firstCourse","firstRecord","record","firstRecordIsHeader","Table","bordered","hover","responsive","style","whiteSpace","cell","index","filter","_","slice","recordIndex","getTdContent","mapCourse","mapRecord","recordValue","tds0","title","recordTitle","textAlign","creditCount","recordCreditsCount","tds1","tds","OverlayTrigger","overlay","Tooltip","nextStatus","None","cursor","getColumnIndex","reduce","count","previous","current","Modal1","setAllCourseStatus","size","ButtonGroup","Modal0","csv","setCSV","validated","setValidated","records","parse","Array","feedback","handleCSVChange","nextCSV","Form","Group","Label","Control","as","rows","value","onChange","target","isInvalid","Feedback","type","File","custom","accept","label","file","files","item","reader","FileReader","result","readAsText","disabled","CollectivelyCourseSetView","page","setPage","setCourseAndRecordPairs","setCodeColumnIndex","courses","set","ExportView","FilterType","eventKey","jsonText","JSON","stringify","url","setURL","blob","Blob","onLoad","readAsDataURL","Card","Accordion","Toggle","Collapse","readOnly","onFocus","e","select","href","download","initialModalsAndCount","modals","useModals","modalsAndCount","setModalsAndCount","getValueFromModal","ModalType","props","a","Promise","resolve","reject","modal","onReturn","onExited","ImportConfirmationModal","ImportView","setJSONText","toggle","useAccordionToggle","handleJSONChange","nextJSON","preventDefault","Requirement","constructor","name","this","requiredCreditCount","getRequiredCreditCount","registeredCreditCounts","min","RequirementWithChildren","description","children","super","includesExcess","creditCounts","child","childRegisteredCreditCount","Math","max","childRequiredCreditCount","getVisibleRequirements","flatMap","RequirementWithCourses","allowsOthers","othersCount","courseStatus","SelectionRequirement","options","options0","optionNameToRequirement","getSelectedOptionName","getSelectedRequirement","selectedOptionName","selectedRequirement","numberOrRangeToRange","numberOrRange","getInnerRequirementAndDictionaryFromJSON","requirementNameToCount","requirementAndDictionaryPairs","optionAndDictionaryArray","optionJSON","option","getRequirementAndDictionaryFromJSON","coins17_0","mast17_0","klis17_0","CreditsCountLabelDelimiter","ExceededCreditsCountLabel","creditsCount","CreditsCountLabels","exceededCreditsCount","requiredCreditsCount","RequirementSummaryView","CourseMovementConfirmationModal","currentRequirement","body","RequirementWithChildrenView","filterType","onCourseClick","onOthersCountsChange","onSelectionChange","CourseListItem","newRequirement","isRegisteredButInvalid","some","course1","isRegistrable","CourseList","OthersCountInput","currentOthersCount","setAcquired","registeredExcludingAcquired","setRegisteredExcludingAcquired","registeredIncludingAcquired","setRegisteredIncludingAcquired","computed","border","Row","Col","md","step","ButtonToolbar","RequirementWithCoursesView","isOpen","setIsOpen","showsInput","setShowsInput","has","Valid","activeKey","block","SelectionRequirementView","Dropdown","overflow","textOverflow","Menu","zIndex","active","handleOptionClick","newOptionName","InnerRequirementView","RequirementView","handleCourseClick","nextCourseToStatus","newOthersCount","nextSelectionNameToOptionName","visibleRequirements","nextCourseToRequirement","includes","StatusAlert","Alert","RequirementWithConfiguration","setPlan","setFilterType","useLockTarget","setLockTarget","lockTarget1","Check","checked","InnerMain","requirementName","usePlan","values","Link","to","Main","useParams","useLocalStorage","storedJSON","setStoredJSON","storedPlanEntries","planMap0","setPlanMap0","planMap","setPlanMap","newPlanMap","planJSONEntries","usePlanMap","newPlan","App","Navbar","bg","Brand","Container","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.06e3d07f.chunk.js","sourcesContent":["enum RegistrationStatusLockTarget {\n    Unregistered = 0,\n    Acquired = 2,\n    All = 3,\n    None = 4,\n}\n\nexport default RegistrationStatusLockTarget;","export default function() {\n  return new Worker(__webpack_public_path__ + \"static/js/findAssignments.worker.a54f0408.worker.js\");\n}\n","import Course from \"./Course\";\nimport RegistrationStatusLockTarget from \"./RegistrationStatusLockTarget\";\nimport { RequirementWithCourses } from \"./Requirements\";\n\nexport interface RegisteredCreditCounts {\n    acquired: number;\n    registered: number;\n}\n\nexport default interface Plan {\n    readonly courseToStatus: ReadonlyMap<Course, RegistrationStatus>;\n    readonly courseToRequirement: ReadonlyMap<Course, RequirementWithCourses>;\n    readonly requirementToOthersCount: ReadonlyMap<RequirementWithCourses, RegisteredCreditCounts>;\n    readonly selectionNameToOptionName: ReadonlyMap<string, string>;\n}\n\nexport type CourseCode = string;\nexport type RequirementId = string;\n\nexport enum RegistrationStatus {\n    Unregistered = 0,\n    Registered = 1,\n    Acquired = 2,\n}\n\nexport const getNextStatus = ({ currentStatus, lockTarget }: {\n    currentStatus: RegistrationStatus,\n    lockTarget: RegistrationStatusLockTarget,\n}): RegistrationStatus => {\n    switch (lockTarget) {\n        case RegistrationStatusLockTarget.All:\n            return currentStatus;\n        case RegistrationStatusLockTarget.Acquired:\n        case RegistrationStatusLockTarget.Unregistered:\n            const difference = (3 + lockTarget - currentStatus) % 3;\n            switch (difference) {\n                case 0:\n                    return currentStatus;\n                case 1:\n                    return (currentStatus + 2) % 3;\n                default:\n                    return (currentStatus + 1) % 3;\n            }\n        default:\n            return (currentStatus + 1) % 3;\n    }\n}\n\nexport interface PlanJSON {\n    readonly courseToStatus: { [courseCode: string]: RegistrationStatus };\n    readonly courseToRequirement: { [courseCode: string]: RequirementId };\n    readonly requirementToOthersCount: { [requirementName: string]: RegisteredCreditCounts };\n    readonly selectionNameToOptionName: { [selectionName: string]: string };\n}\n\nexport const toJSON =\n    ({ courseToStatus, courseToRequirement, requirementToOthersCount, selectionNameToOptionName }: Plan): PlanJSON => ({\n        courseToStatus: Object.fromEntries(\n            [...courseToStatus].map(([course, status]) => [course.code, status])\n        ),\n        courseToRequirement: Object.fromEntries(\n            [...courseToRequirement].map(([course, requirement]) => [course.code, requirement.id])\n        ),\n        requirementToOthersCount: Object.fromEntries(\n            [...requirementToOthersCount].map(([requirement, creditsCounts]) => [requirement.id, creditsCounts])\n        ),\n        selectionNameToOptionName: Object.fromEntries(selectionNameToOptionName),\n    });\n\nexport const fromJSON = (json: PlanJSON, { codeToCourse, idToRequirement }: {\n    codeToCourse: ReadonlyMap<CourseCode, Course>,\n    idToRequirement: ReadonlyMap<RequirementId, RequirementWithCourses>,\n}): Plan => {\n    const courseToStatus = new Map(\n        Object.entries(json.courseToStatus).map(([code, status]) => {\n            const course = codeToCourse.get(code);\n            if (course === undefined) { throw new Error(); }\n            return [course, status];\n        })\n    );\n\n    const courseToRequirement = new Map(\n        Object.entries(json.courseToRequirement).map(([courseCode, requirementId]) => {\n            const course = codeToCourse.get(courseCode);\n            const requirement = idToRequirement.get(requirementId);\n\n            if (course === undefined) { throw new Error(); }\n            if (requirement === undefined) { throw new Error(); }\n\n            return [course, requirement];\n        })\n    );\n\n    const requirementToOthersCount = new Map(\n        Object.entries(json.requirementToOthersCount).map(([requirementId, creditsCounts]) => {\n            const requirement = idToRequirement.get(requirementId);\n            if (requirement === undefined) { throw new Error(); }\n            return [requirement, creditsCounts];\n        })\n    );\n\n    const selectionNameToOptionName = new Map(Object.entries(json.selectionNameToOptionName));\n\n    return { courseToStatus, courseToRequirement, requirementToOthersCount, selectionNameToOptionName }\n}\n\nexport const emptyPlan: Plan = {\n    courseToStatus: new Map(),\n    courseToRequirement: new Map(),\n    requirementToOthersCount: new Map(),\n    selectionNameToOptionName: new Map(),\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { Badge, Button, ListGroup, Modal, Spinner } from \"react-bootstrap\";\n// eslint-disable-next-line import/no-webpack-loader-syntax\nimport AssignmentsFindWorker from 'worker-loader!./findAssignments.worker';\nimport Course from '../Course';\nimport Plan, { fromJSON, PlanJSON, RegistrationStatus, toJSON } from '../Plan';\nimport Requirements, { RequirementWithCourses } from '../Requirements';\n\nconst AssignmentsFindView: React.FC<{\n    show: boolean,\n    requirement: Requirements,\n    idToRequirement: ReadonlyMap<string, RequirementWithCourses>,\n    codeToCourse: ReadonlyMap<string, Course>,\n    plan: Plan,\n    selectsAutomatically: boolean,\n    additionalInformation: React.ReactNode,\n    cancelButtonLabel: string,\n    onCancel: () => void,\n    onSubmit: (plan: Plan) => void,\n}> = ({ show, requirement, idToRequirement, codeToCourse, plan, selectsAutomatically, additionalInformation, cancelButtonLabel, onCancel, onSubmit }) => {\n    const [worker, setWorker] = useState<Worker | undefined>(undefined);\n    const [isLoading, setIsLoading] = useState(false);\n    const [plans, setPlans] = useState<readonly Plan[] | undefined>(undefined);\n\n    const onMessage = useCallback((event: MessageEvent) => {\n        if (event.data === 'done') {\n            if (selectsAutomatically) {\n                if (plans === undefined) {\n                    onCancel();\n                } else if (plans.length === 1) {\n                    onSubmit(plans[0]);\n                } else {\n                    setIsLoading(false);\n                }\n            } else {\n                setIsLoading(false);\n            }\n        } else {\n            const planJSONList: readonly PlanJSON[] = event.data;\n            const nextPlans: readonly Plan[] = planJSONList.map(planJSON => fromJSON(planJSON, { codeToCourse, idToRequirement }));\n            setPlans(nextPlans);\n        }\n    }, [codeToCourse, idToRequirement, onCancel, onSubmit, plans, selectsAutomatically]);\n\n    useEffect(() => {\n        if (show) {\n            setIsLoading(true);\n            setPlans(undefined);\n            const worker = new AssignmentsFindWorker();\n            setWorker(worker);\n            worker.postMessage({\n                codeToCourse,\n                planJSON: toJSON(plan),\n                requirementJSON: requirement.toJSON(),\n            });\n\n            return () => {\n                worker.terminate();\n                setWorker(undefined);\n            }\n        }\n    }, [codeToCourse, plan, requirement, show]);\n\n    useEffect(() => {\n        worker?.addEventListener('message', onMessage);\n        return () => worker?.removeEventListener('message', onMessage);\n    }, [onMessage, worker]);\n\n    return (\n        <Modal show={show} onHide={onCancel}>\n            <Modal.Header closeButton>\n                <Modal.Title>最適な割り当ての自動探索</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                {\n                    isLoading ? (\n                        <>\n                            <p>\n                                全体として修得単位数や履修単位数が最大となるような割り当てを探しています。\n                                この処理は短時間で終わらない場合があります。\n                            </p>\n                            {\n                                plans === undefined ? (<></>) : (\n                                    <p>\n                                        これまでに見つかった割り当てが以下に表示されています。\n                                        まだ最適な割り当てがほかにないか探していますが、選択してすぐに適用することもできます。\n                                    </p>\n                                )\n                            }\n                        </>\n                    ) : plans === undefined ? (\n                        <p>\n                            割り当てを探しましたが、要件を満たす割り当ては見つかりませんでした。\n                        </p>\n                    ) : (\n                                <p>\n                                    全体として修得単位数や履修単位数が最大となるような割り当てとして、以下のものが見つかりました。\n                                    適用するものを選択してください。\n                                </p>\n                            )\n                }\n\n                {additionalInformation}\n\n                {\n                    plans === undefined ? (<></>) :\n                        (\n                            <ListGroup className={isLoading ? 'mb-3' : undefined}>\n                                {\n                                    plans.map(plan1 => {\n                                        const status = requirement.getStatus(plan1);\n                                        const creditsCounts = requirement.getRegisteredCreditCounts(plan1, false);\n                                        return (\n                                            <ListGroup.Item\n                                                key={`${creditsCounts.acquired}-${creditsCounts.registered}`}\n                                                action\n                                                onClick={() => onSubmit(plan1)}\n                                            >\n                                                <div className=\"d-flex justify-content-between align-items-center\">\n                                                    <div>\n                                                        修得\n                                                        <> </>\n                                                        <strong className=\"text-success\">{creditsCounts.acquired}</strong>\n                                                        <> / </>\n                                                        履修\n                                                        <> </>\n                                                        <strong className=\"text-primary\">{creditsCounts.registered}</strong>\n                                                    </div>\n                                                    <Badge className=\"ml-2 flex-shrink-0\" variant={status === RegistrationStatus.Acquired ? 'success' : status === RegistrationStatus.Registered ? 'primary' : 'secondary'}>\n                                                        {status === RegistrationStatus.Acquired ? '修得OK' : status === RegistrationStatus.Registered ? '履修OK' : '不足'}\n                                                    </Badge>\n                                                </div>\n                                                {\n                                                    [...plan1.selectionNameToOptionName].map(([selectionName, optionName]) => (\n                                                        <div key={selectionName}>\n                                                            {selectionName}\n                                                            <> : </>\n                                                            <strong>{optionName}</strong>\n                                                        </div>\n                                                    ))\n                                                }\n                                            </ListGroup.Item>\n                                        )\n                                    })\n                                }\n                            </ListGroup>\n                        )\n                }\n                {\n                    isLoading ? (\n                        <div className=\"text-center\">\n                            <Spinner animation=\"border\" variant=\"primary\" />\n                        </div>\n                    ) : (<></>)\n                }\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={onCancel}>{cancelButtonLabel}</Button>\n            </Modal.Footer>\n        </Modal>\n    );\n}\n\nexport default AssignmentsFindView;\n\nexport const AssignmentsFindButton: React.FC<{\n    requirement: Requirements,\n    idToRequirement: ReadonlyMap<string, RequirementWithCourses>,\n    codeToCourse: ReadonlyMap<string, Course>,\n    plan: Plan,\n    onSubmit: (plan: Plan) => void,\n}> = ({ requirement, idToRequirement, codeToCourse, plan, onSubmit }) => {\n    const [show, setShow] = useState(false);\n\n    const onCancel = useCallback(() => setShow(false), []);\n    const handleSubmit = useCallback(nextPlan => {\n        setShow(false);\n        onSubmit(nextPlan);\n    }, [onSubmit]);\n\n    return (\n        <>\n            <Button variant=\"secondary\" onClick={() => setShow(true)}>\n                最適な割り当ての自動探索\n            </Button>\n            <AssignmentsFindView\n                show={show}\n                onCancel={onCancel}\n                requirement={requirement}\n                idToRequirement={idToRequirement}\n                codeToCourse={codeToCourse}\n                plan={plan}\n                selectsAutomatically={false}\n                additionalInformation={\n                    <p>\n                        先に<b>履修状況の設定</b>と<b>単位数の入力</b>を行っておいてください。\n                    </p>\n                }\n                cancelButtonLabel=\"キャンセル\"\n                onSubmit={handleSubmit}\n            />\n        </>\n    )\n}","const safely = <F extends (...args: any) => any>(f: F, ...args: Parameters<F>): ReturnType<F> | undefined => {\n    try {\n        return f(...args);\n    } catch {\n        return undefined;\n    }\n}\n\nexport default safely;","import parse from 'csv-parse/lib/sync';\nimport React, { useState } from 'react';\nimport { Badge, Button, ButtonGroup, Form, Modal, OverlayTrigger, Table, Tooltip } from \"react-bootstrap\";\nimport Course from './Course';\nimport Plan, { getNextStatus, RegistrationStatus } from './Plan';\nimport RegistrationStatusLockTarget from './RegistrationStatusLockTarget';\nimport safely from './safely';\nimport AssignmentsFindView from './AssignmentsFindView';\nimport Requirements, { RequirementWithCourses } from './Requirements';\n\nconst placeholder = `\n\"学籍番号\",\"学生氏名\",\"科目番号\",\"科目名 \",\"単位数\",\"春学期\",\"秋学期\",\"総合評価\",\"科目区分\",\"開講年度\",\"開講区分\"\n\"201700000\",\"＊＊ ＊＊\",\"GB10615\",\"コンピュータリテラシ\",\" 2.0\",\"-\",\"-\",\"A\",\"A\",\"2017\",\"通常\"\n\"201700000\",\"＊＊ ＊＊\",\"GB10664\",\"プログラミング入門A\",\" 1.0\",\"-\",\"-\",\"A\",\"A\",\"2017\",\"通常\"\n`.trim();\n\ntype RegistrationStatus12 = RegistrationStatus.Registered | RegistrationStatus.Acquired\n\nconst Table1: React.FC<{\n    codeColumnIndex: number,\n    titleColumnIndex: number | undefined,\n    creditsCountColumnIndex: number | undefined,\n    courseAndRecordPairs: readonly CourseAndRecordPair[],\n    courseToStatus: ReadonlyMap<Course, RegistrationStatus>,\n    setCourseToStatus: (courseToStatus: ReadonlyMap<Course, RegistrationStatus>) => void,\n}> = ({ codeColumnIndex, titleColumnIndex, creditsCountColumnIndex, courseAndRecordPairs, courseToStatus, setCourseToStatus }) => {\n    const {\n        course: firstCourse,\n        record: firstRecord,\n    } = courseAndRecordPairs[0];\n\n    const firstRecordIsHeader =\n        firstCourse === undefined &&\n        firstRecord[codeColumnIndex].trim() === '科目番号' &&\n        (titleColumnIndex === undefined || firstRecord[titleColumnIndex].trim() === '科目名') &&\n        (creditsCountColumnIndex === undefined || firstRecord[creditsCountColumnIndex].trim() === '単位数');\n\n    return (\n        <Table\n            bordered hover responsive\n            style={{ whiteSpace: 'nowrap' }}\n        >\n            <thead>\n                <tr>\n                    <th></th>\n                    <th>科目番号</th>\n                    <th>科目名</th>\n                    <th>単位数</th>\n                    {\n                        firstRecord\n                            .map((cell, index) => (<th key={index}>{firstRecordIsHeader ? cell : (<></>)}</th>))\n                            .filter((_, index) => index !== codeColumnIndex && index !== titleColumnIndex && index !== creditsCountColumnIndex)\n                    }\n                </tr>\n            </thead>\n            <tbody>\n                {\n                    (firstRecordIsHeader ? courseAndRecordPairs.slice(1) : courseAndRecordPairs).map(\n                        ({ course, record }, recordIndex) => {\n                            const getTdContent = <T,>(index: number | undefined, mapCourse: (course: Course) => T, mapRecord: (recordValue: string) => T) => {\n                                const recordValue = index === undefined ? undefined : record[index];\n                                return (\n                                    course === undefined ?\n                                        recordValue :\n                                        recordValue === undefined || mapRecord(recordValue) === mapCourse(course) ?\n                                            mapCourse(course) :\n                                            (\n                                                <>\n                                                    <div><del>{recordValue}</del></div>\n                                                    <div><ins>{mapCourse(course)}</ins></div>\n                                                </>\n                                            )\n                                );\n                            }\n\n                            const tds0 = (\n                                <>\n                                    <td><code>{record[codeColumnIndex]}</code></td>\n                                    <td>{getTdContent(titleColumnIndex, course => course.title, recordTitle => recordTitle.trim())}</td>\n                                    <td style={{ textAlign: 'center' }}>\n                                        {getTdContent(creditsCountColumnIndex, course => course.creditCount, recordCreditsCount => +recordCreditsCount)}\n                                    </td>\n                                </>\n                            );\n                            const tds1 = record\n                                .map((cell, index) => (\n                                    <td key={index}>\n                                        {\n                                            index === codeColumnIndex ?\n                                                (<code>{cell}</code>) :\n                                                index === titleColumnIndex ?\n                                                    cell :\n                                                    (<span className=\"text-muted\">{cell}</span>)\n                                        }\n                                    </td>\n                                ))\n                                .filter((_, index) =>\n                                    index !== codeColumnIndex &&\n                                    index !== titleColumnIndex &&\n                                    index !== creditsCountColumnIndex\n                                );\n\n                            const tds = (<>{tds0}{tds1}</>);\n\n                            if (course === undefined) {\n                                return (\n                                    <tr key={recordIndex} className=\"table-secondary\">\n                                        <td style={{ textAlign: 'center' }}>\n                                            <OverlayTrigger\n                                                overlay={\n                                                    <Tooltip id={`record${recordIndex}-tooltip`}>この科目は見つかりません。</Tooltip>\n                                                }\n                                            >\n                                                <Badge variant=\"secondary\">?</Badge>\n                                            </OverlayTrigger>\n                                        </td>\n                                        {tds}\n                                    </tr>\n                                )\n                            } else {\n                                const status = courseToStatus.get(course) ?? RegistrationStatus.Registered;\n                                const nextStatus = getNextStatus({ currentStatus: status, lockTarget: RegistrationStatusLockTarget.None });\n\n                                return (\n                                    <tr\n                                        key={recordIndex}\n                                        onClick={\n                                            () => setCourseToStatus(new Map([\n                                                ...courseToStatus,\n                                                [course, nextStatus]\n                                            ]))\n                                        }\n                                        style={{ cursor: 'pointer' }}\n                                        className={status === RegistrationStatus.Unregistered ? undefined : `table-${status === RegistrationStatus.Acquired ? 'success' : 'primary'}`}\n                                    >\n                                        <td style={{ textAlign: 'center' }}>\n                                            <Badge variant={status === RegistrationStatus.Acquired ? 'success' : status === RegistrationStatus.Registered ? 'primary' : 'secondary'}>\n                                                {status === RegistrationStatus.Acquired ? '修得済み' : status === RegistrationStatus.Registered ? '履修する' : '履修しない'}\n                                            </Badge>\n                                        </td>\n                                        {tds}\n                                    </tr>\n                                )\n                            }\n                        }\n                    )\n                }\n            </tbody>\n        </Table>\n    );\n}\n\ninterface CourseAndRecordPair {\n    course: Course | undefined;\n    record: readonly string[];\n}\n\nconst getColumnIndex = <T,>(courseAndRecordPairs: readonly CourseAndRecordPair[], mapCourse: (course: Course) => T, mapRecord: (recordValue: string) => T) =>\n    courseAndRecordPairs[0].record\n        .map((_, index) => courseAndRecordPairs.reduce((count, { course, record }) => {\n            const recordValue = record[index];\n            if (course !== undefined && mapRecord(recordValue) === mapCourse(course)) {\n                return count + 1;\n            } else {\n                return count;\n            }\n        }, 0))\n        .reduce<{\n            count: number,\n            index: number | undefined,\n        }>((previous, current, index) => {\n            if (current > previous.count) {\n                return {\n                    count: current,\n                    index,\n                }\n            } else {\n                return previous;\n            }\n        }, {\n            count: 0,\n            index: undefined,\n        }).index;\n\nconst Modal1: React.FC<{\n    codeColumnIndex: number,\n    courseAndRecordPairs: readonly CourseAndRecordPair[],\n    show: boolean,\n    onCancel: () => void,\n    onSubmit: (courseToStatus: ReadonlyMap<Course, RegistrationStatus>) => void,\n}> = ({ codeColumnIndex, courseAndRecordPairs, show, onCancel, onSubmit }) => {\n    const [courseToStatus, setCourseToStatus] = useState<ReadonlyMap<Course, RegistrationStatus>>(new Map());\n\n    const titleColumnIndex = getColumnIndex(courseAndRecordPairs, course => course.title, recordTitle => recordTitle.trim());\n    const creditsCountColumnIndex = getColumnIndex(courseAndRecordPairs, course => course.creditCount, recordCreditsCount => +recordCreditsCount)\n\n    const handleOKClick = () => onSubmit(new Map(\n        courseAndRecordPairs\n            .map(({ course }) => course)\n            .filter((course): course is NonNullable<typeof course> => course !== undefined)\n            .map(course => [course, courseToStatus.get(course) ?? RegistrationStatus.Registered])\n    ));\n\n    const setAllCourseStatus = (status: RegistrationStatus12) => {\n        setCourseToStatus(new Map(\n            courseAndRecordPairs\n                .map(({ course }) => course)\n                .filter((course): course is NonNullable<typeof course> => course !== undefined)\n                .map(course => [course, status])\n        ));\n    }\n\n    return (\n        <Modal size=\"xl\" show={show} onHide={onCancel}>\n            <Modal.Header closeButton>\n                <Modal.Title>CSVから履修状況を一括登録</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <p>CSVデータから見つかった科目が以下に表示されています。</p>\n                <p>\n                    それぞれの科目を [履修する] / [修得済み] のどちらかに設定してください。\n                    CSVデータに不要な科目が含まれている場合は、 [履修しない] に設定してください。\n                </p>\n                <p>\n                    [OK] を押すと、設定された履修状況のもとで、最適な科目群への割り当てがないか探します。\n                    割り当てが見つかればそれが適用され、見つからない場合は履修状況の設定だけが行われます。\n                    <strong>現在の履修 / 修得状況は失われます。</strong>\n                </p>\n                <ButtonGroup className=\"mb-3\">\n                    <Button\n                        variant=\"outline-primary\"\n                        onClick={() => setAllCourseStatus(RegistrationStatus.Registered)}\n                    >\n                        すべて履修する\n                    </Button>\n                    <Button\n                        variant=\"outline-success\"\n                        onClick={() => setAllCourseStatus(RegistrationStatus.Acquired)}\n                    >\n                        すべて修得済み\n                    </Button>\n                </ButtonGroup>\n                <Table1\n                    codeColumnIndex={codeColumnIndex}\n                    titleColumnIndex={titleColumnIndex}\n                    creditsCountColumnIndex={creditsCountColumnIndex}\n                    courseAndRecordPairs={courseAndRecordPairs}\n                    courseToStatus={courseToStatus}\n                    setCourseToStatus={setCourseToStatus}\n                />\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={onCancel}>戻る</Button>\n                <Button onClick={handleOKClick}>OK</Button>\n            </Modal.Footer>\n        </Modal>\n    );\n}\n\nconst Modal0: React.FC<{\n    codeToCourse: ReadonlyMap<string, Course>,\n    show: boolean,\n    onCancel: () => void,\n    onSubmit: ({ courseAndRecordPairs, codeColumnIndex }: {\n        courseAndRecordPairs: readonly CourseAndRecordPair[],\n        codeColumnIndex: number,\n    }) => void,\n}> = ({ codeToCourse, show, onCancel: onHide, onSubmit }) => {\n    const [csv, setCSV] = useState(\"\");\n    const [validated, setValidated] = useState(false);\n\n    const records: readonly (readonly string[])[] | undefined = safely(parse, csv);\n    const { courseAndRecordPairs, index: codeColumnIndex } = (\n        records === undefined || records.length === 0 ? undefined : records[0]\n            .map((_, index) => records.reduce(({ count, courseAndRecordPairs }, record) => {\n                const code = record[index];\n                const course = codeToCourse.get(code.trim());\n                return {\n                    count: course === undefined ? count : count + 1,\n                    courseAndRecordPairs: [...courseAndRecordPairs, { record, course }],\n                };\n            }, { count: 0, courseAndRecordPairs: new Array<CourseAndRecordPair>() }))\n            .reduce<{\n                count: number;\n                courseAndRecordPairs: readonly CourseAndRecordPair[] | undefined;\n                index: number | undefined;\n            }>((previous, current, index) => {\n                if (current.count > previous.count) {\n                    return { ...current, index };\n                } else {\n                    return previous;\n                }\n            }, {\n                count: 0,\n                courseAndRecordPairs: undefined,\n                index: undefined,\n            })\n    ) ?? {\n        courseAndRecordPairs: undefined,\n        index: undefined,\n    };\n\n    const feedback =\n        records === undefined ? 'CSVの形式が不正です' :\n            records.length === 0 ? 'CSVを入力してください' :\n                codeColumnIndex === undefined ? '科目がひとつも見つかりません' :\n                    undefined;\n\n    const handleCSVChange = (nextCSV: string) => {\n        setCSV(nextCSV);\n        setValidated(true);\n    }\n\n    return (\n        <Modal size=\"lg\" show={show} onHide={onHide}>\n            <Modal.Header closeButton>\n                <Modal.Title>CSVから履修状況を一括登録</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <p>\n                    ひとつの列に履修 / 修得する科目の番号が記述されたCSVデータを用意します。\n                </p>\n                <ul>\n                    <li>TWINS の [成績照会] 画面からダウンロードしたCSVファイルをそのまま使用できます。</li>\n                    <li>科目番号のみを各行に記述したデータも使用できます。</li>\n                </ul>\n                <p>\n                    用意したデータをテキストボックスに貼り付けるか、ファイルとして読み込みます。\n                </p>\n                <Form.Group>\n                    <Form.Label>CSV / 科目番号のリスト</Form.Label>\n                    <Form.Control\n                        as=\"textarea\"\n                        rows={5}\n                        placeholder={placeholder}\n                        value={csv}\n                        className=\"text-monospace\"\n                        onChange={\n                            (event: React.ChangeEvent<HTMLTextAreaElement>) => handleCSVChange(event.target.value)\n                        }\n                        style={{ whiteSpace: 'pre' }}\n                        isInvalid={validated && feedback !== undefined}\n                    />\n                    <Form.Control.Feedback type=\"invalid\">{feedback}</Form.Control.Feedback>\n                </Form.Group>\n                <Form.Group>\n                    <Form.Label>CSVファイル</Form.Label>\n                    <Form.File\n                        custom\n                        accept=\".csv,text/csv,text/plain\"\n                        id=\"csv-file-input\"\n                        label=\"Choose file\"\n                        onChange={\n                            (event: React.ChangeEvent<HTMLInputElement>) => {\n                                const file = event.target.files?.item(0);\n                                if (file === null || file === undefined) {\n                                    return;\n                                }\n                                const reader = new FileReader();\n                                reader.addEventListener('load', () => {\n                                    if (typeof reader.result === 'string') {\n                                        handleCSVChange(reader.result);\n                                    }\n                                });\n                                reader.readAsText(file);\n                            }\n                        }\n                    />\n                </Form.Group>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={onHide}>キャンセル</Button>\n                {\n                    courseAndRecordPairs === undefined || codeColumnIndex === undefined ?\n                        (<Button disabled>次へ</Button>) :\n                        (<Button onClick={() => onSubmit({ courseAndRecordPairs, codeColumnIndex })}>次へ</Button>)\n                }\n            </Modal.Footer>\n        </Modal>\n    )\n};\n\nconst CollectivelyCourseSetView: React.FC<{\n    codeToCourse: ReadonlyMap<string, Course>,\n    requirement: Requirements,\n    idToRequirement: ReadonlyMap<string, RequirementWithCourses>,\n    plan: Plan,\n    onSubmit: (plan: Plan) => void,\n}> = ({ codeToCourse, requirement, idToRequirement, plan, onSubmit }) => {\n    const [page, setPage] = useState<0 | 1 | 2 | undefined>();\n    const [courseAndRecordPairs, setCourseAndRecordPairs] = useState<readonly CourseAndRecordPair[]>();\n    const [codeColumnIndex, setCodeColumnIndex] = useState<number>();\n    const [courseToStatus, setCourseToStatus] = useState<ReadonlyMap<Course, RegistrationStatus>>()\n\n    return (\n        <>\n            <Button variant=\"secondary\" onClick={() => setPage(0)}>CSVから履修状況を一括登録</Button>\n            <Modal0\n                codeToCourse={codeToCourse}\n                show={page === 0}\n                onCancel={() => setPage(undefined)}\n                onSubmit={\n                    ({ courseAndRecordPairs, codeColumnIndex }) => {\n                        setCourseAndRecordPairs(courseAndRecordPairs);\n                        setCodeColumnIndex(codeColumnIndex);\n                        setPage(1);\n                    }\n                }\n            />\n            {\n                courseAndRecordPairs === undefined || codeColumnIndex === undefined ? (<></>) : (\n                    <Modal1\n                        courseAndRecordPairs={courseAndRecordPairs}\n                        codeColumnIndex={codeColumnIndex}\n                        show={page === 1}\n                        onCancel={() => setPage(0)}\n                        onSubmit={\n                            (courseToStatus: ReadonlyMap<Course, RegistrationStatus>) => {\n                                setCourseToStatus(courseToStatus);\n                                setPage(2);\n                            }\n                        }\n                    />\n                )\n            }\n            {\n                courseToStatus === undefined ? (<></>) : (\n                    <AssignmentsFindView\n                        show={page === 2}\n                        requirement={requirement}\n                        idToRequirement={idToRequirement}\n                        codeToCourse={codeToCourse}\n                        plan={{ ...plan, courseToStatus }}\n                        selectsAutomatically={true}\n                        cancelButtonLabel=\"スキップ\"\n                        additionalInformation={\n                            <p>スキップすると科目群への割り当てを行わず、履修状況の設定だけを行います。</p>\n                        }\n                        onCancel={\n                            () => {\n                                setPage(undefined);\n                                onSubmit({ ...plan, courseToStatus });\n                            }\n                        }\n                        onSubmit={\n                            plan => {\n                                setPage(undefined);\n                                onSubmit(plan);\n                            }\n                        }\n                    />\n                )\n            }\n        </>\n    )\n}\n\nexport default CollectivelyCourseSetView;","import Course from '../Course';\nimport courses from './courses1.json';\n\nconst codeToCourse = new Map<string, Course>();\n\nfor (const course of courses) {\n    codeToCourse.set(course.code, course);\n}\n\nexport default codeToCourse;","import React, { useEffect, useState } from 'react';\nimport { Accordion, Button, Card, Form } from \"react-bootstrap\";\nimport Plan, { toJSON } from \"./Plan\";\n\nconst ExportView = ({ plan, eventKey }: {\n    plan: Plan,\n    eventKey: string,\n}) => {\n    const jsonText = JSON.stringify(toJSON(plan));\n    const [url, setURL] = useState<string | undefined>();\n    useEffect(() => {\n        const blob = new Blob([jsonText], { type: 'application/json' });\n        const reader = new FileReader();\n        const onLoad = () => {\n            const url = reader.result;\n            if (typeof url === 'string') {\n                setURL(url);\n            }\n        }\n        reader.addEventListener('load', onLoad);\n        reader.readAsDataURL(blob);\n        return () => reader.removeEventListener('load', onLoad);\n    }, [jsonText]);\n\n    return (\n        <Card>\n            <Card.Header>\n                <Accordion.Toggle eventKey={eventKey} variant=\"link\" as={Button}>\n                    エクスポート\n                </Accordion.Toggle>\n            </Card.Header>\n            <Accordion.Collapse eventKey={eventKey}>\n                <Card.Body>\n                    <Form>\n                        <Form.Group>\n                            <Form.Label>JSON</Form.Label>\n                            <Form.Control\n                                readOnly className=\"input-monospace\"\n                                value={jsonText}\n                                onFocus={(e: React.FocusEvent<HTMLInputElement>) => e.target.select()}\n                            />\n                        </Form.Group>\n                        <Button as='a' href={url} download>保存</Button>\n                    </Form>\n                </Card.Body>\n            </Accordion.Collapse>\n        </Card>\n    );\n}\n\nexport default ExportView;","enum FilterType {\n    None,\n    Registered,\n    Valid,\n}\n\nexport default FilterType;","import React, { useState } from 'react';\n\nconst getValueFromModal = async <T, P>(\n    ModalType: React.ComponentType<{\n        onReturn: (value: T) => void,\n        onExited: () => void,\n    } & P>,\n    props: P,\n    setModalsAndCount: React.Dispatch<React.SetStateAction<ModalsAndCount>>,\n): Promise<T> => new Promise((resolve, reject) => {\n    try {\n        setModalsAndCount(({ modals, count }) => {\n            const modal = (\n                <ModalType\n                    {...props}\n                    onReturn={value => resolve(value)}\n                    onExited={() => setModalsAndCount(\n                        ({ modals, count }) => ({\n                            modals: modals.filter(value => value !== modal),\n                            count,\n                        })\n                    )}\n                    key={count}\n                />\n            );\n            return ({\n                modals: [...modals, modal],\n                count: count + 1,\n            })\n        });\n    } catch (e) {\n        reject(e);\n    }\n});\n\nexport interface ModalsAndCount {\n    readonly modals: readonly JSX.Element[];\n    readonly count: number;\n}\n\nconst initialModalsAndCount: ModalsAndCount = {\n    modals: [],\n    count: 0,\n};\n\nexport const useModals = () => {\n    const [modalsAndCount, setModalsAndCount] = useState(initialModalsAndCount);\n    return {\n        modals: modalsAndCount.modals,\n        setModalsAndCount,\n    };\n};\n\nexport default getValueFromModal;","import React, { useState } from 'react';\nimport { Accordion, Button, Card, Form, Modal, useAccordionToggle } from \"react-bootstrap\";\nimport Course from \"./Course\";\nimport getValueFromModal, { useModals } from './getValueFromModal';\nimport Plan, { emptyPlan, fromJSON, toJSON } from \"./Plan\";\nimport { RequirementWithCourses } from \"./Requirements\";\nimport safely from './safely';\n\nconst ImportConfirmationModal = ({ onReturn, onExited }: {\n    onReturn: (value: boolean) => void,\n    onExited: () => void\n}) => {\n    const [show, setShow] = useState(true);\n\n    return (\n        <Modal show={show} onHide={() => { setShow(false); onReturn(false); }} onExited={onExited}>\n            <Modal.Header closeButton>\n                <Modal.Title>インポート</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                インポートすると現在の設定状態は失われますが、よろしいですか？\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={() => { setShow(false); onReturn(false); }}>いいえ</Button>\n                <Button variant=\"danger\" onClick={() => { setShow(false); onReturn(true); }}>はい</Button>\n            </Modal.Footer>\n        </Modal>\n    );\n}\n\nconst ImportView = ({ eventKey, codeToCourse, idToRequirement, onSubmit }: {\n    eventKey: string,\n    codeToCourse: ReadonlyMap<string, Course>,\n    idToRequirement: ReadonlyMap<string, RequirementWithCourses>,\n    onSubmit: (nextPlan: Plan) => void,\n}) => {\n    const [jsonText, setJSONText] = useState(\"\");\n    const [validated, setValidated] = useState(false);\n    const toggle = useAccordionToggle(eventKey, () => { });\n    const { modals, setModalsAndCount } = useModals();\n\n    const json = safely(JSON.parse, jsonText);\n    const nextPlan = json && safely(fromJSON, json, { codeToCourse, idToRequirement });\n    const isInvalid = nextPlan === undefined;\n\n    const handleJSONChange = (nextJSON: string) => {\n        setJSONText(nextJSON);\n        setValidated(true);\n    }\n\n    const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        if (\n            nextPlan === undefined ||\n            !await getValueFromModal(ImportConfirmationModal, {}, setModalsAndCount)\n        ) {\n            return;\n        }\n        onSubmit(nextPlan);\n        toggle(e);\n    };\n\n    return (\n        <>\n            {modals}\n            <Card>\n                <Card.Header>\n                    <Accordion.Toggle eventKey={eventKey} variant=\"link\" as={Button}>\n                        インポート\n                    </Accordion.Toggle>\n                </Card.Header>\n                <Accordion.Collapse eventKey={eventKey}>\n                    <Card.Body>\n                        <p>\n                            保存したJSONデータをテキストボックスに貼り付けるか、ファイルとして読み込みます。\n                            次に [インポート] ボタンを押します。\n                            <strong>現在の設定状態は失われます。</strong>\n                        </p>\n                        <Form onSubmit={handleSubmit}>\n                            <Form.Group>\n                                <Form.Label>JSON</Form.Label>\n                                <Form.Control\n                                    className=\"input-monospace\"\n                                    isInvalid={validated && isInvalid}\n                                    value={jsonText}\n                                    placeholder={JSON.stringify(toJSON(emptyPlan))}\n                                    onChange={(event: React.ChangeEvent<HTMLInputElement>) => handleJSONChange(event.target.value)}\n                                />\n                                <Form.Control.Feedback type=\"invalid\">JSONの形式が不正です</Form.Control.Feedback>\n                            </Form.Group>\n                            <Form.Group>\n                                <Form.Label>JSONファイル</Form.Label>\n                                <Form.File\n                                    custom\n                                    label=\"Choose file\"\n                                    accept=\".json,application/json\"\n                                    id=\"json-file-input\"\n                                    onChange={\n                                        (event: React.ChangeEvent<HTMLInputElement>) => {\n                                            const file = event.target.files?.item(0);\n                                            if (file === null || file === undefined) {\n                                                return;\n                                            }\n                                            const reader = new FileReader();\n                                            reader.addEventListener('load', () => {\n                                                if (typeof reader.result === 'string') {\n                                                    handleJSONChange(reader.result);\n                                                }\n                                            });\n                                            reader.readAsText(file);\n                                        }\n                                    }\n                                />\n                            </Form.Group>\n                            <Button type=\"submit\" disabled={isInvalid}>インポート</Button>\n                        </Form>\n                    </Card.Body>\n                </Accordion.Collapse>\n            </Card>\n        </>\n    );\n}\n\nexport default ImportView;","import Course from \"../Course\";\nimport Plan, { RegisteredCreditCounts, RegistrationStatus } from \"../Plan\";\nimport { RequirementWithChildrenJSON, RequirementWithCoursesJSON, SelectionRequirementJSON } from './RequirementsJSON';\n\ntype Requirements = RequirementWithChildren | RequirementWithCourses | SelectionRequirement;\nexport default Requirements;\n\nabstract class Requirement {\n    readonly id: string\n    readonly name: string;\n    abstract getRegisteredCreditCounts(plan: Plan, includesExcess: boolean): RegisteredCreditCounts;\n    abstract getRequiredCreditCount(selectionNameToOptionName: ReadonlyMap<string, string>): Range;\n    abstract getVisibleRequirements(selectionNameToOptionName: ReadonlyMap<string, string>): readonly RequirementWithCourses[];\n    constructor({ id, name }: { id: string, name: string }) {\n        this.id = id;\n        this.name = name;\n    }\n    getStatus(plan: Plan): RegistrationStatus {\n        const requiredCreditCount = this.getRequiredCreditCount(plan.selectionNameToOptionName);\n        const registeredCreditCounts = this.getRegisteredCreditCounts(plan, false);\n        return registeredCreditCounts.acquired >= requiredCreditCount.min ?\n            RegistrationStatus.Acquired :\n            registeredCreditCounts.registered >= requiredCreditCount.min ?\n                RegistrationStatus.Registered :\n                RegistrationStatus.Unregistered;\n    }\n}\n\nexport interface Range {\n    min: number;\n    max: number;\n}\n\nexport interface RequirementWithChildrenInit {\n    readonly id: string;\n    readonly name: string;\n    readonly description?: string;\n    readonly children: Iterable<Requirements>;\n    readonly creditCount?: Range;\n}\n\nexport class RequirementWithChildren extends Requirement implements RequirementWithChildrenInit {\n    readonly description?: string;\n    readonly children: readonly Requirements[];\n    readonly creditCount?: Range;\n    constructor({ id, name, description, children, creditCount }: RequirementWithChildrenInit) {\n        super({ id, name });\n        this.description = description\n        this.children = [...children];\n        this.creditCount = creditCount;\n    }\n    getRegisteredCreditCounts(plan: Plan, includesExcess: boolean): RegisteredCreditCounts {\n        const creditCounts = this.children.reduce(\n            (previous, child) => {\n                const childRegisteredCreditCount = child.getRegisteredCreditCounts(plan, includesExcess);\n                return {\n                    acquired: previous.acquired + childRegisteredCreditCount.acquired,\n                    registered: previous.registered + childRegisteredCreditCount.registered,\n                }\n            },\n            { acquired: 0, registered: 0 }\n        );\n        return includesExcess || this.creditCount === undefined ? creditCounts : {\n            acquired: Math.min(this.creditCount.max, creditCounts.acquired),\n            registered: Math.min(this.creditCount.max, creditCounts.registered),\n        };\n    }\n    getRequiredCreditCount(selectionNameToOptionName: ReadonlyMap<string, string>): Range {\n        return this.creditCount === undefined ? this.children.reduce((previous, child) => {\n            const childRequiredCreditCount = child.getRequiredCreditCount(selectionNameToOptionName);\n            return {\n                min: previous.min + childRequiredCreditCount.min,\n                max: previous.max + childRequiredCreditCount.max,\n            }\n        }, { min: 0, max: 0 }) : this.creditCount;\n    }\n    getStatus(plan: Plan): RegistrationStatus {\n        return Math.min(\n            super.getStatus(plan),\n            ...this.children.map(child => child.getStatus(plan))\n        );\n    }\n    getVisibleRequirements(selectionNameToOptionName: ReadonlyMap<string, string>): readonly RequirementWithCourses[] {\n        return this.children.flatMap(requirement => requirement.getVisibleRequirements(selectionNameToOptionName));\n    }\n    toJSON(): RequirementWithChildrenJSON {\n        return {\n            name: this.name,\n            description: this.description,\n            children: this.children.map(child => child.toJSON()),\n            creditCount: this.creditCount,\n        }\n    }\n}\n\nexport interface RequirementWithCoursesInit {\n    readonly id: string;\n    readonly name: string;\n    readonly description?: string;\n    readonly courses: Iterable<Course>;\n    readonly creditCount: Range;\n    readonly allowsOthers?: boolean;\n}\n\nexport class RequirementWithCourses extends Requirement {\n    readonly description?: string;\n    readonly courses: readonly Course[];\n    readonly creditCount: Range;\n    readonly allowsOthers: boolean;\n    constructor({ id, name, description, courses, creditCount, allowsOthers = false }: RequirementWithCoursesInit) {\n        super({ id, name });\n        this.description = description;\n        this.courses = [...courses];\n        this.creditCount = creditCount;\n        this.allowsOthers = allowsOthers;\n    }\n    getRegisteredCreditCounts(plan: Plan, includesExcess: boolean): RegisteredCreditCounts {\n        const othersCount = plan.requirementToOthersCount.get(this) || { acquired: 0, registered: 0 };\n        const creditCounts = this.courses.reduce((previous, course): RegisteredCreditCounts => {\n            const courseStatus = plan.courseToStatus.get(course) || RegistrationStatus.Unregistered;\n            if (plan.courseToRequirement.get(course) === this) {\n                return courseStatus === RegistrationStatus.Acquired ?\n                    {\n                        acquired: previous.acquired + course.creditCount,\n                        registered: previous.registered + course.creditCount,\n                    } :\n                    courseStatus === RegistrationStatus.Registered ?\n                        {\n                            acquired: previous.acquired,\n                            registered: previous.registered + course.creditCount,\n                        } :\n                        previous;\n            } else {\n                return previous;\n            }\n        }, othersCount);\n        return includesExcess || this.creditCount === undefined ? creditCounts : {\n            acquired: Math.min(this.creditCount.max, creditCounts.acquired),\n            registered: Math.min(this.creditCount.max, creditCounts.registered),\n        };\n    }\n    getRequiredCreditCount() {\n        return this.creditCount;\n    }\n    getVisibleRequirements() {\n        return [this] as const;\n    }\n    toJSON(): RequirementWithCoursesJSON {\n        return {\n            name: this.name,\n            description: this.description,\n            courses: this.courses.map(course => course.code),\n            creditCount: this.creditCount,\n            allowsOthers: this.allowsOthers,\n        }\n    }\n}\n\ninterface Option {\n    name: string;\n    requirement: Requirements;\n}\n\nexport interface SelectionRequirementInit {\n    readonly id: string;\n    readonly name: string;\n    readonly options: Iterable<Option>;\n}\n\nexport class SelectionRequirement extends Requirement implements SelectionRequirementInit {\n    readonly name: string;\n    readonly options: readonly Option[];\n    readonly optionNameToRequirement: ReadonlyMap<string, Requirements>;\n    constructor({ id, name, options: options0 }: SelectionRequirementInit) {\n        super({ id, name });\n        this.name = name;\n        const options = [...options0]\n        this.options = options;\n        this.optionNameToRequirement = new Map(options.map(({ name, requirement }) => [name, requirement]));\n    }\n    getSelectedOptionName(selectionNameToOptionName: ReadonlyMap<string, string>) {\n        const selectedOptionName = selectionNameToOptionName.get(this.name) || this.options[0].name;\n        return selectedOptionName;\n    }\n    getSelectedRequirement(selectionNameToOptionName: ReadonlyMap<string, string>) {\n        const selectedOptionName = this.getSelectedOptionName(selectionNameToOptionName);\n        const selectedRequirement = this.optionNameToRequirement.get(selectedOptionName);\n        return selectedRequirement;\n    }\n    getRegisteredCreditCounts(plan: Plan, includesExcess: boolean): RegisteredCreditCounts {\n        const selectedRequirement = this.getSelectedRequirement(plan.selectionNameToOptionName);\n        if (selectedRequirement === undefined) {\n            return { acquired: 0, registered: 0 };\n        } else {\n            return selectedRequirement.getRegisteredCreditCounts(plan, includesExcess);\n        }\n    }\n    getRequiredCreditCount(selectionNameToOptionName: ReadonlyMap<string, string>): Range {\n        const selectedRequirement = this.getSelectedRequirement(selectionNameToOptionName);\n        if (selectedRequirement === undefined) {\n            return { min: 0, max: 0 };\n        } else {\n            return selectedRequirement.getRequiredCreditCount(selectionNameToOptionName);\n        }\n    }\n    getVisibleRequirements(selectionNameToOptionName: ReadonlyMap<string, string>): readonly RequirementWithCourses[] {\n        const selectedRequirement = this.getSelectedRequirement(selectionNameToOptionName);\n        if (selectedRequirement === undefined) {\n            return [];\n        } else {\n            return selectedRequirement.getVisibleRequirements(selectionNameToOptionName);\n        }\n    }\n    toJSON(): SelectionRequirementJSON {\n        return {\n            name: this.name,\n            options: this.options.map(({ name, requirement }) => ({\n                name,\n                requirement: requirement.toJSON(),\n            }))\n        }\n    }\n}\n","import Course from \"../Course\";\nimport Requirements, { Range, RequirementWithChildren, RequirementWithCourses, SelectionRequirement } from \"./Requirements\";\nimport RequirementsJSON from \"./RequirementsJSON\";\n\ninterface RequirementAndDictionary {\n    readonly requirement: Requirements;\n    readonly idToRequirement: ReadonlyMap<string, RequirementWithCourses>;\n}\n\nconst numberOrRangeToRange = (numberOrRange: number | Range): Range =>\n    typeof numberOrRange === 'number' ? {\n        min: numberOrRange,\n        max: numberOrRange,\n    } : numberOrRange;\n\nconst getInnerRequirementAndDictionaryFromJSON = (\n    json: RequirementsJSON,\n    codeToCourse: ReadonlyMap<string, Course>,\n    requirementNameToCount: Map<string, number>\n): RequirementAndDictionary => {\n    const count = requirementNameToCount.get(json.name) ?? 0;\n    requirementNameToCount.set(json.name, count + 1);\n    const id = `${json.name}_${count}`;\n    if ('courses' in json) {\n        const requirement = new RequirementWithCourses({\n            id,\n            name: json.name,\n            description: json.description,\n            creditCount: numberOrRangeToRange(json.creditCount),\n            courses: json.courses.map(courseCode => {\n                const course = codeToCourse.get(courseCode);\n                if (course === undefined) { throw new Error(`科目番号 ${courseCode} は定義されていません。`); }\n                return course;\n            }),\n            allowsOthers: json.allowsOthers,\n        });\n        return {\n            requirement,\n            idToRequirement: new Map([[requirement.id, requirement]]),\n        };\n    } else if ('children' in json) {\n        const requirementAndDictionaryPairs = json.children.map(child => getInnerRequirementAndDictionaryFromJSON(child, codeToCourse, requirementNameToCount));\n        const requirement = new RequirementWithChildren({\n            id,\n            name: json.name,\n            description: json.description,\n            children: requirementAndDictionaryPairs.map(({ requirement }) => requirement),\n            creditCount: json.creditCount === undefined ? undefined : numberOrRangeToRange(json.creditCount),\n        });\n        return {\n            requirement,\n            idToRequirement: new Map(\n                requirementAndDictionaryPairs.flatMap(({ idToRequirement }) => [...idToRequirement.entries()])\n            ),\n        };\n    } else {\n        const optionAndDictionaryArray = json.options.map(optionJSON => {\n            if ('requirement' in optionJSON) {\n                const { requirement, idToRequirement } = getInnerRequirementAndDictionaryFromJSON(optionJSON.requirement, codeToCourse, requirementNameToCount);\n                return {\n                    option: { requirement, name: optionJSON.name },\n                    idToRequirement,\n                };\n            } else {\n                const { requirement, idToRequirement } = getInnerRequirementAndDictionaryFromJSON(optionJSON, codeToCourse, requirementNameToCount);\n                return {\n                    option: { requirement, name: requirement.name },\n                    idToRequirement,\n                };\n            }\n        })\n        const requirement = new SelectionRequirement({\n            id,\n            name: json.name,\n            options: optionAndDictionaryArray.map(({ option }) => option),\n        });\n        return {\n            requirement,\n            idToRequirement: new Map(\n                optionAndDictionaryArray.flatMap(({ idToRequirement }) => [...idToRequirement.entries()])\n            ),\n        };\n    }\n};\n\nconst getRequirementAndDictionaryFromJSON = (\n    json: RequirementsJSON,\n    codeToCourse: ReadonlyMap<string, Course>\n) => getInnerRequirementAndDictionaryFromJSON(json, codeToCourse, new Map())\n\nexport default getRequirementAndDictionaryFromJSON;\n","import codeToCourse from '../courses';\nimport { getRequirementAndDictionaryFromJSON } from '../Requirements';\nimport coins17_0 from './coins17.json';\nimport klis17_0 from './klis17.json';\nimport mast17_0 from './mast17.json';\n\nconst requirementAndDictionaryPairs = new Map([\n    ['coins17', {\n        id: 'coins17',\n        name: '情報科学類 / 2017年度入学',\n        ...getRequirementAndDictionaryFromJSON(coins17_0, codeToCourse)\n    }],\n    ['mast17', {\n        id: 'mast17',\n        name: '情報メディア創成学類 / 2017年度入学',\n        ...getRequirementAndDictionaryFromJSON(mast17_0, codeToCourse)\n    }],\n    ['klis17', {\n        id: 'klis17',\n        name: '知識情報・図書館学類 / 2017年度入学',\n        ...getRequirementAndDictionaryFromJSON(klis17_0, codeToCourse)\n    }],\n]);\n\nexport default requirementAndDictionaryPairs;","import React from 'react';\nimport { Badge } from 'react-bootstrap';\nimport Plan, { RegistrationStatus } from '../Plan';\nimport Requirements, { RequirementWithChildren, RequirementWithCourses } from '../Requirements';\n\nconst CreditsCountLabelDelimiter = () => (<span className=\"text-muted\"> / </span>)\n\nconst ExceededCreditsCountLabel = ({ creditsCount }: { creditsCount: number }) => (\n    <>\n        <span className=\"text-muted\">(</span>\n        +{creditsCount}\n        <span className=\"text-muted\">)</span>\n    </>\n);\n\nconst CreditsCountLabels = ({ requirement, plan }: {\n    requirement: Requirements,\n    plan: Plan,\n}) => {\n    const creditsCount = requirement.getRegisteredCreditCounts(plan, false);\n    const exceededCreditsCount = requirement.getRegisteredCreditCounts(plan, true);\n    const requiredCreditsCount = requirement.getRequiredCreditCount(plan.selectionNameToOptionName);\n\n    return (\n        <div>\n            <span>\n                <span className=\"text-muted\">修得</span>\n                <> </>\n                <strong className=\"text-success\">{creditsCount.acquired}</strong>\n                {exceededCreditsCount.acquired > creditsCount.acquired ? (<ExceededCreditsCountLabel creditsCount={exceededCreditsCount.acquired - creditsCount.acquired} />) : (<></>)}\n            </span>\n            <CreditsCountLabelDelimiter />\n            <span>\n                <span className=\"text-muted\">履修</span>\n                <> </>\n                <strong className=\"text-primary\">{creditsCount.registered}</strong>\n                {exceededCreditsCount.registered > creditsCount.registered ? (<ExceededCreditsCountLabel creditsCount={exceededCreditsCount.registered - creditsCount.registered} />) : (<></>)}\n            </span>\n            <CreditsCountLabelDelimiter />\n            <span>\n                <span className=\"text-muted\">必要</span>\n                <> </>\n                <strong>\n                    {\n                        requiredCreditsCount.min === requiredCreditsCount.max ?\n                            requiredCreditsCount.min :\n                            `${requiredCreditsCount.min}~${requiredCreditsCount.max}`\n                    }\n                </strong>\n            </span>\n        </div>\n    )\n};\n\nexport const RequirementSummaryView = ({ requirement, plan }: {\n    requirement: RequirementWithChildren | RequirementWithCourses,\n    plan: Plan,\n}) => {\n    const status = requirement.getStatus(plan);\n    return (\n        <>\n            <h5 className=\"d-flex justify-content-between align-items-center\">\n                <div>{requirement.name}</div>\n                <Badge className=\"ml-2 flex-shrink-0\" variant={status === RegistrationStatus.Acquired ? 'success' : status === RegistrationStatus.Registered ? 'primary' : 'secondary'}>\n                    {status === RegistrationStatus.Acquired ? '修得OK' : status === RegistrationStatus.Registered ? '履修OK' : '不足'}\n                </Badge>\n            </h5>\n            <div>\n                {requirement.description === undefined ? (<></>) : (<div className=\"text-muted\">{requirement.description}</div>)}\n                <CreditsCountLabels requirement={requirement} plan={plan} />\n            </div>\n        </>\n    );\n}\n","import React, { useState } from \"react\";\nimport { Button, Card, Modal } from \"react-bootstrap\";\nimport Plan from \"../Plan\";\nimport { RequirementWithCourses } from \"../Requirements\";\nimport { RequirementSummaryView } from \"./RequirementSummaryView\";\n\nconst CourseMovementConfirmationModal = ({ currentRequirement, plan, onReturn, onExited }: {\n    currentRequirement: RequirementWithCourses,\n    plan: Plan,\n    onReturn: (value: boolean) => void,\n    onExited: () => void,\n}) => {\n    const [show, setShow] = useState(true);\n\n    return (\n        <Modal show={show} onHide={() => { setShow(false); onReturn(false); }} onExited={onExited}>\n            <Modal.Header closeButton>\n                <Modal.Title>科目群の割り当てを変更</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <p>\n                    この科目は、すでに以下の科目群に割り当てられています。\n                    <strong>続けると、この科目群への割り当ては解除されます。</strong>\n                </p>\n                <p>各科目に割り当てできる科目群は1つまでです。</p>\n                <Card body>\n                    <RequirementSummaryView requirement={currentRequirement} plan={plan} />\n                </Card>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={() => { setShow(false); onReturn(false); }}>キャンセル</Button>\n                <Button variant=\"primary\" onClick={() => { setShow(false); onReturn(true); }}>続ける</Button>\n            </Modal.Footer>\n        </Modal>\n    );\n};\n\nexport default CourseMovementConfirmationModal;","import React from 'react';\nimport { ListGroup } from 'react-bootstrap';\nimport Course from '../Course';\nimport FilterType from '../FilterType';\nimport Plan, { RegisteredCreditCounts } from '../Plan';\nimport RegistrationStatusLockTarget from '../RegistrationStatusLockTarget';\nimport { RequirementWithChildren, RequirementWithCourses } from '../Requirements';\nimport InnerRequirementView from './InnerRequirementView';\nimport { RequirementSummaryView } from './RequirementSummaryView';\n\nconst RequirementWithChildrenView = ({ requirement, filterType, lockTarget, plan, onCourseClick, onOthersCountsChange, onSelectionChange }: {\n    requirement: RequirementWithChildren,\n    filterType: FilterType,\n    lockTarget: RegistrationStatusLockTarget,\n    plan: Plan,\n    onCourseClick: (course: Course, requirement: RequirementWithCourses) => void,\n    onOthersCountsChange: (requirement: RequirementWithCourses, newOthersCount: RegisteredCreditCounts) => void,\n    onSelectionChange: (selectionName: string, newOptionName: string) => void,\n}) => (\n        <>\n            <RequirementSummaryView requirement={requirement} plan={plan} />\n            <ListGroup className=\"mt-3\">\n                {\n                    requirement.children.map(child => (\n                        <ListGroup.Item key={child.id}>\n                            <InnerRequirementView\n                                requirement={child} plan={plan}\n                                filterType={filterType} lockTarget={lockTarget}\n                                onCourseClick={onCourseClick} onSelectionChange={onSelectionChange}\n                                onOthersCountsChange={onOthersCountsChange}\n                            />\n                        </ListGroup.Item>\n                    ))\n                }\n            </ListGroup>\n        </>\n    );\n\nexport default RequirementWithChildrenView;","import React from 'react';\nimport { Badge, ListGroup, OverlayTrigger, Tooltip } from \"react-bootstrap\";\nimport Course from \"../Course\";\nimport Plan, { getNextStatus, RegistrationStatus } from '../Plan';\nimport RegistrationStatusLockTarget from '../RegistrationStatusLockTarget';\nimport Requirements, { RequirementWithCourses } from \"../Requirements\";\n\nconst isRegistrable = ({ course, courseToStatus }: {\n    course: Course,\n    courseToStatus: ReadonlyMap<Course, RegistrationStatus>,\n}) => ![...courseToStatus].some(\n    ([course1, status]) =>\n        course1 !== course && course1.title === course.title && status !== RegistrationStatus.Unregistered\n);\n\nconst CourseListItem = ({ course, onClick, newRequirement, plan, lockTarget }: {\n    course: Course,\n    newRequirement: Requirements,\n    plan: Plan,\n    lockTarget: RegistrationStatusLockTarget,\n    onClick: () => void,\n}) => {\n    const status = plan.courseToStatus.get(course) ?? RegistrationStatus.Unregistered;\n    const currentRequirement = plan.courseToRequirement.get(course);\n    const isRegisteredButInvalid = status !== RegistrationStatus.Unregistered && currentRequirement !== newRequirement;\n    const disabled = !isRegistrable({\n        course,\n        courseToStatus: plan.courseToStatus\n    });\n    const action = getNextStatus({ currentStatus: status, lockTarget }) !== status || isRegisteredButInvalid;\n\n    return (\n        <ListGroup.Item\n            action={action}\n            onClick={onClick}\n            disabled={disabled}\n            variant={\n                isRegisteredButInvalid ? 'dark' :\n                    status === RegistrationStatus.Acquired ? 'success' :\n                        status === RegistrationStatus.Registered ? 'primary' :\n                            undefined\n            }\n        >\n            <div className=\"d-flex justify-content-between align-items-center\">\n                <div>\n                    <div>{course.title}</div>\n                    <code>{course.code}</code>\n                </div>\n                <div className=\"ml-2 text-right flex-shrink-0\">\n                    {\n                        isRegisteredButInvalid ?\n                            (\n                                <OverlayTrigger\n                                    overlay={\n                                        <Tooltip id=\"tooltip1\">\n                                            {\n                                                currentRequirement === undefined ?\n                                                    'この科目はどの科目群にも割り当てられていません。' :\n                                                    'この科目はほかの科目群に割り当てられています。'\n                                            }\n                                        </Tooltip>\n                                    }\n                                >\n                                    {\n                                        currentRequirement === undefined ?\n                                            (<Badge variant=\"secondary\">?</Badge>) :\n                                            (<Badge variant=\"warning\">!</Badge>)\n                                    }\n                                </OverlayTrigger>\n                            ) :\n                            (<></>)\n                    }\n                    <Badge variant={status === RegistrationStatus.Acquired ? 'success' : status === RegistrationStatus.Registered ? 'primary' : 'secondary'}>\n                        {status === RegistrationStatus.Acquired ? '修得済み' : status === RegistrationStatus.Registered ? '履修する' : '履修しない'}\n                    </Badge>\n                    <div><span className=\"text-muted\">単位数</span> <strong>{course.creditCount}</strong></div>\n                </div>\n            </div>\n        </ListGroup.Item>\n    )\n};\n\nconst CourseList = ({ requirement, courses, plan, onCourseClick, lockTarget }: {\n    requirement: RequirementWithCourses,\n    courses: readonly Course[],\n    plan: Plan,\n    lockTarget: RegistrationStatusLockTarget\n    onCourseClick: (course: Course) => void,\n}) => (\n        <ListGroup>\n            {\n                courses.map((course: Course) => (\n                    <CourseListItem\n                        key={course.code}\n                        course={course} plan={plan}\n                        newRequirement={requirement}\n                        lockTarget={lockTarget}\n                        onClick={() => onCourseClick(course)}\n                    />\n                ))\n            }\n        </ListGroup>\n    );\n\nexport default CourseList;","import React, { useState } from 'react';\nimport { Accordion, Button, ButtonToolbar, Card, Col, Form } from 'react-bootstrap';\nimport Course from '../Course';\nimport FilterType from '../FilterType';\nimport Plan, { RegisteredCreditCounts, RegistrationStatus } from '../Plan';\nimport RegistrationStatusLockTarget from '../RegistrationStatusLockTarget';\nimport { RequirementWithCourses } from '../Requirements';\nimport CourseList from './CourseList';\nimport { RequirementSummaryView } from './RequirementSummaryView';\n\nconst OthersCountInput = ({ currentOthersCount, onReturn, onHide }: {\n    currentOthersCount: RegisteredCreditCounts,\n    onReturn: (newOthersCount: RegisteredCreditCounts) => void,\n    onHide: () => void,\n}) => {\n    const [acquired, setAcquired] = useState<number | undefined>();\n    const [registeredExcludingAcquired, setRegisteredExcludingAcquired] = useState<number | undefined>();\n    const [registeredIncludingAcquired, setRegisteredIncludingAcquired] = useState<number | undefined>();\n\n    const computed = {\n        acquired: acquired ?? currentOthersCount.acquired,\n        registered:\n            registeredIncludingAcquired !== undefined ?\n                registeredIncludingAcquired :\n                registeredExcludingAcquired !== undefined ?\n                    (acquired !== undefined ? acquired : currentOthersCount.acquired) + registeredExcludingAcquired :\n                    acquired !== undefined ?\n                        currentOthersCount.registered + acquired - currentOthersCount.acquired :\n                        currentOthersCount.registered,\n    }\n\n    return (\n        <Card border=\"primary\">\n            <Card.Header>単位数を入力</Card.Header>\n            <Card.Body>\n                <Form onSubmit={(e: React.FormEvent<HTMLFormElement>) => {\n                    e.preventDefault();\n                    onReturn(computed);\n                    onHide();\n                }}>\n                    <Form.Row>\n                        <Form.Group as={Col} md=\"4\">\n                            <Form.Label>修得済みの単位数 <span className=\"text-muted\">(a)</span></Form.Label>\n                            <Form.Control\n                                type=\"number\"\n                                min={0}\n                                step={0.5}\n                                placeholder={`${computed.acquired}`}\n                                value={acquired === undefined ? '' : `${acquired}`}\n                                onChange={\n                                    (e: React.ChangeEvent<HTMLInputElement>) =>\n                                        setAcquired(e.target.value === '' ? undefined : +e.target.value)\n                                }\n                                isInvalid={computed.acquired < 0}\n                            />\n                            <Form.Control.Feedback type=\"invalid\">(a) &gt;= 0</Form.Control.Feedback>\n                        </Form.Group>\n                        <Form.Group as={Col} md=\"4\">\n                            <Form.Label>履修する単位数 <span className=\"text-muted\">(b)</span></Form.Label>\n                            <Form.Control\n                                type=\"number\"\n                                min={0}\n                                step={0.5}\n                                placeholder={`${computed.registered - computed.acquired}`}\n                                value={registeredExcludingAcquired === undefined ? '' : `${registeredExcludingAcquired}`}\n                                onChange={\n                                    (e: React.ChangeEvent<HTMLInputElement>) => {\n                                        if (e.target.value === '') {\n                                            setRegisteredExcludingAcquired(undefined);\n                                        } else {\n                                            setRegisteredExcludingAcquired(+e.target.value);\n                                            setRegisteredIncludingAcquired(undefined);\n                                        }\n                                    }\n                                }\n                                isInvalid={computed.acquired > computed.registered}\n                            />\n                            <Form.Control.Feedback type=\"invalid\">(b) &gt;= 0</Form.Control.Feedback>\n                        </Form.Group>\n                        <Form.Group as={Col} md=\"4\">\n                            <Form.Label>計 <span className=\"text-muted\">(a) + (b)</span></Form.Label>\n                            <Form.Control\n                                type=\"number\"\n                                min={0}\n                                step={0.5}\n                                placeholder={`${computed.registered}`}\n                                value={registeredIncludingAcquired === undefined ? '' : `${registeredIncludingAcquired}`}\n                                onChange={\n                                    (e: React.ChangeEvent<HTMLInputElement>) => {\n                                        if (e.target.value === '') {\n                                            setRegisteredIncludingAcquired(undefined);\n                                        } else {\n                                            setRegisteredIncludingAcquired(+e.target.value);\n                                            setRegisteredExcludingAcquired(undefined);\n                                        }\n                                    }\n                                }\n                            />\n                        </Form.Group>\n                    </Form.Row>\n                    <ButtonToolbar>\n                        <Button\n                            type=\"submit\"\n                            disabled={computed.acquired < 0 || computed.acquired > computed.registered}\n                        >\n                            OK\n                        </Button>\n                        <Button variant=\"secondary\" onClick={onHide}>キャンセル</Button>\n                    </ButtonToolbar>\n                </Form>\n            </Card.Body>\n        </Card>\n    )\n}\n\nconst RequirementWithCoursesView = ({ requirement, filterType, lockTarget, plan, onCourseClick, onOthersCountsChange }: {\n    requirement: RequirementWithCourses,\n    filterType: FilterType,\n    lockTarget: RegistrationStatusLockTarget,\n    plan: Plan,\n    onCourseClick: (course: Course, requirement: RequirementWithCourses) => void,\n    onOthersCountsChange: (newOthersCount: RegisteredCreditCounts) => void,\n}) => {\n    const [isOpen, setIsOpen] = useState(false);\n    const [showsInput, setShowsInput] = useState(false);\n\n    const courses = requirement.courses.filter(course =>\n        filterType === FilterType.None ||\n        (plan.courseToStatus.has(course) && plan.courseToStatus.get(course) !== RegistrationStatus.Unregistered)\n    ).filter(course => filterType !== FilterType.Valid || requirement === plan.courseToRequirement.get(course));\n\n    return (\n        <>\n            <Accordion activeKey={isOpen ? '0' : ''}>\n                <div className={`bg-white ${isOpen ? 'sticky-top' : ''}`}>\n                    <RequirementSummaryView requirement={requirement} plan={plan} />\n                    {\n                        courses.length === 0 ?\n                            requirement.allowsOthers ? (\n                                showsInput ? (<></>) : (\n                                    <Button block className=\"mt-3\" variant=\"secondary\" onClick={() => setShowsInput(true)}>\n                                        単位数を入力\n                                    </Button>\n                                )\n                            ) : (\n                                    <Button block className=\"mt-3\" variant=\"outline-secondary\" disabled>\n                                        {filterType === FilterType.None ? '' : '履修する'}科目はありません\n                                    </Button>\n                                ) : (\n                                <Button\n                                    block className=\"mt-3\"\n                                    onClick={() => setIsOpen(!isOpen)}\n                                    variant={isOpen ? 'primary' : 'outline-secondary'}\n                                >\n                                    {filterType === FilterType.None ? '' : '履修する'}科目を{isOpen ? '非' : ''}表示\n                                </Button>\n                            )\n                    }\n                </div>\n                {\n                    showsInput ? (\n                        <div className=\"mt-3\">\n                            <OthersCountInput\n                                currentOthersCount={plan.requirementToOthersCount.get(requirement) || { acquired: 0, registered: 0 }}\n                                onReturn={onOthersCountsChange} onHide={() => setShowsInput(false)}\n                            />\n                        </div>\n                    ) : (<></>)\n                }\n                <Accordion.Collapse eventKey=\"0\">\n                    {\n                        courses.length === 0 ? (<></>) : (\n                            <div className=\"mt-3\">\n                                <CourseList\n                                    courses={courses} plan={plan}\n                                    requirement={requirement} lockTarget={lockTarget}\n                                    onCourseClick={course => onCourseClick(course, requirement)}\n                                />\n                            </div>\n                        )\n                    }\n                </Accordion.Collapse>\n            </Accordion>\n        </>\n    );\n}\n\nexport default RequirementWithCoursesView;","import React from 'react';\nimport { Dropdown } from 'react-bootstrap';\nimport Course from '../Course';\nimport FilterType from '../FilterType';\nimport Plan, { RegisteredCreditCounts } from '../Plan';\nimport RegistrationStatusLockTarget from '../RegistrationStatusLockTarget';\nimport { RequirementWithCourses, SelectionRequirement } from '../Requirements';\nimport InnerRequirementView from './InnerRequirementView';\n\nconst SelectionRequirementView = ({ requirement, filterType, lockTarget, plan, onCourseClick, onOthersCountsChange, onSelectionChange }: {\n    requirement: SelectionRequirement,\n    filterType: FilterType,\n    lockTarget: RegistrationStatusLockTarget,\n    plan: Plan,\n    onCourseClick: (course: Course, requirement: RequirementWithCourses) => void,\n    onOthersCountsChange: (requirement: RequirementWithCourses, newOthersCount: RegisteredCreditCounts) => void,\n    onSelectionChange: (selectionName: string, newOptionName: string) => void,\n}) => {\n    const selectedOptionName = requirement.getSelectedOptionName(plan.selectionNameToOptionName);\n    const selectedRequirement = requirement.getSelectedRequirement(plan.selectionNameToOptionName);\n\n    const handleOptionClick = (newOptionName: string) => {\n        if (selectedOptionName !== newOptionName) {\n            onSelectionChange(requirement.name, newOptionName);\n        }\n    };\n\n    return (\n        <>\n            <Dropdown>\n                <Dropdown.Toggle id=\"\" variant=\"secondary\" disabled={filterType === FilterType.Valid}>\n                    <span\n                        style={{\n                            overflow: 'hidden',\n                            textOverflow: 'ellipsis',\n                        }}\n                    >\n                        {requirement.name}\n                        <> : </>\n                        <strong>{selectedOptionName}</strong>\n                    </span>\n                </Dropdown.Toggle>\n\n                <Dropdown.Menu style={{ zIndex: 1100 }}>\n                    {\n                        requirement.options.map(option => (\n                            <Dropdown.Item key={option.name}\n                                active={option.name === selectedOptionName}\n                                onClick={() => handleOptionClick(option.name)}\n                            >\n                                {option.name}\n                            </Dropdown.Item>\n                        ))\n                    }\n                </Dropdown.Menu>\n            </Dropdown>\n            {\n                selectedRequirement === undefined ? (<></>) : (\n                    <div className=\"mt-3\">\n                        <InnerRequirementView\n                            requirement={selectedRequirement} plan={plan}\n                            filterType={filterType} lockTarget={lockTarget}\n                            onCourseClick={onCourseClick} onOthersCountsChange={onOthersCountsChange}\n                            onSelectionChange={onSelectionChange}\n                        />\n                    </div>\n                )\n            }\n        </>\n    );\n}\n\nexport default SelectionRequirementView;","import React from 'react';\nimport Course from \"../Course\";\nimport FilterType from '../FilterType';\nimport Plan, { RegisteredCreditCounts } from '../Plan';\nimport RegistrationStatusLockTarget from '../RegistrationStatusLockTarget';\nimport Requirements, { RequirementWithChildren, RequirementWithCourses } from \"../Requirements\";\nimport RequirementWithChildrenView from './RequirementWithChildrenView';\nimport RequirementWithCoursesView from './RequirementWithCoursesView';\nimport SelectionRequirementView from './SelectionRequirementView';\n\nconst InnerRequirementView = ({ requirement, filterType, lockTarget, plan, onCourseClick, onOthersCountsChange, onSelectionChange }: {\n    requirement: Requirements,\n    filterType: FilterType,\n    lockTarget: RegistrationStatusLockTarget,\n    plan: Plan,\n    onCourseClick: (course: Course, requirement: RequirementWithCourses) => void,\n    onOthersCountsChange: (requirement: RequirementWithCourses, newOthersCount: RegisteredCreditCounts) => void,\n    onSelectionChange: (selectionName: string, newOptionName: string) => void,\n}) => {\n    if (requirement instanceof RequirementWithChildren) {\n        return (\n            <RequirementWithChildrenView\n                requirement={requirement} plan={plan}\n                filterType={filterType} lockTarget={lockTarget}\n                onCourseClick={onCourseClick} onOthersCountsChange={onOthersCountsChange} onSelectionChange={onSelectionChange}\n            />\n        )\n    } else if (requirement instanceof RequirementWithCourses) {\n        return (\n            <RequirementWithCoursesView\n                requirement={requirement} plan={plan}\n                filterType={filterType} lockTarget={lockTarget}\n                onCourseClick={onCourseClick}\n                onOthersCountsChange={creditsCounts => onOthersCountsChange(requirement, creditsCounts)}\n            />\n        )\n    } else {\n        return (\n            <SelectionRequirementView\n                requirement={requirement} plan={plan}\n                filterType={filterType} lockTarget={lockTarget}\n                onCourseClick={onCourseClick} onOthersCountsChange={onOthersCountsChange} onSelectionChange={onSelectionChange}\n            />\n        );\n    }\n}\n\nexport default InnerRequirementView;\n","import React from 'react';\nimport Course from '../Course';\nimport FilterType from '../FilterType';\nimport getValueFromModal, { useModals } from '../getValueFromModal';\nimport Plan, { getNextStatus, RegisteredCreditCounts, RegistrationStatus } from '../Plan';\nimport RegistrationStatusLockTarget from '../RegistrationStatusLockTarget';\nimport Requirements, { RequirementWithCourses } from '../Requirements';\nimport CourseMovementConfirmationModal from './CourseMovementConfirmationModal';\nimport InnerRequirementView from './InnerRequirementView';\n\nconst RequirementView = ({ requirement, plan, filterType, lockTarget, onChange }: {\n    requirement: Requirements,\n    filterType: FilterType,\n    lockTarget: RegistrationStatusLockTarget,\n    plan: Plan,\n    onChange: (newPlan: Plan) => void,\n}) => {\n    const { courseToStatus, courseToRequirement, requirementToOthersCount, selectionNameToOptionName } = plan;\n    const { modals, setModalsAndCount } = useModals();\n\n    const handleCourseClick = async (course: Course, requirement: RequirementWithCourses) => {\n        const currentStatus: RegistrationStatus = courseToStatus.get(course) || RegistrationStatus.Unregistered;\n        const currentRequirement = courseToRequirement.get(course);\n        let nextCourseToStatus = courseToStatus;\n        if (currentStatus === RegistrationStatus.Unregistered || currentRequirement === requirement) {\n            const nextStatus = getNextStatus({ currentStatus, lockTarget });\n            nextCourseToStatus = new Map([...courseToStatus, [course, nextStatus]]);\n        } else if (\n            currentRequirement !== undefined &&\n            !await getValueFromModal(\n                CourseMovementConfirmationModal,\n                { currentRequirement, plan },\n                setModalsAndCount\n            )\n        ) {\n            return;\n        }\n        onChange({\n            ...plan,\n            courseToStatus: nextCourseToStatus,\n            courseToRequirement: new Map([...courseToRequirement, [course, requirement]]),\n        });\n    }\n\n    const handleOthersCountsChange = (requirement: RequirementWithCourses, newOthersCount: RegisteredCreditCounts) => {\n        onChange({\n            ...plan,\n            requirementToOthersCount: new Map([\n                ...requirementToOthersCount,\n                [requirement, newOthersCount]\n            ]),\n        });\n    }\n\n    const handleSelectionChange = (selectionName: string, newOptionName: string) => {\n        const nextSelectionNameToOptionName = new Map([...selectionNameToOptionName, [selectionName, newOptionName]]);\n        const visibleRequirements = requirement.getVisibleRequirements(nextSelectionNameToOptionName);\n        const nextCourseToRequirement = new Map([...courseToRequirement.entries()].filter(\n            ([_, requirement]) => visibleRequirements.includes(requirement)\n        ));\n        onChange({\n            ...plan,\n            courseToRequirement: nextCourseToRequirement,\n            selectionNameToOptionName: nextSelectionNameToOptionName,\n        });\n    }\n\n    return (\n        <>\n            {modals}\n            <InnerRequirementView\n                requirement={requirement} plan={plan}\n                filterType={filterType} lockTarget={lockTarget}\n                onCourseClick={handleCourseClick} onOthersCountsChange={handleOthersCountsChange}\n                onSelectionChange={handleSelectionChange}\n            />\n        </>\n    );\n}\n\nexport default RequirementView;","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React, { useState } from 'react';\nimport { Accordion, Alert, Badge, Container, Dropdown, Form, Navbar } from 'react-bootstrap';\nimport { HashRouter, Link, Redirect, Route, Switch, useParams } from 'react-router-dom';\nimport { useLocalStorage } from 'react-use';\nimport './App.css';\nimport { AssignmentsFindButton } from './AssignmentsFindView';\nimport CollectivelyCourseSetView from './CollectivelyCourseSetView';\nimport codeToCourse from './courses';\nimport ExportView from './ExportView';\nimport FilterType from './FilterType';\nimport ImportView from './ImportView';\nimport Plan, { emptyPlan, fromJSON, PlanJSON, RegistrationStatus, toJSON } from './Plan';\nimport RegistrationStatusLockTarget from './RegistrationStatusLockTarget';\nimport requirementAndDictionaryPairs from './requirementInstances';\nimport Requirements, { RequirementWithCourses } from './Requirements';\nimport RequirementView from './RequirementView';\n\nconst StatusAlert: React.FC<{\n    requirement: Requirements,\n    plan: Plan,\n}> = ({ requirement, plan }) => {\n    const status = requirement.getStatus(plan);\n    const variant = status === RegistrationStatus.Acquired ? 'success' : status === RegistrationStatus.Registered ? 'primary' : 'secondary';\n\n    return (\n        <Alert variant={variant} className=\"d-flex align-items-center\">\n            <Badge variant={variant} className=\"mr-2\">\n                {status === RegistrationStatus.Acquired ? '修得OK' : status === RegistrationStatus.Registered ? '履修OK' : '不足'}\n            </Badge>\n            現在の\n            {\n                status === RegistrationStatus.Acquired ? '修得状況は要件を満たしています。' :\n                    status === RegistrationStatus.Registered ? '履修状況は要件を満たしていますが、修得状況は要件を満たしていません。' :\n                        '履修状況は要件を満たしていません。'\n            }\n        </Alert>\n    );\n}\n\nconst RequirementWithConfiguration: React.FC<{\n    requirement: Requirements,\n    idToRequirement: ReadonlyMap<string, RequirementWithCourses>,\n    plan: Plan,\n    setPlan: (nextPlan: Plan) => void,\n}> = ({ requirement, idToRequirement, plan, setPlan }) => {\n    const [filterType, setFilterType] = useState(FilterType.None);\n    const { lockTarget, setLockTarget } = useLockTarget(filterType);\n\n    return (\n        <>\n            <Accordion className=\"mb-3\">\n                <ExportView eventKey=\"0\" plan={plan} />\n                <ImportView\n                    eventKey=\"1\"\n                    onSubmit={setPlan}\n                    codeToCourse={codeToCourse}\n                    idToRequirement={idToRequirement}\n                />\n            </Accordion>\n            <div className=\"mb-3\">\n                <CollectivelyCourseSetView\n                    requirement={requirement}\n                    codeToCourse={codeToCourse}\n                    idToRequirement={idToRequirement}\n                    plan={plan}\n                    onSubmit={setPlan}\n                />\n            </div>\n            <div className=\"mb-3\">\n                <AssignmentsFindButton\n                    requirement={requirement}\n                    idToRequirement={idToRequirement}\n                    codeToCourse={codeToCourse}\n                    plan={plan}\n                    onSubmit={setPlan}\n                />\n            </div>\n            <Form.Group>\n                <Form.Label>履修状況のロック</Form.Label>\n                {\n                    [\n                        {\n                            label: \"ロックしない\",\n                            lockTarget: RegistrationStatusLockTarget.None,\n                            disabled: filterType !== FilterType.None,\n                        },\n                        {\n                            label: \"[履修する] と [修得済み] の間の変更のみ許可\",\n                            lockTarget: RegistrationStatusLockTarget.Unregistered,\n                        },\n                        {\n                            label: \"[履修しない] と [履修する] の間の変更のみ許可\",\n                            lockTarget: RegistrationStatusLockTarget.Acquired,\n                            disabled: filterType !== FilterType.None,\n                        },\n                        {\n                            label: \"すべてロックする\",\n                            lockTarget: RegistrationStatusLockTarget.All,\n                        },\n                    ].map(({ label, disabled, lockTarget: lockTarget1 }) => (\n                        <Form.Check\n                            custom type=\"radio\"\n                            id={`lockTargetCheck${lockTarget1}`}\n                            label={label} key={lockTarget1}\n                            disabled={disabled}\n                            checked={lockTarget === lockTarget1}\n                            onChange={() => setLockTarget(lockTarget1)}\n                        />\n                    ))\n                }\n            </Form.Group>\n            <Form.Group>\n                <Form.Check\n                    custom\n                    id=\"filterTypeCheck0\"\n                    label=\"履修する科目のみ表示する\"\n                    checked={filterType !== FilterType.None}\n                    onChange={\n                        () => {\n                            if (filterType === FilterType.None) {\n                                setFilterType(FilterType.Registered);\n                            } else {\n                                setFilterType(FilterType.None);\n                            }\n                        }\n                    }\n                />\n                <Form.Check\n                    custom\n                    id=\"filterTypeCheck1\"\n                    label=\"単位数の計算に含まれる科目のみ表示する\"\n                    checked={filterType === FilterType.Valid}\n                    onChange={\n                        () => {\n                            if (filterType === FilterType.Valid) {\n                                setFilterType(FilterType.Registered);\n                            } else {\n                                setFilterType(FilterType.Valid);\n                            }\n                        }\n                    }\n                />\n            </Form.Group>\n            <hr />\n            <StatusAlert requirement={requirement} plan={plan} />\n            <div className=\"mb-3\">\n                <RequirementView\n                    requirement={requirement}\n                    lockTarget={lockTarget} filterType={filterType}\n                    plan={plan} onChange={setPlan}\n                />\n            </div>\n        </>\n    );\n}\n\nconst InnerMain: React.FC<{\n    requirement: Requirements;\n    idToRequirement: ReadonlyMap<string, RequirementWithCourses>;\n    requirementId: string;\n    requirementName: string;\n}> = ({ requirement, idToRequirement, requirementId, requirementName }) => {\n    const { plan, setPlan } = usePlan(requirementId);\n\n    return (\n        <>\n            <Alert variant=\"danger\" className=\"my-3\">\n                このツールの結果を利用する場合、必ず履修要覧や支援室などでその結果が正しいことを確認するようにしてください。\n                <strong>科目や要件の定義が誤っていることや、実際には認められない履修の組み合わせが存在することがあります。</strong>\n            </Alert>\n            <Dropdown className=\"mb-3\">\n                <Dropdown.Toggle id=\"department-dropdown\" variant=\"secondary\">\n                    <span\n                        style={{\n                            overflow: 'hidden',\n                            textOverflow: 'ellipsis',\n                        }}\n                    >\n                        学類\n                    <> : </>\n                        <strong>{requirementName}</strong>\n                    </span>\n                </Dropdown.Toggle>\n                <Dropdown.Menu>\n                    {\n                        [...requirementAndDictionaryPairs.values()].map(\n                            ({ id, name }) => (\n                                <Dropdown.Item as={Link} to={`/${id}`} active={id === requirementId} key={id}>\n                                    {name}\n                                </Dropdown.Item>\n                            )\n                        )\n                    }\n                </Dropdown.Menu>\n            </Dropdown>\n            <hr />\n            <RequirementWithConfiguration requirement={requirement} idToRequirement={idToRequirement} plan={plan} setPlan={setPlan} />\n        </>\n    );\n}\n\nconst Main: React.FC = () => {\n    const { requirementId }: { requirementId: string } = useParams();\n    if (requirementId === undefined) {\n        return (<Redirect to=\"/\" />);\n    }\n\n    const {\n        requirement,\n        idToRequirement,\n        name: requirementName,\n    } = requirementAndDictionaryPairs.get(requirementId) ?? {};\n    if (requirement === undefined || idToRequirement === undefined || requirementName === undefined) {\n        return (<Redirect to=\"/\" />);\n    }\n\n    return (<InnerMain\n        requirement={requirement}\n        idToRequirement={idToRequirement}\n        requirementId={requirementId}\n        requirementName={requirementName}\n    />);\n}\n\nconst App: React.FC = () => (\n    <HashRouter>\n        <Navbar variant=\"dark\" bg=\"dark\">\n            <Navbar.Brand>卒業要件を満たしたい</Navbar.Brand>\n        </Navbar>\n        <Container>\n            <Switch>\n                <Route path=\"/:requirementId\">\n                    <Main />\n                </Route>\n                <Route path=\"/\">\n                    <Redirect to=\"/coins17\" />\n                </Route>\n            </Switch>\n        </Container>\n    </HashRouter>\n);\n\nconst useLockTarget = (filterType: FilterType) => {\n    const [lockTarget, setLockTarget] = useState(RegistrationStatusLockTarget.None);\n\n    if (filterType === FilterType.None) {\n        return { lockTarget, setLockTarget };\n    } else if (lockTarget === RegistrationStatusLockTarget.None) {\n        return {\n            lockTarget: RegistrationStatusLockTarget.Unregistered,\n            setLockTarget,\n        };\n    } else if (lockTarget === RegistrationStatusLockTarget.Acquired) {\n        return {\n            lockTarget: RegistrationStatusLockTarget.All,\n            setLockTarget,\n        };\n    } else {\n        return { lockTarget, setLockTarget };\n    }\n}\n\nconst COURSES_STATE = \"courses-state\"\n\nconst usePlanMap = () => {\n    const [storedJSON, setStoredJSON] = useLocalStorage<readonly (readonly [string, PlanJSON])[]>(COURSES_STATE);\n    const [planMap0, setPlanMap0] = useState(() => {\n        if (storedJSON === undefined) {\n            const storedPlanMap: ReadonlyMap<string, Plan> = new Map();\n            return storedPlanMap;\n        } else {\n            try {\n                const storedPlanEntries = storedJSON.map(([requirementName, planJSON]) => {\n                    const idToRequirement = requirementAndDictionaryPairs.get(requirementName)?.idToRequirement;\n                    if (idToRequirement === undefined) {\n                        return undefined;\n                    } else {\n                        try {\n                            return [requirementName, fromJSON(planJSON, { codeToCourse, idToRequirement })] as const;\n                        } catch {\n                            return undefined;\n                        }\n                    }\n                }).filter((value): value is NonNullable<typeof value> => value !== undefined);\n                const storedPlanMap: ReadonlyMap<string, Plan> = new Map(storedPlanEntries);\n                return storedPlanMap;\n            } catch {\n                const storedPlanMap: ReadonlyMap<string, Plan> = new Map();\n                return storedPlanMap;\n            }\n        }\n    });\n    const setPlanMap = (newPlanMap: ReadonlyMap<string, Plan>) => {\n        const planJSONEntries = [...newPlanMap].map(([requirementName, plan]) => [requirementName, toJSON(plan)] as const);\n        setPlanMap0(newPlanMap);\n        setStoredJSON(planJSONEntries);\n    };\n    return {\n        planMap: planMap0,\n        setPlanMap,\n    };\n}\n\nconst usePlan = (requirementName: string) => {\n    const { planMap, setPlanMap } = usePlanMap();\n\n    const plan = planMap.get(requirementName) || emptyPlan;\n    const setPlan = (newPlan: Plan) => {\n        const newPlanMap = new Map([\n            ...planMap,\n            [requirementName, newPlan]\n        ]);\n        setPlanMap(newPlanMap);\n    };\n\n    return { plan, setPlan };\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'react-app-polyfill/stable';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}