{"version":3,"sources":["Plan.ts","getValueFromModal.tsx","safely.ts","CollectivelyCourseSetView.tsx","courses/index.ts","FilterType.ts","ExportView.tsx","RegistrationStatusLockTarget.ts","ImportView.tsx","Requirements/getRequirementAndDictionaryFromJSON.ts","Requirements/index.ts","requirementInstances/index.ts","RequirementView/RequirementSummaryView.tsx","RequirementView/CourseMovementConfirmationModal.tsx","RequirementView/getNextStatus.ts","RequirementView/RequirementWithChildrenView.tsx","RequirementView/CourseList.tsx","RequirementView/RequirementWithCoursesView.tsx","RequirementView/SelectionRequirementView.tsx","RequirementView/InnerRequirementView.tsx","RequirementView/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["RegistrationStatus","initialModalsAndCount","modals","count","useModals","useState","modalsAndCount","setModalsAndCount","getValueFromModal","ModalType","props","a","Promise","resolve","reject","modal","onReturn","value","onExited","filter","key","e","toJSON","courseToStatus","courseToRequirement","requirementToOthersCount","selectionNameToOptionName","map","course","status","code","requirement","name","creditsCounts","fromJSON","json","codeToCourse","nameToRequirement","Map","get","undefined","Error","courseCode","requirementName","emptyPlan","safely","f","args","placeholder","trim","CollectivelyCourseSetConfirmationModal","show","setShow","Modal","onHide","Header","closeButton","Title","Body","Footer","Button","variant","onClick","Table1","codeColumnIndex","titleColumnIndex","creditsCountColumnIndex","courseAndRecordPairs","setCourseToStatus","firstCourse","firstRecord","record","firstRecordIsHeader","Table","bordered","hover","responsive","style","whiteSpace","cell","index","_","slice","recordIndex","getTdContent","mapCourse","mapRecord","recordValue","tds0","title","recordTitle","textAlign","creditsCount","recordCreditsCount","tds1","className","tds","OverlayTrigger","overlay","Tooltip","id","Badge","nextStatus","Acquired","Registered","cursor","getColumnIndex","reduce","previous","current","Modal1","onBack","onSubmit","handleOKClick","setAllCourseStatus","size","ButtonGroup","Modal0","csv","setCSV","validated","setValidated","records","parse","length","Array","feedback","handleCSVChange","nextCSV","Form","Group","Label","Control","as","rows","onChange","event","target","isInvalid","Feedback","type","accept","file","files","item","reader","FileReader","addEventListener","result","readAsText","htmlFor","disabled","CollectivelyCourseSetView","page","setPage","setCourseAndRecordPairs","setCodeColumnIndex","courses","set","FilterType","ExportView","plan","eventKey","Card","Accordion","Toggle","Collapse","readOnly","JSON","stringify","onFocus","select","RegistrationStatusLockTarget","ImportConfirmationModal","ImportView","jsonText","setJSONText","toggle","useAccordionToggle","nextPlan","handleSubmit","preventDefault","numberOrRangeToRange","numberOrRange","isRange","min","max","getRequirementAndDictionaryFromJSON","getInnerRequirementAndDictionaryFromJSON","selectionNameToCount","RequirementWithCourses","description","allowsOthers","requirementAndDictionaryPairs","children","child","RequirementWithChildren","flatMap","dictionary","entries","selectionCount","selectionName","optionAndDictionaryArray","options","optionJSON","option","SelectionRequirement","Requirement","requiredCreditsCount","this","getRequiredCreditsCount","registeredCreditsCounts","getRegisteredCreditsCount","acquired","registered","Unregistered","obj","isCompatible","$object","$number","includesExcess","childRegisteredCreditsCount","Math","childRequiredCreditsCount","getStatus","othersCount","courseStatus","options0","optionNameToRequirement","selectedOptionName","getSelectedOptionName","selectedRequirement","getSelectedRequirement","coins17_0","mast17_0","klis17_0","CreditsCountLabelDelimiter","ExceededCreditsCountLabel","CreditsCountLabels","exceededCreditsCount","RequirementSummaryView","CourseMovementConfirmationModal","currentRequirement","body","getNextStatus","currentStatus","lockTarget","All","RequirementWithChildrenView","filterType","onCourseClick","onOthersCountsChange","onSelectionChange","ListGroup","Item","CourseListItem","newRequirement","isRegisteredButInvalid","some","course1","isRegistrable","action","CourseList","OthersCountInput","currentOthersCount","setAcquired","registeredExcludingAcquired","setRegisteredExcludingAcquired","registeredIncludingAcquired","setRegisteredIncludingAcquired","computed","border","Row","Col","md","ButtonToolbar","RequirementWithCoursesView","isOpen","setIsOpen","showsInput","setShowsInput","None","has","Valid","activeKey","block","SelectionRequirementView","Dropdown","overflow","textOverflow","Menu","zIndex","active","newOptionName","InnerRequirementView","RequirementView","handleCourseClick","nextCourseToStatus","clearCourseToRequirementInSelection","newCourseToRequirement","clearCourseToRequirement","delete","newOthersCount","RequirementWithConfiguration","setPlan","setFilterType","useLockTarget","setLockTarget","label","lockTarget1","Check","custom","checked","InnerMain","selectedId","usePlan","selectedName","to","Alert","values","Link","Main","requirementId","useParams","useLocalStorage","storedJSON","setStoredJSON","storedPlanEntries","planJSON","planMap0","setPlanMap0","planMap","setPlanMap","newPlanMap","planJSONEntries","usePlanMap","newPlan","App","Navbar","bg","Brand","Container","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7f5644dd.chunk.js","sourcesContent":["import Course from \"./Course\";\nimport { RequirementWithCourses } from \"./Requirements\";\n\nexport interface RegisteredCreditsCounts {\n    acquired: number;\n    registered: number;\n}\n\nexport default interface Plan {\n    readonly courseToStatus: ReadonlyMap<Course, RegistrationStatus>;\n    readonly courseToRequirement: ReadonlyMap<Course, RequirementWithCourses>;\n    readonly requirementToOthersCount: ReadonlyMap<RequirementWithCourses, RegisteredCreditsCounts>;\n    readonly selectionNameToOptionName: ReadonlyMap<string, string>;\n}\n\nexport type CourseCode = string;\nexport type RequirementName = string;\n\nexport enum RegistrationStatus {\n    Unregistered = 0,\n    Registered = 1,\n    Acquired = 2,\n}\n\nexport interface PlanJSON {\n    readonly courseToStatus: readonly [CourseCode, RegistrationStatus][];\n    readonly courseToRequirement: readonly [CourseCode, RequirementName][];\n    readonly requirementToOthersCount: readonly [RequirementName, RegisteredCreditsCounts][];\n    readonly selectionNameToOptionName: readonly [string, string][];\n}\n\nexport const toJSON =\n    ({ courseToStatus, courseToRequirement, requirementToOthersCount, selectionNameToOptionName }: Plan): PlanJSON => ({\n        courseToStatus: [...courseToStatus].map(([course, status]) => [course.code, status]),\n        courseToRequirement: [...courseToRequirement].map(([course, requirement]) => [course.code, requirement.name]),\n        requirementToOthersCount: [...requirementToOthersCount].map(([requirement, creditsCounts]) => [requirement.name, creditsCounts]),\n        selectionNameToOptionName: [...selectionNameToOptionName],\n    });\n\nexport const fromJSON = (json: PlanJSON, { codeToCourse, nameToRequirement }: {\n    codeToCourse: ReadonlyMap<CourseCode, Course>,\n    nameToRequirement: ReadonlyMap<RequirementName, RequirementWithCourses>,\n}): Plan => {\n    const courseToStatus = new Map([...json.courseToStatus].map(([code, status]) => {\n        const course = codeToCourse.get(code);\n        if (course === undefined) { throw new Error(); }\n        return [course, status];\n    }));\n\n    const courseToRequirement = new Map([...json.courseToRequirement].map(([courseCode, requirementName]) => {\n        const course = codeToCourse.get(courseCode);\n        const requirement = nameToRequirement.get(requirementName);\n\n        if (course === undefined) { throw new Error(); }\n        if (requirement === undefined) { throw new Error(); }\n\n        return [course, requirement];\n    }));\n\n    const requirementToOthersCount = new Map([...json.requirementToOthersCount].map(([requirementName, creditsCounts]) => {\n        const requirement = nameToRequirement.get(requirementName);\n        if (requirement === undefined) { throw new Error(); }\n        return [requirement, creditsCounts];\n    }));\n\n    const selectionNameToOptionName = new Map(json.selectionNameToOptionName);\n\n    return { courseToStatus, courseToRequirement, requirementToOthersCount, selectionNameToOptionName }\n}\n\nexport const emptyPlan: Plan = {\n    courseToStatus: new Map(),\n    courseToRequirement: new Map(),\n    requirementToOthersCount: new Map(),\n    selectionNameToOptionName: new Map(),\n};\n","import React, { useState } from 'react';\n\nconst getValueFromModal = async <T, P>(\n    ModalType: React.ComponentType<{\n        onReturn: (value: T) => void,\n        onExited: () => void,\n    } & P>,\n    props: P,\n    setModalsAndCount: React.Dispatch<React.SetStateAction<ModalsAndCount>>,\n): Promise<T> => new Promise((resolve, reject) => {\n    try {\n        setModalsAndCount(({ modals, count }) => {\n            const modal = (\n                <ModalType\n                    {...props}\n                    onReturn={value => resolve(value)}\n                    onExited={() => setModalsAndCount(\n                        ({ modals, count }) => ({\n                            modals: modals.filter(value => value !== modal),\n                            count,\n                        })\n                    )}\n                    key={count}\n                />\n            );\n            return ({\n                modals: [...modals, modal],\n                count: count + 1,\n            })\n        });\n    } catch (e) {\n        reject(e);\n    }\n});\n\nexport interface ModalsAndCount {\n    readonly modals: readonly JSX.Element[];\n    readonly count: number;\n}\n\nconst initialModalsAndCount: ModalsAndCount = {\n    modals: [],\n    count: 0,\n};\n\nexport const useModals = () => {\n    const [modalsAndCount, setModalsAndCount] = useState(initialModalsAndCount);\n    return {\n        modals: modalsAndCount.modals,\n        setModalsAndCount,\n    };\n};\n\nexport default getValueFromModal;","const safely = <F extends (...args: any) => any>(f: F, ...args: Parameters<F>): ReturnType<F> | undefined => {\n    try {\n        return f(...args);\n    } catch {\n        return undefined;\n    }\n}\n\nexport default safely;","import parse from 'csv-parse/lib/sync';\nimport React, { useState } from 'react';\nimport { Badge, Button, ButtonGroup, Form, Modal, OverlayTrigger, Table, Tooltip } from \"react-bootstrap\";\nimport Course from './Course';\nimport getValueFromModal, { useModals } from './getValueFromModal';\nimport { RegistrationStatus } from './Plan';\nimport safely from './safely';\n\nconst placeholder = `\n\"学籍番号\",\"学生氏名\",\"科目番号\",\"科目名 \",\"単位数\",\"春学期\",\"秋学期\",\"総合評価\",\"科目区分\",\"開講年度\",\"開講区分\"\n\"201700000\",\"＊＊ ＊＊\",\"GB10615\",\"コンピュータリテラシ\",\" 2.0\",\"-\",\"-\",\"A\",\"A\",\"2017\",\"通常\"\n\"201700000\",\"＊＊ ＊＊\",\"GB10664\",\"プログラミング入門A\",\" 1.0\",\"-\",\"-\",\"A\",\"A\",\"2017\",\"通常\"\n`.trim();\n\ntype RegistrationStatus12 = RegistrationStatus.Registered | RegistrationStatus.Acquired\n\nconst CollectivelyCourseSetConfirmationModal = ({ onReturn, onExited }: {\n    onReturn: (value: boolean) => void,\n    onExited: () => void\n}) => {\n    const [show, setShow] = useState(true);\n\n    return (\n        <Modal show={show} onHide={() => { setShow(false); onReturn(false); }} onExited={onExited}>\n            <Modal.Header closeButton>\n                <Modal.Title>科目の履修 / 修得状態をまとめて設定</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                続けると、<strong>現在の履修 / 修得状態が失われます</strong>。\n                よろしいですか？\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={() => { setShow(false); onReturn(false); }}>いいえ</Button>\n                <Button variant=\"danger\" onClick={() => { setShow(false); onReturn(true); }}>はい</Button>\n            </Modal.Footer>\n        </Modal>\n    );\n}\n\nconst Table1: React.FC<{\n    codeColumnIndex: number,\n    titleColumnIndex: number | undefined,\n    creditsCountColumnIndex: number | undefined,\n    courseAndRecordPairs: readonly CourseAndRecordPair[],\n    courseToStatus: ReadonlyMap<Course, RegistrationStatus12>,\n    setCourseToStatus: (courseToStatus: ReadonlyMap<Course, RegistrationStatus12>) => void,\n}> = ({ codeColumnIndex, titleColumnIndex, creditsCountColumnIndex, courseAndRecordPairs, courseToStatus, setCourseToStatus }) => {\n    const {\n        course: firstCourse,\n        record: firstRecord,\n    } = courseAndRecordPairs[0];\n\n    const firstRecordIsHeader =\n        firstCourse === undefined &&\n        firstRecord[codeColumnIndex].trim() === '科目番号' &&\n        (titleColumnIndex === undefined || firstRecord[titleColumnIndex].trim() === '科目名') &&\n        (creditsCountColumnIndex === undefined || firstRecord[creditsCountColumnIndex].trim() === '単位数');\n\n    return (\n        <Table\n            bordered hover responsive\n            style={{ whiteSpace: 'nowrap' }}\n        >\n            <thead>\n                <tr>\n                    <th></th>\n                    <th>科目番号</th>\n                    <th>科目名</th>\n                    <th>単位数</th>\n                    {\n                        firstRecord\n                            .map((cell, index) => (<th key={index}>{firstRecordIsHeader ? cell : (<></>)}</th>))\n                            .filter((_, index) => index !== codeColumnIndex && index !== titleColumnIndex && index !== creditsCountColumnIndex)\n                    }\n                </tr>\n            </thead>\n            <tbody>\n                {\n                    (firstRecordIsHeader ? courseAndRecordPairs.slice(1) : courseAndRecordPairs).map(\n                        ({ course, record }, recordIndex) => {\n                            const getTdContent = <T,>(index: number | undefined, mapCourse: (course: Course) => T, mapRecord: (recordValue: string) => T) => {\n                                const recordValue = index === undefined ? undefined : record[index];\n                                return (\n                                    course === undefined ?\n                                        recordValue :\n                                        recordValue === undefined || mapRecord(recordValue) === mapCourse(course) ?\n                                            mapCourse(course) :\n                                            (\n                                                <>\n                                                    <div><del>{recordValue}</del></div>\n                                                    <div><ins>{mapCourse(course)}</ins></div>\n                                                </>\n                                            )\n                                );\n                            }\n\n                            const tds0 = (\n                                <>\n                                    <td><code>{record[codeColumnIndex]}</code></td>\n                                    <td>{getTdContent(titleColumnIndex, course => course.title, recordTitle => recordTitle.trim())}</td>\n                                    <td style={{ textAlign: 'center' }}>\n                                        {getTdContent(creditsCountColumnIndex, course => course.creditsCount, recordCreditsCount => +recordCreditsCount)}\n                                    </td>\n                                </>\n                            );\n                            const tds1 = record\n                                .map((cell, index) => (\n                                    <td key={index}>\n                                        {\n                                            index === codeColumnIndex ?\n                                                (<code>{cell}</code>) :\n                                                index === titleColumnIndex ?\n                                                    cell :\n                                                    (<span className=\"text-muted\">{cell}</span>)\n                                        }\n                                    </td>\n                                ))\n                                .filter((_, index) =>\n                                    index !== codeColumnIndex &&\n                                    index !== titleColumnIndex &&\n                                    index !== creditsCountColumnIndex\n                                );\n\n                            const tds = (<>{tds0}{tds1}</>);\n\n                            if (course === undefined) {\n                                return (\n                                    <tr key={recordIndex}>\n                                        <td style={{ textAlign: 'center' }}>\n                                            <OverlayTrigger\n                                                overlay={\n                                                    <Tooltip id={`record${recordIndex}-tooltip`}>この科目は見つかりません。</Tooltip>\n                                                }\n                                            >\n                                                <Badge variant=\"secondary\">?</Badge>\n                                            </OverlayTrigger>\n                                        </td>\n                                        {tds}\n                                    </tr>\n                                )\n                            } else {\n                                const status = courseToStatus.get(course);\n                                const nextStatus = status === RegistrationStatus.Acquired ? RegistrationStatus.Registered : RegistrationStatus.Acquired;\n                                const variant = status === RegistrationStatus.Acquired ? 'success' : 'primary';\n\n                                return (\n                                    <tr\n                                        key={recordIndex}\n                                        onClick={\n                                            () => setCourseToStatus(new Map([\n                                                ...courseToStatus,\n                                                [course, nextStatus]\n                                            ]))\n                                        }\n                                        style={{ cursor: 'pointer' }}\n                                        className={`table-${variant}`}\n                                    >\n                                        <td style={{ textAlign: 'center' }}>\n                                            <Badge variant={variant}>\n                                                {status === RegistrationStatus.Acquired ? '修得済み' : '履修する'}\n                                            </Badge>\n                                        </td>\n                                        {tds}\n                                    </tr>\n                                )\n                            }\n                        }\n                    )\n                }\n            </tbody>\n        </Table>\n    );\n}\n\ninterface CourseAndRecordPair {\n    course: Course | undefined;\n    record: readonly string[];\n}\n\nconst getColumnIndex = <T,>(courseAndRecordPairs: readonly CourseAndRecordPair[], mapCourse: (course: Course) => T, mapRecord: (recordValue: string) => T) =>\n    courseAndRecordPairs[0].record\n        .map((_, index) => courseAndRecordPairs.reduce((count, { course, record }) => {\n            const recordValue = record[index];\n            if (course !== undefined && mapRecord(recordValue) === mapCourse(course)) {\n                return count + 1;\n            } else {\n                return count;\n            }\n        }, 0))\n        .reduce<{\n            count: number,\n            index: number | undefined,\n        }>((previous, current, index) => {\n            if (current > previous.count) {\n                return {\n                    count: current,\n                    index,\n                }\n            } else {\n                return previous;\n            }\n        }, {\n            count: 0,\n            index: undefined,\n        }).index;\n\nconst Modal1: React.FC<{\n    codeColumnIndex: number,\n    courseAndRecordPairs: readonly CourseAndRecordPair[],\n    show: boolean,\n    onHide: () => void,\n    onBack: () => void,\n    onSubmit: (courseToStatus: ReadonlyMap<Course, RegistrationStatus12>) => void,\n}> = ({ codeColumnIndex, courseAndRecordPairs, show, onHide, onBack, onSubmit }) => {\n    const { modals, setModalsAndCount } = useModals();\n    const [courseToStatus, setCourseToStatus] = useState<ReadonlyMap<Course, RegistrationStatus12>>(new Map());\n\n    const titleColumnIndex = getColumnIndex(courseAndRecordPairs, course => course.title, recordTitle => recordTitle.trim());\n    const creditsCountColumnIndex = getColumnIndex(courseAndRecordPairs, course => course.creditsCount, recordCreditsCount => +recordCreditsCount)\n\n    const handleOKClick = async () => {\n        if (!await getValueFromModal(CollectivelyCourseSetConfirmationModal, {}, setModalsAndCount)) {\n            return;\n        }\n        onSubmit(new Map(\n            courseAndRecordPairs\n                .map(({ course }) => course)\n                .filter((course): course is NonNullable<typeof course> => course !== undefined)\n                .map(course => [course, courseToStatus.get(course) ?? RegistrationStatus.Registered])\n        ));\n    };\n\n    const setAllCourseStatus = (status: RegistrationStatus12) => {\n        setCourseToStatus(new Map(\n            courseAndRecordPairs\n                .map(({ course }) => course)\n                .filter((course): course is NonNullable<typeof course> => course !== undefined)\n                .map(course => [course, status])\n        ));\n    }\n\n    return (\n        <>\n            {modals}\n            <Modal size=\"xl\" show={show} onHide={onHide}>\n                <Modal.Header closeButton>\n                    <Modal.Title>科目の履修 / 修得状態をまとめて設定</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <p>\n                        CSVデータから見つかった科目が以下に表示されています。\n                        それぞれの科目を [履修する] / [修得済み] のどちらかに設定し、 [OK] ボタンを押します。\n                        <strong>現在の履修 / 修得状態は失われます。</strong>\n                    </p>\n                    <ButtonGroup className=\"mb-3\">\n                        <Button\n                            variant=\"outline-primary\"\n                            onClick={() => setAllCourseStatus(RegistrationStatus.Registered)}\n                        >\n                            すべて履修する\n                        </Button>\n                        <Button\n                            variant=\"outline-success\"\n                            onClick={() => setAllCourseStatus(RegistrationStatus.Acquired)}\n                        >\n                            すべて修得済み\n                        </Button>\n                    </ButtonGroup>\n                    <Table1\n                        codeColumnIndex={codeColumnIndex}\n                        titleColumnIndex={titleColumnIndex}\n                        creditsCountColumnIndex={creditsCountColumnIndex}\n                        courseAndRecordPairs={courseAndRecordPairs}\n                        courseToStatus={courseToStatus}\n                        setCourseToStatus={setCourseToStatus}\n                    />\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={onHide}>キャンセル</Button>\n                    <Button variant=\"secondary\" onClick={onBack}>戻る</Button>\n                    <Button onClick={handleOKClick}>OK</Button>\n                </Modal.Footer>\n            </Modal>\n        </>\n    );\n}\n\nconst Modal0: React.FC<{\n    codeToCourse: ReadonlyMap<string, Course>,\n    show: boolean,\n    onHide: () => void,\n    onSubmit: ({ courseAndRecordPairs, codeColumnIndex }: {\n        courseAndRecordPairs: readonly CourseAndRecordPair[],\n        codeColumnIndex: number,\n    }) => void,\n}> = ({ codeToCourse, show, onHide, onSubmit }) => {\n    const [csv, setCSV] = useState(\"\");\n    const [validated, setValidated] = useState(false);\n\n    const records: readonly (readonly string[])[] | undefined = safely(parse, csv);\n    const { courseAndRecordPairs, index: codeColumnIndex } = (\n        records === undefined || records.length === 0 ? undefined : records[0]\n            .map((_, index) => records.reduce(({ count, courseAndRecordPairs }, record) => {\n                const code = record[index];\n                const course = codeToCourse.get(code.trim());\n                return {\n                    count: course === undefined ? count : count + 1,\n                    courseAndRecordPairs: [...courseAndRecordPairs, { record, course }],\n                };\n            }, { count: 0, courseAndRecordPairs: new Array<CourseAndRecordPair>() }))\n            .reduce<{\n                count: number;\n                courseAndRecordPairs: readonly CourseAndRecordPair[] | undefined;\n                index: number | undefined;\n            }>((previous, current, index) => {\n                if (current.count > previous.count) {\n                    return { ...current, index };\n                } else {\n                    return previous;\n                }\n            }, {\n                count: 0,\n                courseAndRecordPairs: undefined,\n                index: undefined,\n            })\n    ) ?? {\n        courseAndRecordPairs: undefined,\n        index: undefined,\n    };\n\n    const feedback =\n        records === undefined ? 'CSVの形式が不正です' :\n            records.length === 0 ? 'CSVを入力してください' :\n                codeColumnIndex === undefined ? '科目がひとつも見つかりません' :\n                    undefined;\n\n    const handleCSVChange = (nextCSV: string) => {\n        setCSV(nextCSV);\n        setValidated(true);\n    }\n\n    return (\n        <Modal size=\"lg\" show={show} onHide={onHide}>\n            <Modal.Header closeButton>\n                <Modal.Title>科目の履修 / 修得状態をまとめて設定</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <p>\n                    ひとつの列に履修 / 修得する科目の番号が記述されたCSVデータを用意します。\n                </p>\n                <ul>\n                    <li>TWINS の [成績照会] 画面からダウンロードしたCSVファイルをそのまま使用できます。</li>\n                    <li>科目番号のみを各行に記述したデータも使用できます。</li>\n                </ul>\n                <p>\n                    用意したデータをテキストボックスに貼り付けるか、ファイルとして読み込みます。\n                </p>\n                <Form.Group>\n                    <Form.Label>CSV / 科目番号のリスト</Form.Label>\n                    <Form.Control\n                        as=\"textarea\"\n                        rows={5}\n                        placeholder={placeholder}\n                        value={csv}\n                        className=\"text-monospace\"\n                        onChange={\n                            (event: React.ChangeEvent<HTMLTextAreaElement>) => handleCSVChange(event.target.value)\n                        }\n                        style={{ whiteSpace: 'pre' }}\n                        isInvalid={validated && feedback !== undefined}\n                    />\n                    <Form.Control.Feedback type=\"invalid\">{feedback}</Form.Control.Feedback>\n                </Form.Group>\n                <Form.Group>\n                    <Form.Label>CSVファイル</Form.Label>\n                    <div className=\"custom-file\">\n                        <input\n                            type=\"file\"\n                            accept=\"text/plain\"\n                            className=\"custom-file-input\"\n                            id=\"csv-file-input\"\n                            onChange={\n                                (event: React.ChangeEvent<HTMLInputElement>) => {\n                                    const file = event.target.files?.item(0);\n                                    if (file === null || file === undefined) {\n                                        return;\n                                    }\n                                    const reader = new FileReader();\n                                    reader.addEventListener('load', () => {\n                                        if (typeof reader.result === 'string') {\n                                            handleCSVChange(reader.result);\n                                        }\n                                    });\n                                    reader.readAsText(file);\n                                }\n                            }\n                        />\n                        <label className=\"custom-file-label\" htmlFor=\"csv-file-input\">Choose file</label>\n                    </div>\n                </Form.Group>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={onHide}>キャンセル</Button>\n                {\n                    courseAndRecordPairs === undefined || codeColumnIndex === undefined ?\n                        (<Button disabled>次へ</Button>) :\n                        (<Button onClick={() => onSubmit({ courseAndRecordPairs, codeColumnIndex })}>次へ</Button>)\n                }\n            </Modal.Footer>\n        </Modal>\n    )\n};\n\nconst CollectivelyCourseSetView: React.FC<{\n    codeToCourse: ReadonlyMap<string, Course>,\n    onSubmit: (courseToStatus: ReadonlyMap<Course, RegistrationStatus12>) => void,\n}> = ({ codeToCourse, onSubmit }) => {\n    const [page, setPage] = useState<number | undefined>();\n    const [courseAndRecordPairs, setCourseAndRecordPairs] = useState<readonly CourseAndRecordPair[] | undefined>();\n    const [codeColumnIndex, setCodeColumnIndex] = useState<number | undefined>();\n\n    return (\n        <>\n            <Button variant=\"secondary\" onClick={() => setPage(0)}>科目の履修 / 修得状態をまとめて設定</Button>\n            <Modal0\n                codeToCourse={codeToCourse}\n                show={page === 0}\n                onHide={() => setPage(undefined)}\n                onSubmit={\n                    ({ courseAndRecordPairs, codeColumnIndex }) => {\n                        setCourseAndRecordPairs(courseAndRecordPairs);\n                        setCodeColumnIndex(codeColumnIndex);\n                        setPage(1);\n                    }\n                }\n            />\n            {\n                courseAndRecordPairs === undefined || codeColumnIndex === undefined ? (<></>) : (\n                    <Modal1\n                        courseAndRecordPairs={courseAndRecordPairs}\n                        codeColumnIndex={codeColumnIndex}\n                        show={page === 1}\n                        onHide={() => setPage(undefined)}\n                        onBack={() => setPage(0)}\n                        onSubmit={\n                            (courseToStatus: ReadonlyMap<Course, RegistrationStatus12>) => {\n                                onSubmit(courseToStatus);\n                                setPage(undefined);\n                            }\n                        }\n                    />\n                )\n            }\n        </>\n    )\n}\n\nexport default CollectivelyCourseSetView;","import Course from '../Course';\nimport courses from './courses1.json';\n\nconst codeToCourse = new Map<string, Course>();\n\nfor (const course of courses) {\n    codeToCourse.set(course.code, course);\n}\n\nexport default codeToCourse;","enum FilterType {\n    None,\n    Registered,\n    Valid,\n}\n\nexport default FilterType;","import React from 'react';\nimport { Accordion, Button, Card, Form } from \"react-bootstrap\";\nimport Plan, { toJSON } from \"./Plan\";\n\nconst ExportView = ({ plan, eventKey }: {\n    plan: Plan,\n    eventKey: string,\n}) => (\n        <Card>\n            <Card.Header>\n                <Accordion.Toggle eventKey={eventKey} variant=\"link\" as={Button}>\n                    エクスポート\n                </Accordion.Toggle>\n            </Card.Header>\n            <Accordion.Collapse eventKey={eventKey}>\n                <Card.Body>\n                    <p>テキストボックスの内容をコピーして、テキストファイルなどに保存します。</p>\n                    <Form>\n                        <Form.Group className=\"mb-0\">\n                            <Form.Label>JSON</Form.Label>\n                            <Form.Control\n                                readOnly className=\"input-monospace\"\n                                value={JSON.stringify(toJSON(plan))}\n                                onFocus={(e: React.FocusEvent<HTMLInputElement>) => e.target.select()}\n                            />\n                        </Form.Group>\n                    </Form>\n                </Card.Body>\n            </Accordion.Collapse>\n        </Card>\n    );\n\nexport default ExportView","enum RegistrationStatusLockTarget {\n    Unregistered = 0,\n    Acquired = 2,\n    All = 3,\n    None = 4,\n}\n\nexport default RegistrationStatusLockTarget;","import React, { useState } from 'react';\nimport { Accordion, Button, Card, Form, Modal, useAccordionToggle } from \"react-bootstrap\";\nimport Course from \"./Course\";\nimport getValueFromModal, { useModals } from './getValueFromModal';\nimport Plan, { emptyPlan, fromJSON, toJSON } from \"./Plan\";\nimport { RequirementWithCourses } from \"./Requirements\";\nimport safely from './safely';\n\nconst ImportConfirmationModal = ({ onReturn, onExited }: {\n    onReturn: (value: boolean) => void,\n    onExited: () => void\n}) => {\n    const [show, setShow] = useState(true);\n\n    return (\n        <Modal show={show} onHide={() => { setShow(false); onReturn(false); }} onExited={onExited}>\n            <Modal.Header closeButton>\n                <Modal.Title>インポート</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                インポートすると現在の設定状態は失われますが、よろしいですか？\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={() => { setShow(false); onReturn(false); }}>いいえ</Button>\n                <Button variant=\"danger\" onClick={() => { setShow(false); onReturn(true); }}>はい</Button>\n            </Modal.Footer>\n        </Modal>\n    );\n}\n\nconst ImportView = ({ eventKey, codeToCourse, nameToRequirement, onSubmit }: {\n    eventKey: string,\n    codeToCourse: ReadonlyMap<string, Course>,\n    nameToRequirement: ReadonlyMap<string, RequirementWithCourses>,\n    onSubmit: (nextPlan: Plan) => void,\n}) => {\n    const [jsonText, setJSONText] = useState(\"\");\n    const toggle = useAccordionToggle(eventKey, () => { });\n    const { modals, setModalsAndCount } = useModals();\n\n    const json = safely(JSON.parse, jsonText);\n    const nextPlan = json && safely(fromJSON, json, { codeToCourse, nameToRequirement });\n    const isInvalid = nextPlan === undefined;\n\n    const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        if (\n            nextPlan === undefined ||\n            !await getValueFromModal(ImportConfirmationModal, {}, setModalsAndCount)\n        ) {\n            return;\n        }\n        onSubmit(nextPlan);\n        toggle();\n    };\n\n    return (\n        <>\n            {modals}\n            <Card>\n                <Card.Header>\n                    <Accordion.Toggle eventKey={eventKey} variant=\"link\" as={Button}>\n                        インポート\n                    </Accordion.Toggle>\n                </Card.Header>\n                <Accordion.Collapse eventKey={eventKey}>\n                    <Card.Body>\n                        <p>\n                            テキストボックスに保存したテキストを貼り付けてから、 [インポート] ボタンを押します。\n                            <strong>インポートすると現在の設定状態は失われます。</strong>\n                        </p>\n                        <Form onSubmit={handleSubmit}>\n                            <Form.Group>\n                                <Form.Label>JSON</Form.Label>\n                                <Form.Control\n                                    className=\"input-monospace\" isInvalid={isInvalid}\n                                    value={jsonText} placeholder={JSON.stringify(toJSON(emptyPlan))}\n                                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => setJSONText(e.target.value)}\n                                />\n                                <Form.Control.Feedback type=\"invalid\">JSONが不正です</Form.Control.Feedback>\n                            </Form.Group>\n                            <Button type=\"submit\" disabled={isInvalid}>インポート</Button>\n                        </Form>\n                    </Card.Body>\n                </Accordion.Collapse>\n            </Card>\n        </>\n    );\n}\n\nexport default ImportView;","import Requirements, { isRange, Range, RequirementWithChildren, RequirementWithCourses, SelectionRequirement } from \".\";\nimport Course from \"../Course\";\nimport RequirementsJSON from \"./RequirementsJSON\";\n\ninterface RequirementAndDictionary {\n    readonly requirement: Requirements;\n    readonly nameToRequirement: ReadonlyMap<string, RequirementWithCourses>;\n}\n\nconst numberOrRangeToRange = (numberOrRange: number | Range): Range =>\n    isRange(numberOrRange) ? numberOrRange : {\n        min: numberOrRange,\n        max: numberOrRange,\n    };\n\nconst getInnerRequirementAndDictionaryFromJSON = (\n    json: RequirementsJSON,\n    codeToCourse: ReadonlyMap<string, Course>,\n    selectionNameToCount: Map<string, number>\n): RequirementAndDictionary => {\n    if ('courses' in json) {\n        const requirement = new RequirementWithCourses({\n            name: json.name,\n            description: json.description,\n            creditsCount: numberOrRangeToRange(json.creditsCount),\n            courses: json.courses.map(courseCode => {\n                const course = codeToCourse.get(courseCode);\n                if (course === undefined) { throw new Error(`科目番号 ${courseCode} は定義されていません。`); }\n                return course;\n            }),\n            allowsOthers: json.allowsOthers,\n        });\n        return {\n            requirement,\n            nameToRequirement: new Map([[requirement.name, requirement]]),\n        };\n    } else if ('children' in json) {\n        const requirementAndDictionaryPairs = json.children.map(child => getInnerRequirementAndDictionaryFromJSON(child, codeToCourse, selectionNameToCount));\n        const requirement = new RequirementWithChildren({\n            name: json.name,\n            description: json.description,\n            children: requirementAndDictionaryPairs.map(({ requirement }) => requirement),\n            creditsCount: json.creditsCount === undefined ? undefined : numberOrRangeToRange(json.creditsCount),\n        });\n        return {\n            requirement,\n            nameToRequirement: new Map(\n                requirementAndDictionaryPairs.flatMap(({ nameToRequirement: dictionary }) => [...dictionary.entries()])\n            ),\n        };\n    } else {\n        const selectionCount = selectionNameToCount.get(json.selectionName) || 0;\n        selectionNameToCount.set(json.selectionName, selectionCount + 1);\n        const optionAndDictionaryArray = json.options.map(optionJSON => {\n            if ('requirement' in optionJSON) {\n                const { requirement, nameToRequirement: dictionary } = getInnerRequirementAndDictionaryFromJSON(optionJSON.requirement, codeToCourse, selectionNameToCount);\n                return {\n                    option: { requirement, name: optionJSON.name },\n                    dictionary,\n                };\n            } else {\n                const { requirement, nameToRequirement: dictionary } = getInnerRequirementAndDictionaryFromJSON(optionJSON, codeToCourse, selectionNameToCount);\n                return {\n                    option: { requirement, name: requirement.name },\n                    dictionary,\n                };\n            }\n        })\n        const requirement = new SelectionRequirement({\n            name: `${json.selectionName}_${selectionCount}`,\n            selectionName: json.selectionName,\n            options: optionAndDictionaryArray.map(({ option }) => option),\n        });\n        return {\n            requirement,\n            nameToRequirement: new Map(\n                optionAndDictionaryArray.flatMap(({ dictionary }) => [...dictionary.entries()])\n            )\n        };\n    }\n};\n\nconst getRequirementAndDictionaryFromJSON = (\n    json: RequirementsJSON,\n    codeToCourse: ReadonlyMap<string, Course>\n) => getInnerRequirementAndDictionaryFromJSON(json, codeToCourse, new Map())\n\nexport default getRequirementAndDictionaryFromJSON;\n","import { $number, $object, isCompatible } from \"@hiroto/json-type-checker\";\nimport Course from \"../Course\";\nimport Plan, { RegistrationStatus, RegisteredCreditsCounts } from \"../Plan\";\n\nexport { default as getRequirementAndDictionaryFromJSON } from './getRequirementAndDictionaryFromJSON';\n\ntype Requirements = RequirementWithChildren | RequirementWithCourses | SelectionRequirement;\nexport default Requirements;\n\nabstract class Requirement {\n    abstract getRegisteredCreditsCount(plan: Plan, includesExcess: boolean): RegisteredCreditsCounts;\n    abstract getRequiredCreditsCount(selectionNameToOptionName: ReadonlyMap<string, string>): Range;\n    constructor(readonly name: string) { }\n    getStatus(plan: Plan): RegistrationStatus {\n        const requiredCreditsCount = this.getRequiredCreditsCount(plan.selectionNameToOptionName);\n        const registeredCreditsCounts = this.getRegisteredCreditsCount(plan, false);\n        return registeredCreditsCounts.acquired >= requiredCreditsCount.min ?\n            RegistrationStatus.Acquired :\n            registeredCreditsCounts.registered >= requiredCreditsCount.min ?\n                RegistrationStatus.Registered :\n                RegistrationStatus.Unregistered;\n    };\n}\n\nexport interface Range {\n    min: number;\n    max: number;\n}\nexport const isRange = (obj: unknown): obj is Range => isCompatible(obj, $object({ min: $number, max: $number }));\n\nexport interface RequirementWithChildrenInit {\n    readonly name: string;\n    readonly description?: string;\n    readonly children: Iterable<Requirements>;\n    readonly creditsCount?: Range;\n}\n\nexport class RequirementWithChildren extends Requirement implements RequirementWithChildrenInit {\n    readonly description?: string;\n    readonly children: readonly Requirements[];\n    readonly creditsCount?: Range;\n    constructor({ name, description, children, creditsCount }: RequirementWithChildrenInit) {\n        super(name);\n        this.description = description\n        this.children = [...children];\n        this.creditsCount = creditsCount;\n    }\n    getRegisteredCreditsCount(plan: Plan, includesExcess: boolean): RegisteredCreditsCounts {\n        const creditsCounts = this.children.reduce(\n            (previous, child) => {\n                const childRegisteredCreditsCount = child.getRegisteredCreditsCount(plan, includesExcess);\n                return {\n                    acquired: previous.acquired + childRegisteredCreditsCount.acquired,\n                    registered: previous.registered + childRegisteredCreditsCount.registered,\n                }\n            },\n            { acquired: 0, registered: 0 }\n        );\n        return includesExcess || this.creditsCount === undefined ? creditsCounts : {\n            acquired: Math.min(this.creditsCount.max, creditsCounts.acquired),\n            registered: Math.min(this.creditsCount.max, creditsCounts.registered),\n        };\n    }\n    getRequiredCreditsCount(selectionNameToOptionName: ReadonlyMap<string, string>): Range {\n        return this.creditsCount === undefined ? this.children.reduce((previous, child) => {\n            const childRequiredCreditsCount = child.getRequiredCreditsCount(selectionNameToOptionName);\n            return {\n                min: previous.min + childRequiredCreditsCount.min,\n                max: previous.max + childRequiredCreditsCount.max,\n            }\n        }, { min: 0, max: 0 }) : this.creditsCount;\n    }\n    getStatus(plan: Plan): RegistrationStatus {\n        return Math.min(\n            super.getStatus(plan),\n            ...this.children.map(child => child.getStatus(plan))\n        );\n    };\n}\n\nexport interface RequirementWithCoursesInit {\n    readonly name: string;\n    readonly description?: string;\n    readonly courses: Iterable<Course>;\n    readonly creditsCount: Range;\n    readonly allowsOthers?: boolean;\n}\n\nexport class RequirementWithCourses extends Requirement {\n    readonly description?: string;\n    readonly courses: readonly Course[];\n    readonly creditsCount: Range;\n    readonly allowsOthers: boolean;\n    constructor({ name, description, courses, creditsCount, allowsOthers = false }: RequirementWithCoursesInit) {\n        super(name);\n        this.description = description;\n        this.courses = [...courses];\n        this.creditsCount = creditsCount;\n        this.allowsOthers = allowsOthers;\n    }\n    getRegisteredCreditsCount(plan: Plan, includesExcess: boolean): RegisteredCreditsCounts {\n        const othersCount = plan.requirementToOthersCount.get(this) || { acquired: 0, registered: 0 };\n        const creditsCounts = this.courses.reduce((previous, course): RegisteredCreditsCounts => {\n            const courseStatus = plan.courseToStatus.get(course) || RegistrationStatus.Unregistered;\n            if (plan.courseToRequirement.get(course) === this) {\n                return courseStatus === RegistrationStatus.Acquired ?\n                    {\n                        acquired: previous.acquired + course.creditsCount,\n                        registered: previous.registered + course.creditsCount,\n                    } :\n                    courseStatus === RegistrationStatus.Registered ?\n                        {\n                            acquired: previous.acquired,\n                            registered: previous.registered + course.creditsCount,\n                        } :\n                        previous;\n            } else {\n                return previous;\n            }\n        }, othersCount);\n        return includesExcess || this.creditsCount === undefined ? creditsCounts : {\n            acquired: Math.min(this.creditsCount.max, creditsCounts.acquired),\n            registered: Math.min(this.creditsCount.max, creditsCounts.registered),\n        };\n    }\n    getRequiredCreditsCount() {\n        return this.creditsCount;\n    }\n}\n\ninterface Option {\n    name: string;\n    requirement: Requirements;\n}\n\nexport interface SelectionRequirementInit {\n    readonly name: string;\n    readonly selectionName: string;\n    readonly options: Iterable<Option>;\n}\n\nexport class SelectionRequirement extends Requirement implements SelectionRequirementInit {\n    readonly selectionName: string;\n    readonly options: Option[];\n    readonly optionNameToRequirement: ReadonlyMap<string, Requirements>;\n    constructor({ name, selectionName, options: options0 }: SelectionRequirementInit) {\n        super(name);\n        this.selectionName = selectionName;\n        const options = [...options0]\n        this.options = options;\n        this.optionNameToRequirement = new Map(options.map(({ name, requirement }) => [name, requirement]));\n    }\n    getSelectedOptionName(selectionNameToOptionName: ReadonlyMap<string, string>) {\n        const selectedOptionName = selectionNameToOptionName.get(this.selectionName) || this.options[0].name;\n        return selectedOptionName;\n    }\n    getSelectedRequirement(selectionNameToOptionName: ReadonlyMap<string, string>) {\n        const selectedOptionName = this.getSelectedOptionName(selectionNameToOptionName);\n        const selectedRequirement = this.optionNameToRequirement.get(selectedOptionName);\n        return selectedRequirement;\n    }\n    getRegisteredCreditsCount(plan: Plan, includesExcess: boolean): RegisteredCreditsCounts {\n        const selectedRequirement = this.getSelectedRequirement(plan.selectionNameToOptionName);\n        if (selectedRequirement === undefined) {\n            return { acquired: 0, registered: 0 };\n        } else {\n            return selectedRequirement.getRegisteredCreditsCount(plan, includesExcess);\n        }\n    }\n    getRequiredCreditsCount(selectionNameToOptionName: ReadonlyMap<string, string>): Range {\n        const selectedRequirement = this.getSelectedRequirement(selectionNameToOptionName);\n        if (selectedRequirement === undefined) {\n            return { min: 0, max: 0 };\n        } else {\n            return selectedRequirement.getRequiredCreditsCount(selectionNameToOptionName);\n        }\n    }\n}\n","import codeToCourse from '../courses';\nimport { getRequirementAndDictionaryFromJSON } from '../Requirements';\nimport coins17_0 from './coins17.json';\nimport klis17_0 from './klis17.json';\nimport mast17_0 from './mast17.json';\n\nconst requirementAndDictionaryPairs = new Map([\n    ['coins17', {\n        id: 'coins17',\n        name: '情報科学類 / 2017年度入学',\n        ...getRequirementAndDictionaryFromJSON(coins17_0, codeToCourse)\n    }],\n    ['mast17', {\n        id: 'mast17',\n        name: '情報メディア創成学類 / 2017年度入学',\n        ...getRequirementAndDictionaryFromJSON(mast17_0, codeToCourse)\n    }],\n    ['klis17', {\n        id: 'klis17',\n        name: '知識情報・図書館学類 / 2017年度入学',\n        ...getRequirementAndDictionaryFromJSON(klis17_0, codeToCourse)\n    }],\n]);\n\nexport default requirementAndDictionaryPairs;","import React from 'react';\nimport { Badge } from 'react-bootstrap';\nimport Plan, { RegistrationStatus } from '../Plan';\nimport Requirements, { RequirementWithChildren, RequirementWithCourses } from '../Requirements';\n\nconst CreditsCountLabelDelimiter = () => (<span className=\"text-muted\"> / </span>)\n\nconst ExceededCreditsCountLabel = ({ creditsCount }: { creditsCount: number }) => (\n    <>\n        <span className=\"text-muted\">(</span>\n        +{creditsCount}\n        <span className=\"text-muted\">)</span>\n    </>\n);\n\nconst CreditsCountLabels = ({ requirement, plan }: {\n    requirement: Requirements,\n    plan: Plan,\n}) => {\n    const creditsCount = requirement.getRegisteredCreditsCount(plan, false);\n    const exceededCreditsCount = requirement.getRegisteredCreditsCount(plan, true);\n    const requiredCreditsCount = requirement.getRequiredCreditsCount(plan.selectionNameToOptionName);\n\n    return (\n        <div>\n            <span>\n                <span className=\"text-muted\">習得</span>\n                <> </>\n                <strong className=\"text-success\">{creditsCount.acquired}</strong>\n                {exceededCreditsCount.acquired > creditsCount.acquired ? (<ExceededCreditsCountLabel creditsCount={exceededCreditsCount.acquired - creditsCount.acquired} />) : (<></>)}\n            </span>\n            <CreditsCountLabelDelimiter />\n            <span>\n                <span className=\"text-muted\">履修</span>\n                <> </>\n                <strong className=\"text-primary\">{creditsCount.registered}</strong>\n                {exceededCreditsCount.registered > creditsCount.registered ? (<ExceededCreditsCountLabel creditsCount={exceededCreditsCount.registered - creditsCount.registered} />) : (<></>)}\n            </span>\n            <CreditsCountLabelDelimiter />\n            <span>\n                <span className=\"text-muted\">必要</span>\n                <> </>\n                <strong>\n                    {\n                        requiredCreditsCount.min === requiredCreditsCount.max ?\n                            requiredCreditsCount.min :\n                            `${requiredCreditsCount.min}~${requiredCreditsCount.max}`\n                    }\n                </strong>\n            </span>\n        </div>\n    )\n};\n\nexport const RequirementSummaryView = ({ requirement, plan }: {\n    requirement: RequirementWithChildren | RequirementWithCourses,\n    plan: Plan,\n}) => {\n    const status = requirement.getStatus(plan);\n    return (\n        <>\n            <h5 className=\"d-flex justify-content-between align-items-center\">\n                <div>{requirement.name}</div>\n                <Badge className=\"ml-2 flex-shrink-0\" variant={status === RegistrationStatus.Acquired ? 'success' : status === RegistrationStatus.Registered ? 'primary' : 'secondary'}>\n                    {status === RegistrationStatus.Acquired ? '修得OK' : status === RegistrationStatus.Registered ? '履修OK' : '不足'}\n                </Badge>\n            </h5>\n            <div>\n                {requirement.description === undefined ? (<></>) : (<div className=\"text-muted\">{requirement.description}</div>)}\n                <CreditsCountLabels requirement={requirement} plan={plan} />\n            </div>\n        </>\n    );\n}\n","import React, { useState } from \"react\";\nimport { Button, Card, Modal } from \"react-bootstrap\";\nimport Plan from \"../Plan\";\nimport { RequirementWithCourses } from \"../Requirements\";\nimport { RequirementSummaryView } from \"./RequirementSummaryView\";\n\nconst CourseMovementConfirmationModal = ({ currentRequirement, plan, onReturn, onExited }: {\n    currentRequirement: RequirementWithCourses,\n    plan: Plan,\n    onReturn: (value: boolean) => void,\n    onExited: () => void,\n}) => {\n    const [show, setShow] = useState(true);\n\n    return (\n        <Modal show={show} onHide={() => { setShow(false); onReturn(false); }} onExited={onExited}>\n            <Modal.Header closeButton>\n                <Modal.Title>科目群の割り当てを変更</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <p>\n                    この科目は、すでに以下の科目群に割り当てられています。\n                    <strong>続けると、この科目群への割り当ては解除されます。</strong>\n                </p>\n                <p>各科目に割り当てできる科目群は1つまでです。</p>\n                <Card body>\n                    <RequirementSummaryView requirement={currentRequirement} plan={plan} />\n                </Card>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={() => { setShow(false); onReturn(false); }}>キャンセル</Button>\n                <Button variant=\"primary\" onClick={() => { setShow(false); onReturn(true); }}>続ける</Button>\n            </Modal.Footer>\n        </Modal>\n    );\n};\n\nexport default CourseMovementConfirmationModal;","import { RegistrationStatus } from '../Plan';\nimport RegistrationStatusLockTarget from '../RegistrationStatusLockTarget';\n\nconst getNextStatus = ({ currentStatus, lockTarget }: {\n    currentStatus: RegistrationStatus,\n    lockTarget: RegistrationStatusLockTarget,\n}): RegistrationStatus => {\n    switch (lockTarget) {\n        case RegistrationStatusLockTarget.All:\n            return currentStatus;\n        case RegistrationStatusLockTarget.Acquired:\n        case RegistrationStatusLockTarget.Unregistered:\n            const difference = (3 + lockTarget - currentStatus) % 3;\n            switch (difference) {\n                case 0:\n                    return currentStatus;\n                case 1:\n                    return (currentStatus + 2) % 3;\n                default:\n                    return (currentStatus + 1) % 3;\n            }\n        default:\n            return (currentStatus + 1) % 3;\n    }\n}\n\nexport default getNextStatus;","import React from 'react';\nimport { ListGroup } from 'react-bootstrap';\nimport Course from '../Course';\nimport FilterType from '../FilterType';\nimport Plan, { RegisteredCreditsCounts } from '../Plan';\nimport RegistrationStatusLockTarget from '../RegistrationStatusLockTarget';\nimport { RequirementWithChildren, RequirementWithCourses } from '../Requirements';\nimport InnerRequirementView from './InnerRequirementView';\nimport { RequirementSummaryView } from './RequirementSummaryView';\n\nconst RequirementWithChildrenView = ({ requirement, filterType, lockTarget, plan, onCourseClick, onOthersCountsChange, onSelectionChange }: {\n    requirement: RequirementWithChildren,\n    filterType: FilterType,\n    lockTarget: RegistrationStatusLockTarget,\n    plan: Plan,\n    onCourseClick: (course: Course, requirement: RequirementWithCourses) => void,\n    onOthersCountsChange: (requirement: RequirementWithCourses, newOthersCount: RegisteredCreditsCounts) => void,\n    onSelectionChange: (selectionName: string, newOptionName: string) => void,\n}) => (\n        <>\n            <RequirementSummaryView requirement={requirement} plan={plan} />\n            <ListGroup className=\"mt-3\">\n                {\n                    requirement.children.map(child => (\n                        <ListGroup.Item key={child.name}>\n                            <InnerRequirementView\n                                requirement={child} plan={plan}\n                                filterType={filterType} lockTarget={lockTarget}\n                                onCourseClick={onCourseClick} onSelectionChange={onSelectionChange}\n                                onOthersCountsChange={onOthersCountsChange}\n                            />\n                        </ListGroup.Item>\n                    ))\n                }\n            </ListGroup>\n        </>\n    );\n\nexport default RequirementWithChildrenView;","import React from 'react';\nimport { Badge, ListGroup, OverlayTrigger, Tooltip } from \"react-bootstrap\";\nimport Course from \"../Course\";\nimport Plan, { RegistrationStatus } from '../Plan';\nimport RegistrationStatusLockTarget from '../RegistrationStatusLockTarget';\nimport Requirements, { RequirementWithCourses } from \"../Requirements\";\nimport getNextStatus from './getNextStatus';\n\nconst isRegistrable = ({ course, courseToStatus }: {\n    course: Course,\n    courseToStatus: ReadonlyMap<Course, RegistrationStatus>,\n}) => ![...courseToStatus].some(\n    ([course1, status]) =>\n        course1 !== course && course1.title === course.title && status !== RegistrationStatus.Unregistered\n);\n\nconst CourseListItem = ({ course, onClick, newRequirement, plan, lockTarget }: {\n    course: Course,\n    newRequirement: Requirements,\n    plan: Plan,\n    lockTarget: RegistrationStatusLockTarget,\n    onClick: () => void,\n}) => {\n    const status = plan.courseToStatus.get(course) ?? RegistrationStatus.Unregistered;\n    const currentRequirement = plan.courseToRequirement.get(course);\n    const isRegisteredButInvalid = status !== RegistrationStatus.Unregistered && currentRequirement !== newRequirement;\n    const disabled = !isRegistrable({\n        course,\n        courseToStatus: plan.courseToStatus\n    });\n    const action = getNextStatus({ currentStatus: status, lockTarget }) !== status || isRegisteredButInvalid;\n\n    return (\n        <ListGroup.Item\n            action={action}\n            onClick={onClick}\n            disabled={disabled}\n            variant={\n                isRegisteredButInvalid ? 'dark' :\n                    status === RegistrationStatus.Acquired ? 'success' :\n                        status === RegistrationStatus.Registered ? 'primary' :\n                            undefined\n            }\n        >\n            <div className=\"d-flex justify-content-between align-items-center\">\n                <div>\n                    <div>{course.title}</div>\n                    <code>{course.code}</code>\n                </div>\n                <div className=\"ml-2 text-right flex-shrink-0\">\n                    {\n                        isRegisteredButInvalid ?\n                            (\n                                <OverlayTrigger\n                                    overlay={\n                                        <Tooltip id=\"tooltip1\">\n                                            {\n                                                currentRequirement === undefined ?\n                                                    'この科目はどの科目群にも割り当てられていません。' :\n                                                    'この科目はほかの科目群に割り当てられています。'\n                                            }\n                                        </Tooltip>\n                                    }\n                                >\n                                    {\n                                        currentRequirement === undefined ?\n                                            (<Badge variant=\"secondary\">?</Badge>) :\n                                            (<Badge variant=\"warning\">!</Badge>)\n                                    }\n                                </OverlayTrigger>\n                            ) :\n                            (<></>)\n                    }\n                    <Badge variant={status === RegistrationStatus.Acquired ? 'success' : status === RegistrationStatus.Registered ? 'primary' : 'secondary'}>\n                        {status === RegistrationStatus.Acquired ? '修得済み' : status === RegistrationStatus.Registered ? '履修する' : '履修しない'}\n                    </Badge>\n                    <div><span className=\"text-muted\">単位数</span> <strong>{course.creditsCount}</strong></div>\n                </div>\n            </div>\n        </ListGroup.Item>\n    )\n};\n\nconst CourseList = ({ requirement, courses, plan, onCourseClick, lockTarget }: {\n    requirement: RequirementWithCourses,\n    courses: readonly Course[],\n    plan: Plan,\n    lockTarget: RegistrationStatusLockTarget\n    onCourseClick: (course: Course) => void,\n}) => (\n        <ListGroup>\n            {\n                courses.map((course: Course) => (\n                    <CourseListItem\n                        key={course.code}\n                        course={course} plan={plan}\n                        newRequirement={requirement}\n                        lockTarget={lockTarget}\n                        onClick={() => onCourseClick(course)}\n                    />\n                ))\n            }\n        </ListGroup>\n    );\n\nexport default CourseList;","import React, { useState } from 'react';\nimport { Accordion, Button, ButtonToolbar, Card, Col, Form } from 'react-bootstrap';\nimport Course from '../Course';\nimport FilterType from '../FilterType';\nimport Plan, { RegisteredCreditsCounts, RegistrationStatus } from '../Plan';\nimport RegistrationStatusLockTarget from '../RegistrationStatusLockTarget';\nimport { RequirementWithCourses } from '../Requirements';\nimport CourseList from './CourseList';\nimport { RequirementSummaryView } from './RequirementSummaryView';\n\n\nconst OthersCountInput = ({ currentOthersCount, onReturn, onHide }: {\n    currentOthersCount: RegisteredCreditsCounts,\n    onReturn: (newOthersCount: RegisteredCreditsCounts) => void,\n    onHide: () => void,\n}) => {\n    const [acquired, setAcquired] = useState<number | undefined>();\n    const [registeredExcludingAcquired, setRegisteredExcludingAcquired] = useState<number | undefined>();\n    const [registeredIncludingAcquired, setRegisteredIncludingAcquired] = useState<number | undefined>();\n\n    const computed = {\n        acquired: acquired ?? currentOthersCount.acquired,\n        registered:\n            registeredIncludingAcquired !== undefined ?\n                registeredIncludingAcquired :\n                registeredExcludingAcquired !== undefined ?\n                    (acquired !== undefined ? acquired : currentOthersCount.acquired) + registeredExcludingAcquired :\n                    acquired !== undefined ?\n                        currentOthersCount.registered + acquired - currentOthersCount.acquired :\n                        currentOthersCount.registered,\n    }\n\n    return (\n        <Card border=\"primary\">\n            <Card.Header>単位数を入力</Card.Header>\n            <Card.Body>\n                <Form onSubmit={(e: React.FormEvent<HTMLFormElement>) => {\n                    e.preventDefault();\n                    onReturn(computed);\n                    onHide();\n                }}>\n                    <Form.Row>\n                        <Form.Group as={Col} md=\"4\">\n                            <Form.Label>習得済みの単位数 <span className=\"text-muted\">(a)</span></Form.Label>\n                            <Form.Control\n                                type=\"number\" min={0}\n                                placeholder={`${computed.acquired}`}\n                                value={acquired === undefined ? '' : `${acquired}`}\n                                onChange={\n                                    (e: React.ChangeEvent<HTMLInputElement>) =>\n                                        setAcquired(e.target.value === '' ? undefined : +e.target.value)\n                                }\n                                isInvalid={computed.acquired < 0}\n                            />\n                            <Form.Control.Feedback type=\"invalid\">(a) &gt;= 0</Form.Control.Feedback>\n                        </Form.Group>\n                        <Form.Group as={Col} md=\"4\">\n                            <Form.Label>履修する単位数 <span className=\"text-muted\">(b)</span></Form.Label>\n                            <Form.Control\n                                type=\"number\" min={0}\n                                placeholder={`${computed.registered - computed.acquired}`}\n                                value={registeredExcludingAcquired === undefined ? '' : `${registeredExcludingAcquired}`}\n                                onChange={\n                                    (e: React.ChangeEvent<HTMLInputElement>) => {\n                                        if (e.target.value === '') {\n                                            setRegisteredExcludingAcquired(undefined);\n                                        } else {\n                                            setRegisteredExcludingAcquired(+e.target.value);\n                                            setRegisteredIncludingAcquired(undefined);\n                                        }\n                                    }\n                                }\n                                isInvalid={computed.acquired > computed.registered}\n                            />\n                            <Form.Control.Feedback type=\"invalid\">(b) &gt;= 0</Form.Control.Feedback>\n                        </Form.Group>\n                        <Form.Group as={Col} md=\"4\">\n                            <Form.Label>計 <span className=\"text-muted\">(a) + (b)</span></Form.Label>\n                            <Form.Control\n                                type=\"number\" min={0}\n                                placeholder={`${computed.registered}`}\n                                value={registeredIncludingAcquired === undefined ? '' : `${registeredIncludingAcquired}`}\n                                onChange={\n                                    (e: React.ChangeEvent<HTMLInputElement>) => {\n                                        if (e.target.value === '') {\n                                            setRegisteredIncludingAcquired(undefined);\n                                        } else {\n                                            setRegisteredIncludingAcquired(+e.target.value);\n                                            setRegisteredExcludingAcquired(undefined);\n                                        }\n                                    }\n                                }\n                            />\n                        </Form.Group>\n                    </Form.Row>\n                    <ButtonToolbar>\n                        <Button\n                            type=\"submit\"\n                            disabled={computed.acquired < 0 || computed.acquired > computed.registered}\n                        >\n                            OK\n                        </Button>\n                        <Button variant=\"secondary\" onClick={onHide}>キャンセル</Button>\n                    </ButtonToolbar>\n                </Form>\n            </Card.Body>\n        </Card>\n    )\n}\n\nconst RequirementWithCoursesView = ({ requirement, filterType, lockTarget, plan, onCourseClick, onOthersCountsChange }: {\n    requirement: RequirementWithCourses,\n    filterType: FilterType,\n    lockTarget: RegistrationStatusLockTarget,\n    plan: Plan,\n    onCourseClick: (course: Course, requirement: RequirementWithCourses) => void,\n    onOthersCountsChange: (newOthersCount: RegisteredCreditsCounts) => void,\n}) => {\n    const [isOpen, setIsOpen] = useState(false);\n    const [showsInput, setShowsInput] = useState(false);\n\n    const courses = requirement.courses.filter(course =>\n        filterType === FilterType.None ||\n        (plan.courseToStatus.has(course) && plan.courseToStatus.get(course) !== RegistrationStatus.Unregistered)\n    ).filter(course => filterType !== FilterType.Valid || requirement === plan.courseToRequirement.get(course));\n\n    return (\n        <>\n            <Accordion activeKey={isOpen ? '0' : ''}>\n                <div className={`bg-white ${isOpen ? 'sticky-top' : ''}`}>\n                    <RequirementSummaryView requirement={requirement} plan={plan} />\n                    {\n                        courses.length === 0 ?\n                            requirement.allowsOthers ? (\n                                showsInput ? (<></>) : (\n                                    <Button block className=\"mt-3\" variant=\"secondary\" onClick={() => setShowsInput(true)}>\n                                        単位数を入力\n                                    </Button>\n                                )\n                            ) : (\n                                    <Button block className=\"mt-3\" variant=\"outline-secondary\" disabled>\n                                        {filterType === FilterType.None ? '' : '履修する'}科目はありません\n                                    </Button>\n                                ) : (\n                                <Button\n                                    block className=\"mt-3\"\n                                    onClick={() => setIsOpen(!isOpen)}\n                                    variant={isOpen ? 'primary' : 'outline-secondary'}\n                                >\n                                    {filterType === FilterType.None ? '' : '履修する'}科目を{isOpen ? '非' : ''}表示\n                                </Button>\n                            )\n                    }\n                </div>\n                {\n                    showsInput ? (\n                        <div className=\"mt-3\">\n                            <OthersCountInput\n                                currentOthersCount={plan.requirementToOthersCount.get(requirement) || { acquired: 0, registered: 0 }}\n                                onReturn={onOthersCountsChange} onHide={() => setShowsInput(false)}\n                            />\n                        </div>\n                    ) : (<></>)\n                }\n                <Accordion.Collapse eventKey=\"0\">\n                    {\n                        courses.length === 0 ? (<></>) : (\n                            <div className=\"mt-3\">\n                                <CourseList\n                                    courses={courses} plan={plan}\n                                    requirement={requirement} lockTarget={lockTarget}\n                                    onCourseClick={course => onCourseClick(course, requirement)}\n                                />\n                            </div>\n                        )\n                    }\n                </Accordion.Collapse>\n            </Accordion>\n        </>\n    );\n}\n\nexport default RequirementWithCoursesView;","import React from 'react';\nimport { Dropdown } from 'react-bootstrap';\nimport Course from '../Course';\nimport FilterType from '../FilterType';\nimport Plan, { RegisteredCreditsCounts } from '../Plan';\nimport RegistrationStatusLockTarget from '../RegistrationStatusLockTarget';\nimport { RequirementWithCourses, SelectionRequirement } from '../Requirements';\nimport InnerRequirementView from './InnerRequirementView';\n\nconst SelectionRequirementView = ({ requirement, filterType, lockTarget, plan, onCourseClick, onOthersCountsChange, onSelectionChange }: {\n    requirement: SelectionRequirement,\n    filterType: FilterType,\n    lockTarget: RegistrationStatusLockTarget,\n    plan: Plan,\n    onCourseClick: (course: Course, requirement: RequirementWithCourses) => void,\n    onOthersCountsChange: (requirement: RequirementWithCourses, newOthersCount: RegisteredCreditsCounts) => void,\n    onSelectionChange: (selectionName: string, newOptionName: string) => void,\n}) => {\n    const selectedOptionName = requirement.getSelectedOptionName(plan.selectionNameToOptionName);\n    const selectedRequirement = requirement.getSelectedRequirement(plan.selectionNameToOptionName);\n\n    const handleOptionClick = (newOptionName: string) => {\n        if (selectedOptionName !== newOptionName) {\n            onSelectionChange(requirement.selectionName, newOptionName);\n        }\n    };\n\n    return (\n        <>\n            <Dropdown>\n                <Dropdown.Toggle id=\"\" variant=\"secondary\" disabled={filterType === FilterType.Valid}>\n                    <span\n                        style={{\n                            overflow: 'hidden',\n                            textOverflow: 'ellipsis',\n                        }}\n                    >\n                        {requirement.selectionName}\n                        <> : </>\n                        <strong>{selectedOptionName}</strong>\n                    </span>\n                </Dropdown.Toggle>\n\n                <Dropdown.Menu style={{ zIndex: 1100 }}>\n                    {\n                        requirement.options.map(option => (\n                            <Dropdown.Item key={option.name}\n                                active={option.name === selectedOptionName}\n                                onClick={() => handleOptionClick(option.name)}\n                            >\n                                {option.name}\n                            </Dropdown.Item>\n                        ))\n                    }\n                </Dropdown.Menu>\n            </Dropdown>\n            {\n                selectedRequirement === undefined ? (<></>) : (\n                    <div className=\"mt-3\">\n                        <InnerRequirementView\n                            requirement={selectedRequirement} plan={plan}\n                            filterType={filterType} lockTarget={lockTarget}\n                            onCourseClick={onCourseClick} onOthersCountsChange={onOthersCountsChange}\n                            onSelectionChange={onSelectionChange}\n                        />\n                    </div>\n                )\n            }\n        </>\n    );\n}\n\nexport default SelectionRequirementView;","import React from 'react';\nimport Course from \"../Course\";\nimport FilterType from '../FilterType';\nimport Plan, { RegisteredCreditsCounts } from '../Plan';\nimport RegistrationStatusLockTarget from '../RegistrationStatusLockTarget';\nimport Requirements, { RequirementWithChildren, RequirementWithCourses } from \"../Requirements\";\nimport RequirementWithChildrenView from './RequirementWithChildrenView';\nimport RequirementWithCoursesView from './RequirementWithCoursesView';\nimport SelectionRequirementView from './SelectionRequirementView';\n\nconst InnerRequirementView = ({ requirement, filterType, lockTarget, plan, onCourseClick, onOthersCountsChange, onSelectionChange }: {\n    requirement: Requirements,\n    filterType: FilterType,\n    lockTarget: RegistrationStatusLockTarget,\n    plan: Plan,\n    onCourseClick: (course: Course, requirement: RequirementWithCourses) => void,\n    onOthersCountsChange: (requirement: RequirementWithCourses, newOthersCount: RegisteredCreditsCounts) => void,\n    onSelectionChange: (selectionName: string, newOptionName: string) => void,\n}) => {\n    if (requirement instanceof RequirementWithChildren) {\n        return (\n            <RequirementWithChildrenView\n                requirement={requirement} plan={plan}\n                filterType={filterType} lockTarget={lockTarget}\n                onCourseClick={onCourseClick} onOthersCountsChange={onOthersCountsChange} onSelectionChange={onSelectionChange}\n            />\n        )\n    } else if (requirement instanceof RequirementWithCourses) {\n        return (\n            <RequirementWithCoursesView\n                requirement={requirement} plan={plan}\n                filterType={filterType} lockTarget={lockTarget}\n                onCourseClick={onCourseClick}\n                onOthersCountsChange={creditsCounts => onOthersCountsChange(requirement, creditsCounts)}\n            />\n        )\n    } else {\n        return (\n            <SelectionRequirementView\n                requirement={requirement} plan={plan}\n                filterType={filterType} lockTarget={lockTarget}\n                onCourseClick={onCourseClick} onOthersCountsChange={onOthersCountsChange} onSelectionChange={onSelectionChange}\n            />\n        );\n    }\n}\n\nexport default InnerRequirementView;\n","import React from 'react';\nimport Course from '../Course';\nimport FilterType from '../FilterType';\nimport getValueFromModal, { useModals } from '../getValueFromModal';\nimport Plan, { RegisteredCreditsCounts, RegistrationStatus } from '../Plan';\nimport RegistrationStatusLockTarget from '../RegistrationStatusLockTarget';\nimport Requirements, { RequirementWithChildren, RequirementWithCourses, SelectionRequirement } from '../Requirements';\nimport CourseMovementConfirmationModal from './CourseMovementConfirmationModal';\nimport getNextStatus from './getNextStatus';\nimport InnerRequirementView from './InnerRequirementView';\n\nconst RequirementView = ({ requirement, plan, filterType, lockTarget, onChange }: {\n    requirement: Requirements,\n    filterType: FilterType,\n    lockTarget: RegistrationStatusLockTarget,\n    plan: Plan,\n    onChange: (newPlan: Plan) => void,\n}) => {\n    const { courseToStatus, courseToRequirement, requirementToOthersCount, selectionNameToOptionName } = plan;\n    const { modals, setModalsAndCount } = useModals();\n\n    const handleCourseClick = async (course: Course, requirement: RequirementWithCourses) => {\n        const currentStatus: RegistrationStatus = courseToStatus.get(course) || RegistrationStatus.Unregistered;\n        const currentRequirement = courseToRequirement.get(course);\n        let nextCourseToStatus = courseToStatus;\n        if (currentStatus === RegistrationStatus.Unregistered || currentRequirement === requirement) {\n            const nextStatus = getNextStatus({ currentStatus, lockTarget });\n            nextCourseToStatus = new Map([...courseToStatus, [course, nextStatus]]);\n        } else if (\n            currentRequirement !== undefined &&\n            !await getValueFromModal(\n                CourseMovementConfirmationModal,\n                { currentRequirement, plan },\n                setModalsAndCount\n            )\n        ) {\n            return;\n        }\n        onChange({\n            ...plan,\n            courseToStatus: nextCourseToStatus,\n            courseToRequirement: new Map([...courseToRequirement, [course, requirement]]),\n        });\n    }\n\n    const clearCourseToRequirement = (requirement: Requirements, newCourseToRequirement: Map<Course, RequirementWithCourses>) => {\n        if (requirement instanceof RequirementWithChildren) {\n            for (const child of requirement.children) {\n                clearCourseToRequirement(child, newCourseToRequirement);\n            }\n        } else if (requirement instanceof RequirementWithCourses) {\n            for (const course of requirement.courses) {\n                if (newCourseToRequirement.get(course) === requirement) {\n                    newCourseToRequirement.delete(course);\n                }\n            }\n        } else {\n            const selectedRequirement = requirement.getSelectedRequirement(selectionNameToOptionName);\n            if (selectedRequirement !== undefined) {\n                clearCourseToRequirement(selectedRequirement, newCourseToRequirement);\n            }\n        }\n    }\n\n    const clearCourseToRequirementInSelection = (selectionName: string, requirement: Requirements, newCourseToRequirement: Map<Course, RequirementWithCourses>) => {\n        if (requirement instanceof RequirementWithChildren) {\n            for (const child of requirement.children) {\n                clearCourseToRequirementInSelection(selectionName, child, newCourseToRequirement);\n            }\n        } else if (requirement instanceof SelectionRequirement && requirement.selectionName === selectionName) {\n            clearCourseToRequirement(requirement, newCourseToRequirement);\n        }\n    }\n\n    const handleOthersCountsChange = (requirement: RequirementWithCourses, newOthersCount: RegisteredCreditsCounts) => {\n        onChange({\n            ...plan,\n            requirementToOthersCount: new Map([\n                ...requirementToOthersCount,\n                [requirement, newOthersCount]\n            ]),\n        });\n    }\n\n    const handleSelectionChange = (selectionName: string, newOptionName: string) => {\n        const newCourseToRequirement = new Map(courseToRequirement);\n        clearCourseToRequirementInSelection(selectionName, requirement, newCourseToRequirement);\n        onChange({\n            ...plan,\n            courseToRequirement: newCourseToRequirement,\n            selectionNameToOptionName: new Map([...selectionNameToOptionName, [selectionName, newOptionName]]),\n        });\n    }\n\n    return (\n        <>\n            {modals}\n            <InnerRequirementView\n                requirement={requirement} plan={plan}\n                filterType={filterType} lockTarget={lockTarget}\n                onCourseClick={handleCourseClick} onOthersCountsChange={handleOthersCountsChange}\n                onSelectionChange={handleSelectionChange}\n            />\n        </>\n    );\n}\n\nexport default RequirementView;","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React, { useState } from 'react';\nimport { Accordion, Alert, Container, Dropdown, Form, Navbar } from 'react-bootstrap';\nimport { HashRouter, Link, Redirect, Route, Switch, useParams } from 'react-router-dom';\nimport { useLocalStorage } from 'react-use';\nimport './App.css';\nimport CollectivelyCourseSetView from './CollectivelyCourseSetView';\nimport codeToCourse from './courses';\nimport ExportView from './ExportView';\nimport FilterType from './FilterType';\nimport ImportView from './ImportView';\nimport Plan, { emptyPlan, fromJSON, PlanJSON, toJSON } from './Plan';\nimport RegistrationStatusLockTarget from './RegistrationStatusLockTarget';\nimport requirementAndDictionaryPairs from './requirementInstances';\nimport Requirements, { RequirementWithCourses } from './Requirements';\nimport RequirementView from './RequirementView';\n\nconst RequirementWithConfiguration: React.FC<{\n    requirement: Requirements,\n    nameToRequirement: ReadonlyMap<string, RequirementWithCourses>,\n    plan: Plan,\n    setPlan: (nextPlan: Plan) => void,\n}> = ({ requirement, nameToRequirement, plan, setPlan }) => {\n    const [filterType, setFilterType] = useState(FilterType.None);\n    const { lockTarget, setLockTarget } = useLockTarget(filterType);\n\n    return (\n        <>\n            <Accordion className=\"mb-3\">\n                <ExportView eventKey=\"0\" plan={plan} />\n                <ImportView\n                    eventKey=\"1\"\n                    onSubmit={setPlan}\n                    codeToCourse={codeToCourse}\n                    nameToRequirement={nameToRequirement}\n                />\n            </Accordion>\n            <div className=\"mb-3\">\n                <CollectivelyCourseSetView\n                    codeToCourse={codeToCourse}\n                    onSubmit={courseToStatus => setPlan({ ...plan, courseToStatus })}\n                />\n            </div>\n            <Form.Group>\n                <Form.Label>科目の履修状態のロック</Form.Label>\n                {\n                    [\n                        {\n                            label: \"ロックしない\",\n                            lockTarget: RegistrationStatusLockTarget.None,\n                            disabled: filterType !== FilterType.None,\n                        },\n                        {\n                            label: \"[履修する] と [修得済み] の間の変更のみ許可\",\n                            lockTarget: RegistrationStatusLockTarget.Unregistered,\n                        },\n                        {\n                            label: \"[履修しない] と [履修する] の間の変更のみ許可\",\n                            lockTarget: RegistrationStatusLockTarget.Acquired,\n                            disabled: filterType !== FilterType.None,\n                        },\n                        {\n                            label: \"すべてロックする\",\n                            lockTarget: RegistrationStatusLockTarget.All,\n                        },\n                    ].map(({ label, disabled, lockTarget: lockTarget1 }) => (\n                        <Form.Check\n                            custom type=\"radio\"\n                            id={`lockTargetCheck${lockTarget1}`}\n                            label={label} key={lockTarget1}\n                            disabled={disabled}\n                            checked={lockTarget === lockTarget1}\n                            onChange={() => setLockTarget(lockTarget1)}\n                        />\n                    ))\n                }\n            </Form.Group>\n            <Form.Group>\n                <Form.Check\n                    custom\n                    id=\"filterTypeCheck0\"\n                    label=\"履修する科目のみ表示する\"\n                    checked={filterType !== FilterType.None}\n                    onChange={\n                        () => {\n                            if (filterType === FilterType.None) {\n                                setFilterType(FilterType.Registered);\n                            } else {\n                                setFilterType(FilterType.None);\n                            }\n                        }\n                    }\n                />\n                <Form.Check\n                    custom\n                    id=\"filterTypeCheck1\"\n                    label=\"単位数の計算に含まれる科目のみ表示する\"\n                    checked={filterType === FilterType.Valid}\n                    onChange={\n                        () => {\n                            if (filterType === FilterType.Valid) {\n                                setFilterType(FilterType.Registered);\n                            } else {\n                                setFilterType(FilterType.Valid);\n                            }\n                        }\n                    }\n                />\n            </Form.Group>\n            <hr />\n            <div className=\"mb-3\">\n                <RequirementView\n                    requirement={requirement}\n                    lockTarget={lockTarget} filterType={filterType}\n                    plan={plan} onChange={setPlan}\n                />\n            </div>\n        </>\n    );\n}\n\nconst InnerMain: React.FC<{ selectedId: string }> = ({ selectedId }) => {\n    const { plan, setPlan } = usePlan(selectedId);\n\n    const {\n        requirement,\n        nameToRequirement,\n        name: selectedName,\n    } = requirementAndDictionaryPairs.get(selectedId) ?? {};\n    if (requirement === undefined || nameToRequirement === undefined || selectedName === undefined) {\n        return (<Redirect to=\"/\" />);\n    }\n\n    return (\n        <>\n            <Alert variant=\"danger\" className=\"my-3\">\n                このツールの結果を利用する場合、必ず履修要覧や支援室などでその結果が正しいことを確認するようにしてください。\n                <strong>科目や要件の定義が誤っていることや、実際には認められない履修の組み合わせが存在することがあります。</strong>\n            </Alert>\n            <Dropdown className=\"mb-3\">\n                <Dropdown.Toggle id=\"department-dropdown\" variant=\"secondary\">\n                    <span\n                        style={{\n                            overflow: 'hidden',\n                            textOverflow: 'ellipsis',\n                        }}\n                    >\n                        学類\n                    <> : </>\n                        <strong>{selectedName}</strong>\n                    </span>\n                </Dropdown.Toggle>\n                <Dropdown.Menu>\n                    {\n                        [...requirementAndDictionaryPairs.values()].map(\n                            ({ id, name }) => (\n                                <Dropdown.Item as={Link} to={`/${id}`} active={id === selectedId} key={id}>\n                                    {name}\n                                </Dropdown.Item>\n                            )\n                        )\n                    }\n                </Dropdown.Menu>\n            </Dropdown>\n            <RequirementWithConfiguration requirement={requirement} nameToRequirement={nameToRequirement} plan={plan} setPlan={setPlan} />\n        </>\n    );\n}\n\nconst Main: React.FC = () => {\n    const { requirementId } = useParams();\n    if (requirementId === undefined) {\n        return (<Redirect to=\"/\" />);\n    } else {\n        return (<InnerMain selectedId={requirementId} />);\n    }\n}\n\nconst App: React.FC = () => (\n    <HashRouter>\n        <Navbar variant=\"dark\" bg=\"dark\">\n            <Navbar.Brand>卒業要件を満たしたい</Navbar.Brand>\n        </Navbar>\n        <Container>\n            <Switch>\n                <Route path=\"/:requirementId\">\n                    <Main />\n                </Route>\n                <Route path=\"/\">\n                    <Redirect to=\"/coins17\" />\n                </Route>\n            </Switch>\n        </Container>\n    </HashRouter>\n);\n\nconst useLockTarget = (filterType: FilterType) => {\n    const [lockTarget, setLockTarget] = useState(RegistrationStatusLockTarget.None);\n\n    if (filterType === FilterType.None) {\n        return { lockTarget, setLockTarget };\n    } else if (lockTarget === RegistrationStatusLockTarget.None) {\n        return {\n            lockTarget: RegistrationStatusLockTarget.Unregistered,\n            setLockTarget,\n        };\n    } else if (lockTarget === RegistrationStatusLockTarget.Acquired) {\n        return {\n            lockTarget: RegistrationStatusLockTarget.All,\n            setLockTarget,\n        };\n    } else {\n        return { lockTarget, setLockTarget };\n    }\n}\n\nconst COURSES_STATE = \"courses-state\"\n\nconst usePlanMap = () => {\n    const [storedJSON, setStoredJSON] = useLocalStorage<readonly (readonly [string, PlanJSON])[]>(COURSES_STATE);\n    const [planMap0, setPlanMap0] = useState(() => {\n        try {\n            const storedPlanEntries = storedJSON.map(([requirementName, planJSON]) => {\n                const nameToRequirement = requirementAndDictionaryPairs.get(requirementName)?.nameToRequirement;\n                if (nameToRequirement === undefined) {\n                    return undefined;\n                } else {\n                    try {\n                        return [requirementName, fromJSON(planJSON, { codeToCourse, nameToRequirement })] as const;\n                    } catch {\n                        return undefined;\n                    }\n                }\n            }).filter((value): value is NonNullable<typeof value> => value !== undefined);\n            const storedPlanMap: ReadonlyMap<string, Plan> = new Map(storedPlanEntries);\n            return storedPlanMap;\n        } catch {\n            const storedPlanMap: ReadonlyMap<string, Plan> = new Map();\n            return storedPlanMap;\n        }\n    });\n    const setPlanMap = (newPlanMap: ReadonlyMap<string, Plan>) => {\n        const planJSONEntries = [...newPlanMap].map(([requirementName, plan]) => [requirementName, toJSON(plan)] as const);\n        setPlanMap0(newPlanMap);\n        setStoredJSON(planJSONEntries);\n    };\n    return {\n        planMap: planMap0,\n        setPlanMap,\n    };\n}\n\nconst usePlan = (requirementName: string) => {\n    const { planMap, setPlanMap } = usePlanMap();\n\n    const plan = planMap.get(requirementName) || emptyPlan;\n    const setPlan = (newPlan: Plan) => {\n        const newPlanMap = new Map([\n            ...planMap,\n            [requirementName, newPlan]\n        ]);\n        setPlanMap(newPlanMap);\n    };\n\n    return { plan, setPlan };\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'react-app-polyfill/stable';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}