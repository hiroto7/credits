{"version":3,"sources":["courses/index.ts","RegistrationStatus.ts","Plan.ts","ExportAndImportView.tsx","Requirements.ts","requirements/index.ts","RequirementSelector.tsx","CourseList.tsx","RequirementView.tsx","CourseMovementConfirmationModal.tsx","getValueFromModal.tsx","RequirementsRootView.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["codeToCourse","Map","courses","course","set","code","RegistrationStatus","toJSON","courseToStatus","courseToRequirement","requirementToOthersCount","selectionNameToOptionName","map","status","requirement","name","creditsCounts","fromJSON","json","nameToRequirement","get","undefined","Error","courseCode","requirementName","emptyPlan","ExportAndImportView","plan","onHide","onReturn","useState","JSON","stringify","jsonString","setJSONString","nextPlan","parse","isInvalid","Card","Header","Body","Form","Group","Label","Control","className","value","onChange","e","target","Feedback","type","ButtonToolbar","Button","variant","disabled","onClick","Requirement","requiredCreditsCount","this","getRequiredCreditsCount","registeredCreditsCounts","getRegisteredCreditsCount","acquired","min","Acquired","registered","Registered","Unregistered","RequirementWithChildren","description","children","creditsCount","includesExcess","reduce","previous","child","childRegisteredCreditsCount","Math","max","childRequiredCreditsCount","getStatus","RequirementWithCourses","allowsOthers","othersCount","courseStatus","SelectionRequirement","selectionName","options0","options","optionNameToRequirement","selectedOptionName","getSelectedOptionName","selectedRequirement","getSelectedRequirement","numberOrRangeToRange","numberOrRange","obj","isCompatible","$object","$number","getRequirementAndDictionaryFromJSON","selectionNameToCount","dictionary","requirementAndDictionaryArray","flatMap","entries","selectionCount","optionAndDictionaryArray","optionJSON","option","requirementAndDictionaryMap","coins17_0","mast17_0","klis17_0","defaultSelected","RequirementSelector","as","newRequirementName","CourseListItem","currentRequirement","newRequirement","ListGroup","Item","action","title","Badge","CourseList","onCourseClick","key","has","filter","includes","CreditsCountLabelDelimiter","ExceededCreditsCountLabel","CreditsCountLabels","exceededCreditsCount","RequirementSummaryView","RequirementWithChildrenView","showsOnlyRegistered","onOthersCountsChange","onSelectionChange","OthersCountInput","currentOthersCount","setAcquired","registeredExcludingAcquired","setRegisteredExcludingAcquired","registeredIncludingAcquired","setRegisteredIncludingAcquired","computed","border","onSubmit","preventDefault","Row","Col","md","controlId","placeholder","RequirementWithCoursesView","isOpen","setIsOpen","showsInput","setShowsInput","Accordion","activeKey","length","block","Collapse","eventKey","SelectionRequirementView","Dropdown","Toggle","id","style","overflow","textOverflow","Menu","zIndex","active","newOptionName","RequirementView","CourseMovementConfirmationModal","onExited","show","setShow","Modal","body","Footer","initialModalsAndCount","modals","count","getValueFromModal","ModalType","props","setModalsAndCount","a","async","Promise","resolve","reject","modal","RequirementsRootView","modalsAndCount","useModals","clearCourseToRequirementInSelection","newCourseToRequirement","clearCourseToRequirement","delete","currentStatus","newCourseToStatus","newOthersCount","usePlan","useLocalStorage","storedJSON","setStoredJSON","storedPlanEntries","planJSON","requirementAndDictionary","planMap0","setPlanMap0","planMap","setPlanMap","newPlanMap","planJSONEntries","usePlanMap","setPlan","newPlan","App","selected","setSelected","setShowsOnlyRegistered","showsExportAndImportView","setShowsExportAndImportView","Navbar","bg","Brand","Container","Alert","Check","custom","label","checked","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.635e3407.chunk.js","sourcesContent":["import Course from '../Course';\nimport courses from './courses1.json';\n\nconst codeToCourse = new Map<string, Course>();\n\nfor (const course of courses) {\n    codeToCourse.set(course.code, course);\n}\n\nexport default codeToCourse;","enum RegistrationStatus {\n    Unregistered = 0,\n    Registered = 1,\n    Acquired = 2,\n}\n\nexport default RegistrationStatus;","import Course from \"./Course\";\nimport RegistrationStatus from \"./RegistrationStatus\";\nimport { RegisteredCreditsCounts, RequirementWithCourses } from \"./Requirements\";\n\nexport type CourseCode = string;\nexport type RequirementName = string;\n\nexport interface PlanJSON {\n    readonly courseToStatus: readonly [CourseCode, RegistrationStatus][];\n    readonly courseToRequirement: readonly [CourseCode, RequirementName][];\n    readonly requirementToOthersCount: readonly [RequirementName, RegisteredCreditsCounts][];\n    readonly selectionNameToOptionName: readonly [string, string][];\n}\n\nexport default interface Plan {\n    readonly courseToStatus: ReadonlyMap<Course, RegistrationStatus>;\n    readonly courseToRequirement: ReadonlyMap<Course, RequirementWithCourses>;\n    readonly requirementToOthersCount: ReadonlyMap<RequirementWithCourses, RegisteredCreditsCounts>;\n    readonly selectionNameToOptionName: ReadonlyMap<string, string>;\n}\n\nexport const toJSON =\n    ({ courseToStatus, courseToRequirement, requirementToOthersCount, selectionNameToOptionName }: Plan): PlanJSON => ({\n        courseToStatus: [...courseToStatus].map(([course, status]) => [course.code, status]),\n        courseToRequirement: [...courseToRequirement].map(([course, requirement]) => [course.code, requirement.name]),\n        requirementToOthersCount: [...requirementToOthersCount].map(([requirement, creditsCounts]) => [requirement.name, creditsCounts]),\n        selectionNameToOptionName: [...selectionNameToOptionName],\n    });\n\nexport const fromJSON = (json: PlanJSON, { codeToCourse, nameToRequirement }: {\n    codeToCourse: ReadonlyMap<CourseCode, Course>,\n    nameToRequirement: ReadonlyMap<RequirementName, RequirementWithCourses>,\n}): Plan => {\n    const courseToStatus = new Map([...json.courseToStatus].map(([code, status]) => {\n        const course = codeToCourse.get(code);\n        if (course === undefined) { throw new Error(); }\n        return [course, status];\n    }));\n\n    const courseToRequirement = new Map([...json.courseToRequirement].map(([courseCode, requirementName]) => {\n        const course = codeToCourse.get(courseCode);\n        const requirement = nameToRequirement.get(requirementName);\n\n        if (course === undefined) { throw new Error(); }\n        if (requirement === undefined) { throw new Error(); }\n\n        return [course, requirement];\n    }));\n\n    const requirementToOthersCount = new Map([...json.requirementToOthersCount].map(([requirementName, creditsCounts]) => {\n        const requirement = nameToRequirement.get(requirementName);\n        if (requirement === undefined) { throw new Error(); }\n        return [requirement, creditsCounts];\n    }));\n\n    const selectionNameToOptionName = new Map(json.selectionNameToOptionName);\n\n    return { courseToStatus, courseToRequirement, requirementToOthersCount, selectionNameToOptionName }\n}\n\nexport const emptyPlan: Plan = {\n    courseToStatus: new Map(),\n    courseToRequirement: new Map(),\n    requirementToOthersCount: new Map(),\n    selectionNameToOptionName: new Map(),\n};","import React, { useState } from 'react';\nimport { Button, ButtonToolbar, Card, Form } from \"react-bootstrap\";\nimport Course from \"./Course\";\nimport Plan, { fromJSON, toJSON } from \"./Plan\";\nimport { RequirementWithCourses } from \"./Requirements\";\n\nconst ExportAndImportView = ({ plan, codeToCourse, nameToRequirement, onHide, onReturn }: {\n    plan: Plan,\n    codeToCourse: ReadonlyMap<string, Course>,\n    nameToRequirement: ReadonlyMap<string, RequirementWithCourses>,\n    onHide: () => void,\n    onReturn: (nextPlan: Plan) => void,\n}) => {\n    const [jsonString, setJSONString] = useState(() => JSON.stringify(toJSON(plan)));\n\n    const nextPlan = (() => {\n        try {\n            return fromJSON(\n                JSON.parse(jsonString),\n                { codeToCourse, nameToRequirement }\n            );\n        } catch {\n            return undefined;\n        }\n    })();\n    const isInvalid = nextPlan === undefined;\n\n    return (\n        <Card>\n            <Card.Header>エクスポート / インポート</Card.Header>\n            <Card.Body>\n                <dl>\n                    <dt>エクスポート</dt>\n                    <dd>テキストボックスの内容をコピーしてテキストファイルなどに保存します。</dd>\n\n                    <dt>インポート</dt>\n                    <dd>\n                        テキストボックスに保存したテキストを貼り付けてから、 [インポート] ボタンを押します。\n                        <strong>インポートすると現在の設定状態は失われます。</strong>\n                    </dd>\n                </dl>\n\n                <Form>\n                    <Form.Group>\n                        <Form.Label>JSON</Form.Label>\n                        <Form.Control\n                            className=\"input-monospace\"\n                            value={jsonString}\n                            isInvalid={isInvalid}\n                            onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => setJSONString(e.target.value)}\n                        />\n                        <Form.Control.Feedback type=\"invalid\">JSONが不正です</Form.Control.Feedback>\n                    </Form.Group>\n                    <ButtonToolbar>\n                        <Button\n                            variant=\"danger\" disabled={isInvalid}\n                            onClick={() => {\n                                if (nextPlan !== undefined) {\n                                    onReturn(nextPlan);\n                                    onHide();\n                                }\n                            }}\n                        >\n                            インポート\n                        </Button>\n                        <Button variant=\"secondary\" onClick={onHide}>閉じる</Button>\n                    </ButtonToolbar>\n                </Form>\n            </Card.Body>\n        </Card>\n    );\n}\n\nexport default ExportAndImportView","import { $number, $object, isCompatible } from \"@hiroto/json-type-checker\";\nimport Course from \"./Course\";\nimport Plan from \"./Plan\";\nimport RegistrationStatus from \"./RegistrationStatus\";\n\ntype Requirements = RequirementWithChildren | RequirementWithCourses | SelectionRequirement;\nexport default Requirements;\n\nabstract class Requirement {\n    abstract getRegisteredCreditsCount(plan: Plan, includesExcess: boolean): RegisteredCreditsCounts;\n    abstract getRequiredCreditsCount(selectionNameToOptionName: ReadonlyMap<string, string>): Range;\n    constructor(readonly name: string) { }\n    getStatus(plan: Plan): RegistrationStatus {\n        const requiredCreditsCount = this.getRequiredCreditsCount(plan.selectionNameToOptionName);\n        const registeredCreditsCounts = this.getRegisteredCreditsCount(plan, false);\n        return registeredCreditsCounts.acquired >= requiredCreditsCount.min ?\n            RegistrationStatus.Acquired :\n            registeredCreditsCounts.registered >= requiredCreditsCount.min ?\n                RegistrationStatus.Registered :\n                RegistrationStatus.Unregistered;\n    };\n}\n\nexport interface Range {\n    min: number;\n    max: number;\n}\nexport const isRange = (obj: unknown): obj is Range => isCompatible(obj, $object({ min: $number, max: $number }));\n\nexport interface RegisteredCreditsCounts {\n    acquired: number;\n    registered: number;\n}\n\nexport interface RequirementWithChildrenInit {\n    readonly name: string;\n    readonly description?: string;\n    readonly children: Iterable<Requirements>;\n    readonly creditsCount?: Range;\n}\n\nexport class RequirementWithChildren extends Requirement implements RequirementWithChildrenInit {\n    readonly description?: string;\n    readonly children: readonly Requirements[];\n    readonly creditsCount?: Range;\n    constructor({ name, description, children, creditsCount }: RequirementWithChildrenInit) {\n        super(name);\n        this.description = description\n        this.children = [...children];\n        this.creditsCount = creditsCount;\n    }\n    getRegisteredCreditsCount(plan: Plan, includesExcess: boolean): RegisteredCreditsCounts {\n        const creditsCounts = this.children.reduce(\n            (previous, child) => {\n                const childRegisteredCreditsCount = child.getRegisteredCreditsCount(plan, includesExcess);\n                return {\n                    acquired: previous.acquired + childRegisteredCreditsCount.acquired,\n                    registered: previous.registered + childRegisteredCreditsCount.registered,\n                }\n            },\n            { acquired: 0, registered: 0 }\n        );\n        return includesExcess || this.creditsCount === undefined ? creditsCounts : {\n            acquired: Math.min(this.creditsCount.max, creditsCounts.acquired),\n            registered: Math.min(this.creditsCount.max, creditsCounts.registered),\n        };\n    }\n    getRequiredCreditsCount(selectionNameToOptionName: ReadonlyMap<string, string>): Range {\n        return this.creditsCount === undefined ? this.children.reduce((previous, child) => {\n            const childRequiredCreditsCount = child.getRequiredCreditsCount(selectionNameToOptionName);\n            return {\n                min: previous.min + childRequiredCreditsCount.min,\n                max: previous.max + childRequiredCreditsCount.max,\n            }\n        }, { min: 0, max: 0 }) : this.creditsCount;\n    }\n    getStatus(plan: Plan): RegistrationStatus {\n        return Math.min(\n            super.getStatus(plan),\n            ...this.children.map(child => child.getStatus(plan))\n        );\n    };\n}\n\nexport interface RequirementWithCoursesInit {\n    readonly name: string;\n    readonly description?: string;\n    readonly courses: Iterable<Course>;\n    readonly creditsCount: Range;\n    readonly allowsOthers?: boolean;\n}\n\nexport class RequirementWithCourses extends Requirement {\n    readonly description?: string;\n    readonly courses: readonly Course[];\n    readonly creditsCount: Range;\n    readonly allowsOthers: boolean;\n    constructor({ name, description, courses, creditsCount, allowsOthers = false }: RequirementWithCoursesInit) {\n        super(name);\n        this.description = description;\n        this.courses = [...courses];\n        this.creditsCount = creditsCount;\n        this.allowsOthers = allowsOthers;\n    }\n    getRegisteredCreditsCount(plan: Plan, includesExcess: boolean): RegisteredCreditsCounts {\n        const othersCount = plan.requirementToOthersCount.get(this) || { acquired: 0, registered: 0 };\n        const creditsCounts = this.courses.reduce((previous, course): RegisteredCreditsCounts => {\n            const courseStatus = plan.courseToStatus.get(course) || RegistrationStatus.Unregistered;\n            if (plan.courseToRequirement.get(course) === this) {\n                return courseStatus === RegistrationStatus.Acquired ?\n                    {\n                        acquired: previous.acquired + course.creditsCount,\n                        registered: previous.registered + course.creditsCount,\n                    } :\n                    courseStatus === RegistrationStatus.Registered ?\n                        {\n                            acquired: previous.acquired,\n                            registered: previous.registered + course.creditsCount,\n                        } :\n                        previous;\n            } else {\n                return previous;\n            }\n        }, othersCount);\n        return includesExcess || this.creditsCount === undefined ? creditsCounts : {\n            acquired: Math.min(this.creditsCount.max, creditsCounts.acquired),\n            registered: Math.min(this.creditsCount.max, creditsCounts.registered),\n        };\n    }\n    getRequiredCreditsCount() {\n        return this.creditsCount;\n    }\n}\n\ninterface Option {\n    name: string;\n    requirement: Requirements;\n}\n\nexport interface SelectionRequirementInit {\n    readonly name: string;\n    readonly selectionName: string;\n    readonly options: Iterable<Option>;\n}\n\nexport class SelectionRequirement extends Requirement implements SelectionRequirementInit {\n    readonly selectionName: string;\n    readonly options: Option[];\n    readonly optionNameToRequirement: ReadonlyMap<string, Requirements>;\n    constructor({ name, selectionName, options: options0 }: SelectionRequirementInit) {\n        super(name);\n        this.selectionName = selectionName;\n        const options = [...options0]\n        this.options = options;\n        this.optionNameToRequirement = new Map(options.map(({ name, requirement }) => [name, requirement]));\n    }\n    getSelectedOptionName(selectionNameToOptionName: ReadonlyMap<string, string>) {\n        const selectedOptionName = selectionNameToOptionName.get(this.selectionName) || this.options[0].name;\n        return selectedOptionName;\n    }\n    getSelectedRequirement(selectionNameToOptionName: ReadonlyMap<string, string>) {\n        const selectedOptionName = this.getSelectedOptionName(selectionNameToOptionName);\n        const selectedRequirement = this.optionNameToRequirement.get(selectedOptionName);\n        return selectedRequirement;\n    }\n    getRegisteredCreditsCount(plan: Plan, includesExcess: boolean): RegisteredCreditsCounts {\n        const selectedRequirement = this.getSelectedRequirement(plan.selectionNameToOptionName);\n        if (selectedRequirement === undefined) {\n            return { acquired: 0, registered: 0 };\n        } else {\n            return selectedRequirement.getRegisteredCreditsCount(plan, includesExcess);\n        }\n    }\n    getRequiredCreditsCount(selectionNameToOptionName: ReadonlyMap<string, string>): Range {\n        const selectedRequirement = this.getSelectedRequirement(selectionNameToOptionName);\n        if (selectedRequirement === undefined) {\n            return { min: 0, max: 0 };\n        } else {\n            return selectedRequirement.getRequiredCreditsCount(selectionNameToOptionName);\n        }\n    }\n}\n","import codeToCourse from '../courses';\nimport Requirements, { isRange, Range, RequirementWithChildren, RequirementWithCourses, SelectionRequirement } from '../Requirements';\nimport coins17_0 from './coins17.json';\nimport klis17_0 from './klis17.json';\nimport mast17_0 from './mast17.json';\n\ntype RequirementsJSON = RequirementWithChildrenJSON | RequirementWithCoursesJSON | SelectionRequirementJSON;\n\ninterface RequirementWithChildrenJSON {\n    readonly name: string;\n    readonly description?: string;\n    readonly children: readonly RequirementsJSON[];\n    readonly creditsCount?: number | Range;\n}\n\ninterface RequirementWithCoursesJSON {\n    readonly name: string;\n    readonly description?: string;\n    readonly courses: readonly string[];\n    readonly creditsCount: number | Range;\n    readonly allowsOthers?: boolean;\n}\n\ntype OptionJSON = {\n    readonly name: string;\n    readonly requirement: RequirementsJSON;\n} | RequirementsJSON;\n\ninterface SelectionRequirementJSON {\n    readonly name?: string;\n    readonly selectionName: string;\n    readonly options: readonly OptionJSON[];\n}\n\ninterface RequirementAndDictionary {\n    readonly requirement: Requirements;\n    readonly dictionary: ReadonlyMap<string, RequirementWithCourses>;\n}\n\nconst numberOrRangeToRange = (numberOrRange: number | Range): Range =>\n    isRange(numberOrRange) ? numberOrRange : {\n        min: numberOrRange,\n        max: numberOrRange,\n    };\n\nconst getRequirementAndDictionaryFromJSON = (json: RequirementsJSON, selectionNameToCount: Map<string, number>): RequirementAndDictionary => {\n    if ('courses' in json) {\n        const requirement = new RequirementWithCourses({\n            name: json.name,\n            description: json.description,\n            creditsCount: numberOrRangeToRange(json.creditsCount),\n            courses: json.courses.map(courseCode => {\n                const course = codeToCourse.get(courseCode);\n                if (course === undefined) { throw new Error(`科目番号 ${courseCode} は定義されていません。`); }\n                return course;\n            }),\n            allowsOthers: json.allowsOthers,\n        });\n        return {\n            requirement,\n            dictionary: new Map([[requirement.name, requirement]]),\n        };\n    } else if ('children' in json) {\n        const requirementAndDictionaryArray = json.children.map(child => getRequirementAndDictionaryFromJSON(child, selectionNameToCount));\n        const requirement = new RequirementWithChildren({\n            name: json.name,\n            description: json.description,\n            children: requirementAndDictionaryArray.map(({ requirement }) => requirement),\n            creditsCount: json.creditsCount === undefined ? undefined : numberOrRangeToRange(json.creditsCount),\n        });\n        return {\n            requirement,\n            dictionary: new Map(\n                requirementAndDictionaryArray.flatMap(({ dictionary }) => [...dictionary.entries()])\n            ),\n        };\n    } else {\n        const selectionCount = selectionNameToCount.get(json.selectionName) || 0;\n        selectionNameToCount.set(json.selectionName, selectionCount + 1);\n        const optionAndDictionaryArray = json.options.map(optionJSON => {\n            if ('requirement' in optionJSON) {\n                const { requirement, dictionary } = getRequirementAndDictionaryFromJSON(optionJSON.requirement, selectionNameToCount);\n                return {\n                    option: { requirement, name: optionJSON.name },\n                    dictionary,\n                };\n            } else {\n                const { requirement, dictionary } = getRequirementAndDictionaryFromJSON(optionJSON, selectionNameToCount);\n                return {\n                    option: { requirement, name: requirement.name },\n                    dictionary,\n                };\n            }\n        })\n        const requirement = new SelectionRequirement({\n            name: `${json.selectionName}_${selectionCount}`,\n            selectionName: json.selectionName,\n            options: optionAndDictionaryArray.map(({ option }) => option),\n        });\n        return {\n            requirement,\n            dictionary: new Map(\n                optionAndDictionaryArray.flatMap(({ dictionary }) => [...dictionary.entries()])\n            )\n        };\n    }\n};\n\nconst requirementAndDictionaryMap = new Map([\n    ['coins17', { name: 'coins17', ...getRequirementAndDictionaryFromJSON(coins17_0, new Map()) }],\n    ['mast17', { name: 'mast17', ...getRequirementAndDictionaryFromJSON(mast17_0, new Map()) }],\n    ['klis17', { name: 'klis17', ...getRequirementAndDictionaryFromJSON(klis17_0, new Map()) }],\n]);\n\nexport default requirementAndDictionaryMap;","import React from \"react\";\nimport { Form } from \"react-bootstrap\";\nimport Requirements, { RequirementWithCourses } from \"./Requirements\";\nimport requirementAndDictionaryMap from './requirements/index';\n\nconst RequirementSelector = ({ onChange }: {\n    onChange: (selected: {\n        name: string,\n        requirement: Requirements,\n        dictionary: ReadonlyMap<string, RequirementWithCourses>,\n    }) => void\n}) => {\n    return (\n        <Form.Group>\n            <Form.Label>学類を選択</Form.Label>\n            <Form.Control\n                as=\"select\"\n                onChange={\n                    e => {\n                        const newRequirementName = (e.target as HTMLSelectElement).value;\n                        onChange(requirementAndDictionaryMap.get(newRequirementName)!);\n                    }\n                }\n            >\n                <option value=\"coins17\">情報科学類（2017年度入学）</option>\n                <option value=\"mast17\">情報メディア創成学類（2017年度入学）</option>\n                <option value=\"klis17\">知識情報・図書館学類（2017年度入学）</option>\n            </Form.Control>\n        </Form.Group>\n    )\n};\n\nexport const defaultSelected = requirementAndDictionaryMap.get('coins17')!;\nexport default RequirementSelector;","import React from 'react';\nimport { Badge, ListGroup } from \"react-bootstrap\";\nimport Course from \"./Course\";\nimport Plan from './Plan';\nimport RegistrationStatus from \"./RegistrationStatus\";\nimport Requirements, { RequirementWithCourses } from \"./Requirements\";\n\nconst CourseListItem = ({ course, status, onClick, currentRequirement, newRequirement, disabled }: {\n    course: Course,\n    status: RegistrationStatus,\n    onClick: () => void,\n    currentRequirement: Requirements | undefined,\n    newRequirement: Requirements,\n    disabled: boolean,\n}) => (\n        <ListGroup.Item action disabled={disabled} onClick={onClick}\n            variant={\n                status === RegistrationStatus.Unregistered ? undefined :\n                    currentRequirement === newRequirement ?\n                        status === RegistrationStatus.Acquired ? 'success' : 'primary' :\n                        'dark'\n            }>\n            <div className=\"d-flex justify-content-between align-items-center\">\n                <div>\n                    <div>{course.title}</div>\n                    <code>{course.code}</code>\n                </div>\n                <div className=\"ml-2 text-right flex-shrink-0\">\n                    {\n                        status === RegistrationStatus.Unregistered || currentRequirement === newRequirement ?\n                            (<></>) :\n                            currentRequirement === undefined ?\n                                (<Badge variant=\"secondary\">?</Badge>) :\n                                (<Badge variant=\"warning\">!</Badge>)\n                    }\n                    <Badge variant={status === RegistrationStatus.Acquired ? 'success' : status === RegistrationStatus.Registered ? 'primary' : 'secondary'}>\n                        {status === RegistrationStatus.Acquired ? '修得済み' : status === RegistrationStatus.Registered ? '履修する' : '履修しない'}\n                    </Badge>\n                    <div><span className=\"text-muted\">単位数</span> <strong>{course.creditsCount}</strong></div>\n                </div>\n            </div>\n        </ListGroup.Item>\n    );\n\nconst CourseList = ({ requirement, courses, plan, onCourseClick }: {\n    requirement: RequirementWithCourses,\n    courses: readonly Course[],\n    plan: Plan,\n    onCourseClick: (course: Course) => void,\n}) => (\n        <ListGroup>\n            {\n                courses.map((course: Course) => (\n                    <CourseListItem\n                        key={course.code} course={course}\n                        currentRequirement={plan.courseToRequirement.get(course)}\n                        newRequirement={requirement}\n                        status={plan.courseToStatus.get(course) || RegistrationStatus.Unregistered}\n                        onClick={() => onCourseClick(course)}\n                        disabled={\n                            (!plan.courseToStatus.has(course) || plan.courseToStatus.get(course) === RegistrationStatus.Unregistered) &&\n                            [...plan.courseToStatus.entries()]\n                                .filter(([_, status]) => status !== RegistrationStatus.Unregistered)\n                                .map(([course, _]) => course.title)\n                                .includes(course.title)\n                        }\n                    />\n                ))\n            }\n        </ListGroup>\n    );\n\nexport default CourseList;","import React, { useState } from 'react';\nimport { Accordion, Badge, Button, ButtonToolbar, Card, Col, Dropdown, Form, ListGroup } from \"react-bootstrap\";\nimport Course from \"./Course\";\nimport CourseList from \"./CourseList\";\nimport Plan from './Plan';\nimport RegistrationStatus from \"./RegistrationStatus\";\nimport Requirements, { RegisteredCreditsCounts, RequirementWithChildren, RequirementWithCourses, SelectionRequirement } from \"./Requirements\";\n\nconst CreditsCountLabelDelimiter = () => (<span className=\"text-muted\"> / </span>)\n\nconst ExceededCreditsCountLabel = ({ creditsCount }: { creditsCount: number }) => (\n    <>\n        <span className=\"text-muted\">(</span>\n        +{creditsCount}\n        <span className=\"text-muted\">)</span>\n    </>\n);\n\nconst CreditsCountLabels = ({ requirement, plan }: {\n    requirement: Requirements,\n    plan: Plan,\n}) => {\n    const creditsCount = requirement.getRegisteredCreditsCount(plan, false);\n    const exceededCreditsCount = requirement.getRegisteredCreditsCount(plan, true);\n    const requiredCreditsCount = requirement.getRequiredCreditsCount(plan.selectionNameToOptionName);\n\n    return (\n        <div>\n            <span>\n                <span className=\"text-muted\">習得</span>\n                <> </>\n                <strong className=\"text-success\">{creditsCount.acquired}</strong>\n                {exceededCreditsCount.acquired > creditsCount.acquired ? (<ExceededCreditsCountLabel creditsCount={exceededCreditsCount.acquired - creditsCount.acquired} />) : (<></>)}\n            </span>\n            <CreditsCountLabelDelimiter />\n            <span>\n                <span className=\"text-muted\">履修</span>\n                <> </>\n                <strong className=\"text-primary\">{creditsCount.registered}</strong>\n                {exceededCreditsCount.registered > creditsCount.registered ? (<ExceededCreditsCountLabel creditsCount={exceededCreditsCount.registered - creditsCount.registered} />) : (<></>)}\n            </span>\n            <CreditsCountLabelDelimiter />\n            <span>\n                <span className=\"text-muted\">必要</span>\n                <> </>\n                <strong>\n                    {\n                        requiredCreditsCount.min === requiredCreditsCount.max ?\n                            requiredCreditsCount.min :\n                            `${requiredCreditsCount.min}~${requiredCreditsCount.max}`\n                    }\n                </strong>\n            </span>\n        </div>\n    )\n};\n\nexport const RequirementSummaryView = ({ requirement, plan }: {\n    requirement: RequirementWithChildren | RequirementWithCourses,\n    plan: Plan,\n}) => {\n    const status = requirement.getStatus(plan);\n    return (\n        <>\n            <h5 className=\"d-flex justify-content-between align-items-center\">\n                <div>{requirement.name}</div>\n                <Badge className=\"ml-2 flex-shrink-0\" variant={status === RegistrationStatus.Acquired ? 'success' : status === RegistrationStatus.Registered ? 'primary' : 'secondary'}>\n                    {status === RegistrationStatus.Acquired ? '修得OK' : status === RegistrationStatus.Registered ? '履修OK' : '不足'}\n                </Badge>\n            </h5>\n            <div>\n                {requirement.description === undefined ? (<></>) : (<div className=\"text-muted\">{requirement.description}</div>)}\n                <CreditsCountLabels requirement={requirement} plan={plan} />\n            </div>\n        </>\n    );\n}\n\nconst RequirementWithChildrenView = ({ requirement, showsOnlyRegistered, plan, onCourseClick, onOthersCountsChange, onSelectionChange }: {\n    requirement: RequirementWithChildren,\n    showsOnlyRegistered: boolean,\n    plan: Plan,\n    onCourseClick: (course: Course, requirement: RequirementWithCourses) => void,\n    onOthersCountsChange: (requirement: RequirementWithCourses, newOthersCount: RegisteredCreditsCounts) => void,\n    onSelectionChange: (selectionName: string, newOptionName: string) => void,\n}) => (\n        <>\n            <RequirementSummaryView requirement={requirement} plan={plan} />\n            <ListGroup className=\"mt-3\">\n                {\n                    requirement.children.map(child => (\n                        <ListGroup.Item key={child.name}>\n                            <RequirementView\n                                requirement={child} showsOnlyRegistered={showsOnlyRegistered} plan={plan}\n                                onCourseClick={onCourseClick} onSelectionChange={onSelectionChange}\n                                onOthersCountsChange={onOthersCountsChange}\n                            />\n                        </ListGroup.Item>\n                    ))\n                }\n            </ListGroup>\n        </>\n    );\n\nconst OthersCountInput = ({ currentOthersCount, onReturn, onHide }: {\n    currentOthersCount: RegisteredCreditsCounts,\n    onReturn: (newOthersCount: RegisteredCreditsCounts) => void,\n    onHide: () => void,\n}) => {\n    const [acquired, setAcquired] = useState(undefined as number | undefined);\n    const [registeredExcludingAcquired, setRegisteredExcludingAcquired] = useState(undefined as number | undefined);\n    const [registeredIncludingAcquired, setRegisteredIncludingAcquired] = useState(undefined as number | undefined);\n\n    const computed = {\n        acquired: acquired || currentOthersCount.acquired,\n        registered:\n            registeredIncludingAcquired !== undefined ?\n                registeredIncludingAcquired :\n                registeredExcludingAcquired !== undefined ?\n                    (acquired !== undefined ? acquired : currentOthersCount.acquired) + registeredExcludingAcquired :\n                    acquired !== undefined ?\n                        currentOthersCount.registered + acquired - currentOthersCount.acquired :\n                        currentOthersCount.registered,\n    }\n\n    return (\n        <Card border=\"primary\">\n            <Card.Header>単位数を入力</Card.Header>\n            <Card.Body>\n                <Form onSubmit={(e: React.FormEvent<HTMLFormElement>) => {\n                    e.preventDefault();\n                    onReturn(computed);\n                    onHide();\n                }}>\n                    <Form.Row>\n                        <Form.Group as={Col} md=\"4\" controlId=\"validationCustom01\">\n                            <Form.Label>習得済みの単位数 <span className=\"text-muted\">(a)</span></Form.Label>\n                            <Form.Control\n                                type=\"number\" min={0}\n                                placeholder={`${computed.acquired}`}\n                                value={acquired === undefined ? '' : `${acquired}`}\n                                onChange={\n                                    (e: React.ChangeEvent<HTMLInputElement>) =>\n                                        setAcquired(e.target.value === '' ? undefined : +e.target.value)\n                                }\n                                isInvalid={computed.acquired < 0}\n                            />\n                            <Form.Control.Feedback type=\"invalid\">(a) &gt;= 0</Form.Control.Feedback>\n                        </Form.Group>\n                        <Form.Group as={Col} md=\"4\" controlId=\"validationCustom02\">\n                            <Form.Label>履修する単位数 <span className=\"text-muted\">(b)</span></Form.Label>\n                            <Form.Control\n                                type=\"number\" min={0}\n                                placeholder={`${computed.registered - computed.acquired}`}\n                                value={registeredExcludingAcquired === undefined ? '' : `${registeredExcludingAcquired}`}\n                                onChange={\n                                    (e: React.ChangeEvent<HTMLInputElement>) => {\n                                        if (e.target.value === '') {\n                                            setRegisteredExcludingAcquired(undefined);\n                                        } else {\n                                            setRegisteredExcludingAcquired(+e.target.value);\n                                            setRegisteredIncludingAcquired(undefined);\n                                        }\n                                    }\n                                }\n                                isInvalid={computed.acquired > computed.registered}\n                            />\n                            <Form.Control.Feedback type=\"invalid\">(b) &gt;= 0</Form.Control.Feedback>\n                        </Form.Group>\n                        <Form.Group as={Col} md=\"4\" controlId=\"validationCustom02\">\n                            <Form.Label>計 <span className=\"text-muted\">(a) + (b)</span></Form.Label>\n                            <Form.Control\n                                type=\"number\" min={0}\n                                placeholder={`${computed.registered}`}\n                                value={registeredIncludingAcquired === undefined ? '' : `${registeredIncludingAcquired}`}\n                                onChange={\n                                    (e: React.ChangeEvent<HTMLInputElement>) => {\n                                        if (e.target.value === '') {\n                                            setRegisteredIncludingAcquired(undefined);\n                                        } else {\n                                            setRegisteredIncludingAcquired(+e.target.value);\n                                            setRegisteredExcludingAcquired(undefined);\n                                        }\n                                    }\n                                }\n                            />\n                        </Form.Group>\n                    </Form.Row>\n                    <ButtonToolbar>\n                        <Button\n                            type=\"submit\"\n                            disabled={computed.acquired < 0 || computed.acquired > computed.registered}\n                        >OK</Button>\n                        <Button variant=\"secondary\" onClick={onHide}>キャンセル</Button>\n                    </ButtonToolbar>\n                </Form>\n            </Card.Body>\n        </Card>\n    )\n}\n\nconst RequirementWithCoursesView = ({ requirement, showsOnlyRegistered, plan, onCourseClick, onOthersCountsChange }: {\n    requirement: RequirementWithCourses,\n    showsOnlyRegistered: boolean,\n    plan: Plan,\n    onCourseClick: (course: Course, requirement: RequirementWithCourses) => void,\n    onOthersCountsChange: (newOthersCount: RegisteredCreditsCounts) => void,\n}) => {\n    const [isOpen, setIsOpen] = useState(false);\n    const [showsInput, setShowsInput] = useState(false);\n\n    const courses = requirement.courses.filter(course =>\n        !showsOnlyRegistered || (plan.courseToStatus.get(course) !== RegistrationStatus.Unregistered &&\n            requirement === plan.courseToRequirement.get(course)));\n\n    return (\n        <>\n            <Accordion activeKey={isOpen ? '0' : ''}>\n                <div className={`bg-white ${isOpen ? 'sticky-top' : ''}`}>\n                    <RequirementSummaryView requirement={requirement} plan={plan} />\n                    {\n                        courses.length === 0 ?\n                            requirement.allowsOthers ? (\n                                showsInput ? (<></>) : (\n                                    <Button block className=\"mt-3\" variant=\"secondary\" onClick={() => setShowsInput(true)}>\n                                        単位数を入力\n                                    </Button>\n                                )\n                            ) : (\n                                    <Button block className=\"mt-3\" variant=\"outline-secondary\" disabled>\n                                        {showsOnlyRegistered ? '履修する' : ''}科目はありません\n                                    </Button>\n                                ) : (\n                                <Button\n                                    block className=\"mt-3\"\n                                    onClick={() => setIsOpen(!isOpen)}\n                                    variant={isOpen ? 'primary' : 'outline-secondary'}\n                                >\n                                    {showsOnlyRegistered ? '履修する' : ''}科目を{isOpen ? '非' : ''}表示\n                                </Button>\n                            )\n                    }\n                </div>\n                {\n                    showsInput ? (\n                        <div className=\"mt-3\">\n                            <OthersCountInput\n                                currentOthersCount={plan.requirementToOthersCount.get(requirement) || { acquired: 0, registered: 0 }}\n                                onReturn={onOthersCountsChange} onHide={() => setShowsInput(false)}\n                            />\n                        </div>\n                    ) : (<></>)\n                }\n                <Accordion.Collapse eventKey=\"0\">\n                    {\n                        courses.length === 0 ? (<></>) : (\n                            <div className=\"mt-3\">\n                                <CourseList requirement={requirement} courses={courses} plan={plan}\n                                    onCourseClick={course => onCourseClick(course, requirement)}\n                                />\n                            </div>\n                        )\n                    }\n                </Accordion.Collapse>\n            </Accordion>\n        </>\n    );\n}\n\nconst SelectionRequirementView = ({ requirement, showsOnlyRegistered, plan, onCourseClick, onOthersCountsChange, onSelectionChange }: {\n    requirement: SelectionRequirement,\n    showsOnlyRegistered: boolean,\n    plan: Plan,\n    onCourseClick: (course: Course, requirement: RequirementWithCourses) => void,\n    onOthersCountsChange: (requirement: RequirementWithCourses, newOthersCount: RegisteredCreditsCounts) => void,\n    onSelectionChange: (selectionName: string, newOptionName: string) => void,\n}) => {\n    const selectedOptionName = requirement.getSelectedOptionName(plan.selectionNameToOptionName);\n    const selectedRequirement = requirement.getSelectedRequirement(plan.selectionNameToOptionName);\n\n    const handleOptionClick = (newOptionName: string) => {\n        if (selectedOptionName !== newOptionName) {\n            onSelectionChange(requirement.selectionName, newOptionName);\n        }\n    };\n\n    return (\n        <>\n            <Dropdown>\n                <Dropdown.Toggle id=\"\" variant=\"secondary\" disabled={showsOnlyRegistered}>\n                    <span style={{\n                        overflow: 'hidden',\n                        textOverflow: 'ellipsis',\n                    }}>\n                        {requirement.selectionName}\n                        <> : </>\n                        <strong>{selectedOptionName}</strong>\n                    </span>\n                </Dropdown.Toggle>\n\n                <Dropdown.Menu style={{ zIndex: 1100 }}>\n                    {\n                        requirement.options.map(option => (\n                            <Dropdown.Item key={option.name}\n                                active={option.name === selectedOptionName}\n                                onClick={() => handleOptionClick(option.name)}\n                            >\n                                {option.name}\n                            </Dropdown.Item>\n                        ))\n                    }\n                </Dropdown.Menu>\n            </Dropdown>\n            {\n                selectedRequirement === undefined ? (<></>) : (\n                    <div className=\"mt-3\">\n                        <RequirementView\n                            requirement={selectedRequirement} showsOnlyRegistered={showsOnlyRegistered} plan={plan}\n                            onCourseClick={onCourseClick} onOthersCountsChange={onOthersCountsChange}\n                            onSelectionChange={onSelectionChange}\n                        />\n                    </div>\n                )\n            }\n        </>\n    );\n}\n\nconst RequirementView = ({ requirement, showsOnlyRegistered, plan, onCourseClick, onOthersCountsChange, onSelectionChange }: {\n    requirement: Requirements,\n    showsOnlyRegistered: boolean,\n    plan: Plan,\n    onCourseClick: (course: Course, requirement: RequirementWithCourses) => void,\n    onOthersCountsChange: (requirement: RequirementWithCourses, newOthersCount: RegisteredCreditsCounts) => void,\n    onSelectionChange: (selectionName: string, newOptionName: string) => void,\n}) => {\n    if (requirement instanceof RequirementWithChildren) {\n        return (\n            <RequirementWithChildrenView\n                requirement={requirement} showsOnlyRegistered={showsOnlyRegistered} plan={plan}\n                onCourseClick={onCourseClick} onOthersCountsChange={onOthersCountsChange} onSelectionChange={onSelectionChange}\n            />\n        )\n    } else if (requirement instanceof RequirementWithCourses) {\n        return (\n            <RequirementWithCoursesView\n                requirement={requirement} showsOnlyRegistered={showsOnlyRegistered} plan={plan}\n                onCourseClick={onCourseClick}\n                onOthersCountsChange={creditsCounts => onOthersCountsChange(requirement, creditsCounts)}\n            />\n        )\n    } else {\n        return (\n            <SelectionRequirementView\n                requirement={requirement} showsOnlyRegistered={showsOnlyRegistered} plan={plan}\n                onCourseClick={onCourseClick} onOthersCountsChange={onOthersCountsChange} onSelectionChange={onSelectionChange}\n            />\n        );\n    }\n}\n\nexport default RequirementView;\n","import React, { useState } from \"react\";\nimport { Button, Card, Modal } from \"react-bootstrap\";\nimport Plan from \"./Plan\";\nimport { RequirementWithCourses } from \"./Requirements\";\nimport { RequirementSummaryView } from \"./RequirementView\";\n\nconst CourseMovementConfirmationModal = ({ currentRequirement, plan, onReturn, onExited }: {\n    currentRequirement: RequirementWithCourses,\n    plan: Plan,\n    onReturn: (value: boolean) => void,\n    onExited: () => void,\n}) => {\n    const [show, setShow] = useState(true);\n\n    return (\n        <Modal show={show} onHide={() => { setShow(false); onReturn(false); }} onExited={onExited}>\n            <Modal.Body>\n                <p>\n                    この科目はすでに以下の要件に割り当てられています。\n                    <strong>続けると、この要件への割り当ては解除されます。</strong>\n                </p>\n                <p>各科目に割り当てできる要件は1つまでです。</p>\n                <Card body>\n                    <RequirementSummaryView requirement={currentRequirement} plan={plan} />\n                </Card>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={() => { setShow(false); onReturn(false); }}>キャンセル</Button>\n                <Button variant=\"primary\" onClick={() => { setShow(false); onReturn(true); }}>続ける</Button>\n            </Modal.Footer>\n        </Modal>\n    );\n};\n\nexport default CourseMovementConfirmationModal;","import React, { useState } from 'react';\n\nconst getValueFromModal = async <T, P>(\n    ModalType: React.ComponentType<{\n        onReturn: (value: T) => void,\n        onExited: () => void,\n    } & P>,\n    props: P,\n    setModalsAndCount: React.Dispatch<React.SetStateAction<ModalsAndCount>>,\n): Promise<T> => new Promise((resolve, reject) => {\n    try {\n        setModalsAndCount(({ modals, count }) => {\n            const modal = (\n                <ModalType\n                    {...props}\n                    onReturn={value => resolve(value)}\n                    onExited={() => setModalsAndCount(\n                        ({ modals, count }) => ({\n                            modals: modals.filter(value => value !== modal),\n                            count,\n                        })\n                    )}\n                    key={count}\n                />\n            );\n            return ({\n                modals: [...modals, modal],\n                count: count + 1,\n            })\n        });\n    } catch (e) {\n        reject(e);\n    }\n});\n\nexport interface ModalsAndCount {\n    readonly modals: readonly JSX.Element[];\n    readonly count: number;\n}\n\nconst initialModalsAndCount: ModalsAndCount = {\n    modals: [],\n    count: 0,\n};\n\nexport const useModals = () => {\n    const [modalsAndCount, setModalsAndCount] = useState(initialModalsAndCount);\n    return {\n        modals: modalsAndCount.modals,\n        setModalsAndCount,\n    };\n};\n\nexport default getValueFromModal;","import React from 'react';\nimport Course from './Course';\nimport CourseMovementConfirmationModal from './CourseMovementConfirmationModal';\nimport getValueFromModal, { useModals } from './getValueFromModal';\nimport Plan from './Plan';\nimport RegistrationStatus from './RegistrationStatus';\nimport Requirements, { RegisteredCreditsCounts, RequirementWithChildren, RequirementWithCourses, SelectionRequirement } from './Requirements';\nimport RequirementView from './RequirementView';\n\nconst RequirementsRootView = ({ requirement, plan, showsOnlyRegistered, onChange }: {\n    requirement: Requirements,\n    showsOnlyRegistered: boolean,\n    plan: Plan,\n    onChange: (newPlan: Plan) => void,\n}) => {\n    const { courseToStatus, courseToRequirement, requirementToOthersCount, selectionNameToOptionName } = plan;\n    const { modals, setModalsAndCount } = useModals();\n\n    const handleCourseClick = async (course: Course, requirement: RequirementWithCourses) => {\n        const currentStatus: RegistrationStatus = courseToStatus.get(course) || RegistrationStatus.Unregistered;\n        const currentRequirement = courseToRequirement.get(course);\n        let newCourseToStatus = courseToStatus;\n        if (currentStatus === RegistrationStatus.Unregistered || currentRequirement === requirement) {\n            newCourseToStatus = new Map([\n                ...courseToStatus,\n                [\n                    course,\n                    showsOnlyRegistered ?\n                        currentStatus === RegistrationStatus.Acquired ? RegistrationStatus.Registered : RegistrationStatus.Acquired :\n                        (currentStatus + 1) % 3\n                ]\n            ]);\n        } else if (\n            currentRequirement !== undefined &&\n            !await getValueFromModal(\n                CourseMovementConfirmationModal,\n                { currentRequirement, plan },\n                setModalsAndCount\n            )\n        ) {\n            return;\n        }\n        onChange({\n            ...plan,\n            courseToStatus: newCourseToStatus,\n            courseToRequirement: new Map([...courseToRequirement, [course, requirement]]),\n        });\n    }\n\n    const clearCourseToRequirement = (requirement: Requirements, newCourseToRequirement: Map<Course, RequirementWithCourses>) => {\n        if (requirement instanceof RequirementWithChildren) {\n            for (const child of requirement.children) {\n                clearCourseToRequirement(child, newCourseToRequirement);\n            }\n        } else if (requirement instanceof RequirementWithCourses) {\n            for (const course of requirement.courses) {\n                if (newCourseToRequirement.get(course) === requirement) {\n                    newCourseToRequirement.delete(course);\n                }\n            }\n        } else {\n            const selectedRequirement = requirement.getSelectedRequirement(selectionNameToOptionName);\n            if (selectedRequirement !== undefined) {\n                clearCourseToRequirement(selectedRequirement, newCourseToRequirement);\n            }\n        }\n    }\n\n    const clearCourseToRequirementInSelection = (selectionName: string, requirement: Requirements, newCourseToRequirement: Map<Course, RequirementWithCourses>) => {\n        if (requirement instanceof RequirementWithChildren) {\n            for (const child of requirement.children) {\n                clearCourseToRequirementInSelection(selectionName, child, newCourseToRequirement);\n            }\n        } else if (requirement instanceof SelectionRequirement && requirement.selectionName === selectionName) {\n            clearCourseToRequirement(requirement, newCourseToRequirement);\n        }\n    }\n\n    const handleOthersCountsChange = (requirement: RequirementWithCourses, newOthersCount: RegisteredCreditsCounts) => {\n        onChange({\n            ...plan,\n            requirementToOthersCount: new Map([\n                ...requirementToOthersCount,\n                [requirement, newOthersCount]\n            ]),\n        });\n    }\n\n    const handleSelectionChange = (selectionName: string, newOptionName: string) => {\n        const newCourseToRequirement = new Map(courseToRequirement);\n        clearCourseToRequirementInSelection(selectionName, requirement, newCourseToRequirement);\n        onChange({\n            ...plan,\n            courseToRequirement: newCourseToRequirement,\n            selectionNameToOptionName: new Map([...selectionNameToOptionName, [selectionName, newOptionName]]),\n        });\n    }\n\n    return (\n        <>\n            {modals}\n            <RequirementView\n                requirement={requirement} showsOnlyRegistered={showsOnlyRegistered} plan={plan}\n                onCourseClick={handleCourseClick} onOthersCountsChange={handleOthersCountsChange}\n                onSelectionChange={handleSelectionChange}\n            />\n        </>\n    );\n}\n\nexport default RequirementsRootView;","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React, { useState } from 'react';\nimport { Alert, Button, Container, Form, Navbar } from 'react-bootstrap';\nimport { useLocalStorage } from 'react-use';\nimport './App.css';\nimport codeToCourse from './courses';\nimport ExportAndImportView from './ExportAndImportView';\nimport Plan, { emptyPlan, fromJSON, PlanJSON, toJSON } from './Plan';\nimport requirementAndDictionaryMap from './requirements/';\nimport RequirementSelector, { defaultSelected } from './RequirementSelector';\nimport RequirementsRootView from './RequirementsRootView';\n\nconst COURSES_STATE = \"courses-state\"\n\nconst App = () => {\n    const [selected, setSelected] = useState(defaultSelected);\n    const [showsOnlyRegistered, setShowsOnlyRegistered] = useState(false);\n    const [showsExportAndImportView, setShowsExportAndImportView] = useState(false);\n    const { plan, setPlan } = usePlan(selected.name);\n\n    return (\n        <>\n            <Navbar variant=\"dark\" bg=\"dark\">\n                <Navbar.Brand>卒業要件を満たしたい</Navbar.Brand>\n            </Navbar>\n            <Container>\n                <Alert variant=\"danger\" className=\"my-3\">\n                    このツールの結果を利用する場合、必ず履修要覧や支援室などでその結果が正しいことを確認するようにしてください。\n                    <strong>科目や要件の定義が誤っていたり、実際には認められない履修の組み合わせがある可能性があります。</strong>\n                </Alert>\n                <RequirementSelector onChange={setSelected} />\n                <div className=\"mb-3\">\n                    {\n                        showsExportAndImportView ? (\n                            <ExportAndImportView\n                                plan={plan} codeToCourse={codeToCourse} nameToRequirement={selected.dictionary}\n                                onReturn={setPlan} onHide={() => setShowsExportAndImportView(false)}\n                            />\n                        ) : (\n                                <Button variant=\"secondary\" onClick={() => setShowsExportAndImportView(true)}>\n                                    エクスポート / インポート\n                                </Button>\n                            )\n                    }\n                </div>\n                <Form.Check custom className=\"mb-3\" id=\"showsOnlyRegisteredCheck\"\n                    label=\"履修する科目のみ表示する\"\n                    checked={showsOnlyRegistered}\n                    onChange={() => setShowsOnlyRegistered(!showsOnlyRegistered)}\n                />\n                <div className=\"mb-3\">\n                    <RequirementsRootView\n                        requirement={selected.requirement} showsOnlyRegistered={showsOnlyRegistered}\n                        plan={plan} onChange={setPlan}\n                    />\n                </div>\n            </Container>\n        </>\n    );\n}\n\nconst usePlanMap = () => {\n    const [storedJSON, setStoredJSON] = useLocalStorage<readonly (readonly [string, PlanJSON])[]>(COURSES_STATE);\n    const [planMap0, setPlanMap0] = useState(() => {\n        try {\n            const storedPlanEntries = storedJSON.map(([requirementName, planJSON]) => {\n                const requirementAndDictionary = requirementAndDictionaryMap.get(requirementName);\n                if (requirementAndDictionary === undefined) {\n                    return undefined;\n                } else {\n                    try {\n                        return [requirementName, fromJSON(planJSON, {\n                            codeToCourse,\n                            nameToRequirement: requirementAndDictionary.dictionary,\n                        })] as const;\n                    } catch {\n                        return undefined;\n                    }\n                }\n            }).filter((value): value is NonNullable<typeof value> => value !== undefined);\n            const storedPlanMap: ReadonlyMap<string, Plan> = new Map(storedPlanEntries);\n            return storedPlanMap;\n        } catch {\n            const storedPlanMap: ReadonlyMap<string, Plan> = new Map();\n            return storedPlanMap;\n        }\n    });\n    const setPlanMap = (newPlanMap: ReadonlyMap<string, Plan>) => {\n        const planJSONEntries = [...newPlanMap].map(([requirementName, plan]) => [requirementName, toJSON(plan)] as const);\n        setPlanMap0(newPlanMap);\n        setStoredJSON(planJSONEntries);\n    };\n    return {\n        planMap: planMap0,\n        setPlanMap,\n    };\n}\n\nconst usePlan = (requirementName: string) => {\n    const { planMap, setPlanMap } = usePlanMap();\n\n    const plan = planMap.get(requirementName) || emptyPlan;\n    const setPlan = (newPlan: Plan) => {\n        const newPlanMap = new Map([\n            ...planMap,\n            [requirementName, newPlan]\n        ]);\n        setPlanMap(newPlanMap);\n    };\n\n    return { plan, setPlan };\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'react-app-polyfill/stable';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}