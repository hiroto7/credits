{"version":3,"sources":["RegistrationStatusLockTarget.ts","AssignmentsFindView/findAssignments.worker.ts","Plan.ts","badges.tsx","AssignmentsFindView/index.tsx","safely.ts","CollectivelyCourseSetView.tsx","courses/index.ts","FilterType.ts","ExportView.tsx","getValueFromModal.tsx","ImportView.tsx","Requirements/Requirements.ts","Requirements/getRequirementAndDictionaryFromJSON.ts","requirementInstances/index.ts","RequirementView/RequirementSummaryView.tsx","RequirementView/RequirementWithChildrenView.tsx","RequirementView/CourseList.tsx","RequirementView/RequirementWithCoursesView.tsx","RequirementView/SelectionRequirementView.tsx","RequirementView/InnerRequirementView.tsx","RequirementView/ReassignmentConfirmationModal.tsx","RequirementView/index.tsx","App.tsx","reportWebVitals.ts","index.tsx","RequirementView/RequirementWithCoursesView.module.css"],"names":["RegistrationStatusLockTarget","Worker","RegistrationStatus","isRegistrable","course","courseToStatus","some","course1","status","title","Unregistered","getNextStatus","currentStatus","lockTarget","All","Acquired","toJSON","courseToRequirement","requirementToOthersCount","selectionNameToOptionName","Object","fromEntries","map","code","requirement","id","creditsCounts","fromJSON","json","codeToCourse","idToRequirement","Map","entries","get","undefined","Error","courseCode","requirementId","emptyPlan","CourseRegistrationStatusBadge","Badge","variant","Registered","RequirementRegistrationStatusBadge","DisabledCourseBadge","OverlayTrigger","overlay","Tooltip","AssignmentsFindView","show","plan","selectsAutomatically","additionalInformation","cancelButtonLabel","onCancel","onSubmit","useState","worker","setWorker","isLoading","setIsLoading","plans","setPlans","onMessage","useCallback","event","data","length","nextPlans","planJSON","useEffect","AssignmentsFindWorker","postMessage","requirementJSON","terminate","addEventListener","removeEventListener","Modal","onHide","Header","closeButton","Title","Body","ListGroup","className","plan1","getStatus","getRegisteredCreditCounts","Item","action","onClick","acquired","registered","selectionName","optionName","Spinner","animation","Footer","Button","AssignmentsFindButton","setShow","handleSubmit","nextPlan","safely","f","args","placeholder","trim","Table1","codeColumnIndex","titleColumnIndex","creditsCountColumnIndex","courseAndRecordPairs","setCourseToStatus","firstCourse","firstRecord","record","firstRecordIsHeader","courseAndRecordPairsWithoutHeader","slice","Table","bordered","hover","responsive","style","whiteSpace","cell","index","filter","_","recordIndex","getTdContent","mapCourse","mapRecord","recordValue","tds0","recordTitle","textAlign","creditCount","recordCreditsCount","tds1","tds","nextStatus","None","cursor","getColumnIndex","reduce","previous","count","Modal1","setAllCourseStatus","nextCourseToStatus","set","setAllCourseStatusToRegistered","setAllCourseStatusToAcquired","size","ButtonGroup","Modal0","csv","setCSV","validated","setValidated","records","parse","definedCoursesCount","feedback","handleCSVChange","nextCSV","handleFileChange","file","target","files","item","reader","FileReader","result","readAsText","Form","Group","Label","Control","as","rows","value","onChange","isInvalid","Feedback","type","accept","disabled","CollectivelyCourseSetView","page","setPage","setCourseAndRecordPairs","setCodeColumnIndex","has","courses","FilterType","ExportView","jsonText","JSON","stringify","url","setURL","blob","Blob","onLoad","readAsDataURL","readOnly","onFocus","e","select","href","download","initialModalsAndCount","modals","useModals","modalsAndCount","setModalsAndCount","getValueFromModal","ModalType","props","a","Promise","resolve","reject","modal","onReturn","onExited","key","ImportConfirmationModal","ImportView","setJSONText","handleJSONChange","nextJSON","preventDefault","ButtonToolbar","Requirement","name","this","requiredCreditCount","getRequiredCreditCount","registeredCreditCounts","min","RequirementWithChildren","description","children","includesExcess","creditCounts","child","childRegisteredCreditCount","Math","max","childRequiredCreditCount","flatMap","getVisibleRequirements","RequirementWithCourses","allowsOthers","othersCount","courseStatus","SelectionRequirement","options0","options","optionNameToRequirement","selectedOptionName","getSelectedOptionName","selectedRequirement","getSelectedRequirement","numberOrRangeToRange","numberOrRange","getInnerRequirementAndDictionaryFromJSON","requirementNameToCount","requirementAndDictionaryPairs","optionAndDictionaryArray","optionJSON","option","getRequirementAndDictionaryFromJSON","coins17_0","mast17_0","klis17_0","CreditsCountLabelDelimiter","ExceededCreditsCountLabel","creditsCount","CreditsCountLabels","exceededCreditsCount","requiredCreditsCount","RequirementSummaryView","RequirementWithChildrenView","filterType","onCourseClick","onOthersCountsChange","onSelectionChange","CourseListItem","newRequirement","currentRequirement","isRegisteredButInvalid","isRegistrable0","handleClick","CourseList","OthersCountInput","currentOthersCount","setAcquired","registeredExcludingAcquired","setRegisteredExcludingAcquired","registeredIncludingAcquired","setRegisteredIncludingAcquired","computed","Card","border","Row","Col","md","step","RequirementWithCoursesView","open","setOpen","showsInput","setShowsInput","Valid","onCollapseExiting","root","closest","styles","rect","getBoundingClientRect","sticky","getElementsByClassName","stickyTop","parseInt","getComputedStyle","getPropertyValue","top","window","scrollTo","scrollY","block","Collapse","in","onExiting","SelectionRequirementView","handleSelectionChange","InputGroup","Prepend","Text","custom","InnerRequirementView","ReassignmentConfirmationModal","body","RequirementView","handleCourseClick","newOthersCount","newOptionName","nextSelectionNameToOptionName","visibleRequirements","nextCourseToRequirement","includes","StatusAlert","Alert","RequirementWithConfiguration","setPlan","setFilterType","useLockTarget","setLockTarget","Tab","Container","defaultActiveKey","Nav","Link","eventKey","Content","Pane","label","lockTarget1","Check","checked","InnerMain","requirementName","usePlan","Dropdown","Toggle","overflow","textOverflow","Menu","values","to","active","Main","useParams","useLocalStorage","storedJSON","setStoredJSON","storedPlanEntries","planMap0","setPlanMap0","planMap","setPlanMap","newPlanMap","planJSONEntries","usePlanMap","newPlan","App","Navbar","bg","Brand","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.122c3bed.chunk.js","sourcesContent":["enum RegistrationStatusLockTarget {\n    Unregistered = 0,\n    Acquired = 2,\n    All = 3,\n    None = 4,\n}\n\nexport default RegistrationStatusLockTarget;","export default function() {\n  return new Worker(__webpack_public_path__ + \"static/js/findAssignments.worker.27449c48.worker.js\");\n}\n","import type Course from \"./Course\";\nimport RegistrationStatusLockTarget from \"./RegistrationStatusLockTarget\";\nimport type { RequirementWithCourses } from \"./Requirements\";\n\nexport interface RegisteredCreditCounts {\n    acquired: number;\n    registered: number;\n}\n\nexport default interface Plan {\n    readonly courseToStatus: ReadonlyMap<Course, RegistrationStatus>;\n    readonly courseToRequirement: ReadonlyMap<Course, RequirementWithCourses>;\n    readonly requirementToOthersCount: ReadonlyMap<RequirementWithCourses, RegisteredCreditCounts>;\n    readonly selectionNameToOptionName: ReadonlyMap<string, string>;\n}\n\nexport type CourseCode = string;\nexport type RequirementId = string;\n\nexport enum RegistrationStatus {\n    Unregistered = 0,\n    Registered = 1,\n    Acquired = 2,\n}\n\nexport const isRegistrable = ({ course, courseToStatus }: {\n    course: Course,\n    courseToStatus: ReadonlyMap<Course, RegistrationStatus>,\n}) => ![...courseToStatus].some(\n    ([course1, status]) =>\n        course1 !== course && course1.title === course.title && status !== RegistrationStatus.Unregistered\n);\n\nexport const getNextStatus = ({ currentStatus, lockTarget }: {\n    currentStatus: RegistrationStatus,\n    lockTarget: RegistrationStatusLockTarget,\n}): RegistrationStatus => {\n    switch (lockTarget) {\n        case RegistrationStatusLockTarget.All:\n            return currentStatus;\n        case RegistrationStatusLockTarget.Acquired:\n        case RegistrationStatusLockTarget.Unregistered:\n            const difference = (3 + lockTarget - currentStatus) % 3;\n            switch (difference) {\n                case 0:\n                    return currentStatus;\n                case 1:\n                    return (currentStatus + 2) % 3;\n                default:\n                    return (currentStatus + 1) % 3;\n            }\n        default:\n            return (currentStatus + 1) % 3;\n    }\n}\n\nexport interface PlanJSON {\n    readonly courseToStatus: { [courseCode: string]: RegistrationStatus };\n    readonly courseToRequirement: { [courseCode: string]: RequirementId };\n    readonly requirementToOthersCount: { [requirementName: string]: RegisteredCreditCounts };\n    readonly selectionNameToOptionName: { [selectionName: string]: string };\n}\n\nexport const toJSON =\n    ({ courseToStatus, courseToRequirement, requirementToOthersCount, selectionNameToOptionName }: Plan): PlanJSON => ({\n        courseToStatus: Object.fromEntries(\n            [...courseToStatus].map(([course, status]) => [course.code, status])\n        ),\n        courseToRequirement: Object.fromEntries(\n            [...courseToRequirement].map(([course, requirement]) => [course.code, requirement.id])\n        ),\n        requirementToOthersCount: Object.fromEntries(\n            [...requirementToOthersCount].map(([requirement, creditsCounts]) => [requirement.id, creditsCounts])\n        ),\n        selectionNameToOptionName: Object.fromEntries(selectionNameToOptionName),\n    });\n\nexport const fromJSON = (json: PlanJSON, { codeToCourse, idToRequirement }: {\n    codeToCourse: ReadonlyMap<CourseCode, Course>,\n    idToRequirement: ReadonlyMap<RequirementId, RequirementWithCourses>,\n}): Plan => {\n    const courseToStatus = new Map(\n        Object.entries(json.courseToStatus).map(([code, status]) => {\n            const course = codeToCourse.get(code);\n            if (course === undefined) { throw new Error(); }\n            return [course, status];\n        })\n    );\n\n    const courseToRequirement = new Map(\n        Object.entries(json.courseToRequirement).map(([courseCode, requirementId]) => {\n            const course = codeToCourse.get(courseCode);\n            const requirement = idToRequirement.get(requirementId);\n\n            if (course === undefined) { throw new Error(); }\n            if (requirement === undefined) { throw new Error(); }\n\n            return [course, requirement];\n        })\n    );\n\n    const requirementToOthersCount = new Map(\n        Object.entries(json.requirementToOthersCount).map(([requirementId, creditsCounts]) => {\n            const requirement = idToRequirement.get(requirementId);\n            if (requirement === undefined) { throw new Error(); }\n            return [requirement, creditsCounts];\n        })\n    );\n\n    const selectionNameToOptionName = new Map(Object.entries(json.selectionNameToOptionName));\n\n    return { courseToStatus, courseToRequirement, requirementToOthersCount, selectionNameToOptionName }\n}\n\nexport const emptyPlan: Plan = {\n    courseToStatus: new Map(),\n    courseToRequirement: new Map(),\n    requirementToOthersCount: new Map(),\n    selectionNameToOptionName: new Map(),\n};\n","import { Badge, OverlayTrigger, Tooltip } from \"react-bootstrap\";\nimport { RegistrationStatus } from \"./Plan\";\n\nexport const CourseRegistrationStatusBadge: React.FC<{ status: RegistrationStatus }> = ({ status }) => {\n    switch (status) {\n        case RegistrationStatus.Acquired:\n            return (<Badge variant=\"success\">修得済み</Badge>);\n        case RegistrationStatus.Registered:\n            return (<Badge variant=\"primary\">履修する</Badge>);\n        default:\n            return (<Badge variant=\"secondary\">履修しない</Badge>);\n    }\n}\n\nexport const RequirementRegistrationStatusBadge: React.FC<{ status: RegistrationStatus }> = ({ status }) => {\n    switch (status) {\n        case RegistrationStatus.Acquired:\n            return (<Badge variant=\"success\">修得OK</Badge>);\n        case RegistrationStatus.Registered:\n            return (<Badge variant=\"primary\">履修OK</Badge>);\n        default:\n            return (<Badge variant=\"secondary\">不足</Badge>);\n    }\n}\n\nexport const DisabledCourseBadge: React.FC<{ id: string }> = ({ id }) => (\n    <OverlayTrigger\n        overlay={\n            <Tooltip id={id}>ほかに同名の科目を履修しているため、この科目は履修できません。</Tooltip>\n        }\n    >\n        <Badge variant=\"secondary\">履修不可</Badge>\n    </OverlayTrigger>\n);","import { useCallback, useEffect, useState } from 'react';\nimport { Button, ListGroup, Modal, Spinner } from \"react-bootstrap\";\n// eslint-disable-next-line import/no-webpack-loader-syntax\nimport AssignmentsFindWorker from 'worker-loader!./findAssignments.worker';\nimport { RequirementRegistrationStatusBadge } from '../badges';\nimport type Course from '../Course';\nimport Plan, { fromJSON, PlanJSON, toJSON } from '../Plan';\nimport type Requirements from '../Requirements';\nimport type { RequirementWithCourses } from '../Requirements';\n\nconst AssignmentsFindView: React.FC<{\n    show: boolean,\n    requirement: Requirements,\n    idToRequirement: ReadonlyMap<string, RequirementWithCourses>,\n    codeToCourse: ReadonlyMap<string, Course>,\n    plan: Plan,\n    selectsAutomatically: boolean,\n    additionalInformation: React.ReactNode,\n    cancelButtonLabel: string,\n    onCancel: () => void,\n    onSubmit: (plan: Plan) => void,\n}> = ({ show, requirement, idToRequirement, codeToCourse, plan, selectsAutomatically, additionalInformation, cancelButtonLabel, onCancel, onSubmit }) => {\n    const [worker, setWorker] = useState<Worker | undefined>(undefined);\n    const [isLoading, setIsLoading] = useState(false);\n    const [plans, setPlans] = useState<readonly Plan[] | undefined>(undefined);\n\n    const onMessage = useCallback((event: MessageEvent) => {\n        if (event.data === 'done') {\n            if (selectsAutomatically) {\n                if (plans === undefined) {\n                    onCancel();\n                } else if (plans[0] !== undefined && plans.length === 1) {\n                    onSubmit(plans[0]);\n                } else {\n                    setIsLoading(false);\n                }\n            } else {\n                setIsLoading(false);\n            }\n        } else {\n            const planJSONList: readonly PlanJSON[] = event.data;\n            const nextPlans: readonly Plan[] = planJSONList.map(planJSON => fromJSON(planJSON, { codeToCourse, idToRequirement }));\n            setPlans(nextPlans);\n        }\n    }, [codeToCourse, idToRequirement, onCancel, onSubmit, plans, selectsAutomatically]);\n\n    useEffect(() => {\n        if (show) {\n            setIsLoading(true);\n            setPlans(undefined);\n            const worker = new AssignmentsFindWorker();\n            setWorker(worker);\n            worker.postMessage({\n                codeToCourse,\n                planJSON: toJSON(plan),\n                requirementJSON: requirement.toJSON(),\n            });\n\n            return () => {\n                worker.terminate();\n                setWorker(undefined);\n            }\n        }\n    }, [codeToCourse, plan, requirement, show]);\n\n    useEffect(() => {\n        worker?.addEventListener('message', onMessage);\n        return () => worker?.removeEventListener('message', onMessage);\n    }, [onMessage, worker]);\n\n    return (\n        <Modal show={show} onHide={onCancel}>\n            <Modal.Header closeButton>\n                <Modal.Title>最適な割り当ての自動探索</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                {\n                    isLoading ? (\n                        <>\n                            <p>\n                                全体として修得単位数や履修単位数が最大となるような割り当てを探しています。\n                                この処理は短時間で終わらない場合があります。\n                            </p>\n                            {\n                                plans === undefined ? (<></>) : (\n                                    <p>\n                                        これまでに見つかった割り当てが以下に表示されています。\n                                        まだ最適な割り当てがほかにないか探していますが、選択してすぐに適用することもできます。\n                                    </p>\n                                )\n                            }\n                        </>\n                    ) : plans === undefined ? (\n                        <p>\n                            割り当てを探しましたが、要件を満たす割り当ては見つかりませんでした。\n                        </p>\n                    ) : (\n                                <p>\n                                    全体として修得単位数や履修単位数が最大となるような割り当てとして、以下のものが見つかりました。\n                                    適用するものを選択してください。\n                                </p>\n                            )\n                }\n\n                {additionalInformation}\n\n                {\n                    plans === undefined ? (<></>) :\n                        (\n                            <ListGroup className={isLoading ? 'mb-3' : undefined}>\n                                {\n                                    plans.map(plan1 => {\n                                        const status = requirement.getStatus(plan1);\n                                        const creditsCounts = requirement.getRegisteredCreditCounts(plan1, false);\n                                        return (\n                                            <ListGroup.Item\n                                                key={`${creditsCounts.acquired}-${creditsCounts.registered}`}\n                                                action\n                                                onClick={() => onSubmit(plan1)}\n                                            >\n                                                <div className=\"d-flex justify-content-between align-items-center\">\n                                                    <div>\n                                                        修得\n                                                        <> </>\n                                                        <strong className=\"text-success\">{creditsCounts.acquired}</strong>\n                                                        <> / </>\n                                                        履修\n                                                        <> </>\n                                                        <strong className=\"text-primary\">{creditsCounts.registered}</strong>\n                                                    </div>\n                                                    <RequirementRegistrationStatusBadge status={status} />\n                                                </div>\n                                                {\n                                                    [...plan1.selectionNameToOptionName].map(([selectionName, optionName]) => (\n                                                        <div key={selectionName}>\n                                                            {selectionName}\n                                                            <> : </>\n                                                            <strong>{optionName}</strong>\n                                                        </div>\n                                                    ))\n                                                }\n                                            </ListGroup.Item>\n                                        )\n                                    })\n                                }\n                            </ListGroup>\n                        )\n                }\n                {\n                    isLoading ? (\n                        <div className=\"text-center\">\n                            <Spinner animation=\"border\" variant=\"primary\" />\n                        </div>\n                    ) : (<></>)\n                }\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={onCancel}>{cancelButtonLabel}</Button>\n            </Modal.Footer>\n        </Modal>\n    );\n}\n\nexport default AssignmentsFindView;\n\nexport const AssignmentsFindButton: React.FC<{\n    requirement: Requirements,\n    idToRequirement: ReadonlyMap<string, RequirementWithCourses>,\n    codeToCourse: ReadonlyMap<string, Course>,\n    plan: Plan,\n    onSubmit: (plan: Plan) => void,\n}> = ({ requirement, idToRequirement, codeToCourse, plan, onSubmit }) => {\n    const [show, setShow] = useState(false);\n\n    const onCancel = useCallback(() => setShow(false), []);\n    const handleSubmit = useCallback(nextPlan => {\n        setShow(false);\n        onSubmit(nextPlan);\n    }, [onSubmit]);\n\n    return (\n        <>\n            <Button variant=\"secondary\" onClick={() => setShow(true)}>\n                最適な割り当ての自動探索\n            </Button>\n            <AssignmentsFindView\n                show={show}\n                onCancel={onCancel}\n                requirement={requirement}\n                idToRequirement={idToRequirement}\n                codeToCourse={codeToCourse}\n                plan={plan}\n                selectsAutomatically={false}\n                additionalInformation={\n                    <p>\n                        先に<b>履修状況の設定</b>と<b>単位数の入力</b>を行っておいてください。\n                    </p>\n                }\n                cancelButtonLabel=\"キャンセル\"\n                onSubmit={handleSubmit}\n            />\n        </>\n    )\n}","const safely = <F extends (...args: any) => any>(f: F, ...args: Parameters<F>): ReturnType<F> | undefined => {\n    try {\n        return f(...args);\n    } catch {\n        return undefined;\n    }\n}\n\nexport default safely;","import parse from 'csv-parse/lib/sync';\nimport { useCallback, useState } from 'react';\nimport { Badge, Button, ButtonGroup, Form, Modal, OverlayTrigger, Table, Tooltip } from \"react-bootstrap\";\nimport AssignmentsFindView from './AssignmentsFindView';\nimport { CourseRegistrationStatusBadge, DisabledCourseBadge } from './badges';\nimport type Course from './Course';\nimport Plan, { getNextStatus, isRegistrable, RegistrationStatus } from './Plan';\nimport RegistrationStatusLockTarget from './RegistrationStatusLockTarget';\nimport type Requirements from './Requirements';\nimport type { RequirementWithCourses } from './Requirements';\nimport safely from './safely';\n\nconst placeholder = `\n\"学籍番号\",\"学生氏名\",\"科目番号\",\"科目名 \",\"単位数\",\"春学期\",\"秋学期\",\"総合評価\",\"科目区分\",\"開講年度\",\"開講区分\"\n\"201700000\",\"＊＊ ＊＊\",\"GB10615\",\"コンピュータリテラシ\",\" 2.0\",\"-\",\"-\",\"A\",\"A\",\"2017\",\"通常\"\n\"201700000\",\"＊＊ ＊＊\",\"GB10664\",\"プログラミング入門A\",\" 1.0\",\"-\",\"-\",\"A\",\"A\",\"2017\",\"通常\"\n`.trim();\n\ntype RegistrationStatus12 = RegistrationStatus.Registered | RegistrationStatus.Acquired\n\nconst Table1: React.FC<{\n    codeColumnIndex: number,\n    titleColumnIndex: number | undefined,\n    creditsCountColumnIndex: number | undefined,\n    courseAndRecordPairs: readonly [CourseAndRecordPair, ...CourseAndRecordPair[]],\n    courseToStatus: ReadonlyMap<Course, RegistrationStatus>,\n    setCourseToStatus: (courseToStatus: ReadonlyMap<Course, RegistrationStatus>) => void,\n}> = ({ codeColumnIndex, titleColumnIndex, creditsCountColumnIndex, courseAndRecordPairs, courseToStatus, setCourseToStatus }) => {\n    const {\n        course: firstCourse,\n        record: firstRecord,\n    } = courseAndRecordPairs[0];\n\n    const firstRecordIsHeader =\n        firstCourse === undefined &&\n        firstRecord[codeColumnIndex]!.trim() === '科目番号' &&\n        (titleColumnIndex === undefined || firstRecord[titleColumnIndex]!.trim() === '科目名') &&\n        (creditsCountColumnIndex === undefined || firstRecord[creditsCountColumnIndex]!.trim() === '単位数');\n\n    const courseAndRecordPairsWithoutHeader: readonly CourseAndRecordPair[] = firstRecordIsHeader ?\n        courseAndRecordPairs.slice(1) :\n        courseAndRecordPairs;\n\n    return (\n        <Table\n            bordered hover responsive\n            style={{ whiteSpace: 'nowrap' }}\n        >\n            <thead>\n                <tr>\n                    <th></th>\n                    <th>科目番号</th>\n                    <th>科目名</th>\n                    <th>単位数</th>\n                    {\n                        firstRecord\n                            .map((cell, index) => (<th key={index}>{firstRecordIsHeader ? cell : (<></>)}</th>))\n                            .filter((_, index) => index !== codeColumnIndex && index !== titleColumnIndex && index !== creditsCountColumnIndex)\n                    }\n                </tr>\n            </thead>\n            <tbody>\n                {\n                    courseAndRecordPairsWithoutHeader.map(\n                        ({ course, record }, recordIndex) => {\n                            const getTdContent = <T,>(index: number | undefined, mapCourse: (course: Course) => T, mapRecord: (recordValue: string) => T) => {\n                                const recordValue = index === undefined ? undefined : record[index];\n                                return (\n                                    course === undefined ?\n                                        recordValue :\n                                        recordValue === undefined || mapRecord(recordValue) === mapCourse(course) ?\n                                            mapCourse(course) :\n                                            (\n                                                <>\n                                                    <div><del>{recordValue}</del></div>\n                                                    <div><ins>{mapCourse(course)}</ins></div>\n                                                </>\n                                            )\n                                );\n                            }\n\n                            const tds0 = (\n                                <>\n                                    <td><code>{record[codeColumnIndex]}</code></td>\n                                    <td>{getTdContent(titleColumnIndex, course => course.title, recordTitle => recordTitle.trim())}</td>\n                                    <td style={{ textAlign: 'center' }}>\n                                        {getTdContent(creditsCountColumnIndex, course => course.creditCount, recordCreditsCount => +recordCreditsCount)}\n                                    </td>\n                                </>\n                            );\n                            const tds1 = record\n                                .map((cell, index) => (\n                                    <td key={index}>\n                                        {\n                                            index === codeColumnIndex ?\n                                                (<code>{cell}</code>) :\n                                                index === titleColumnIndex ?\n                                                    cell :\n                                                    (<span className=\"text-muted\">{cell}</span>)\n                                        }\n                                    </td>\n                                ))\n                                .filter((_, index) =>\n                                    index !== codeColumnIndex &&\n                                    index !== titleColumnIndex &&\n                                    index !== creditsCountColumnIndex\n                                );\n\n                            const tds = (<>{tds0}{tds1}</>);\n\n                            if (course === undefined) {\n                                return (\n                                    <tr key={recordIndex} className=\"table-secondary\">\n                                        <td style={{ textAlign: 'center' }}>\n                                            <OverlayTrigger\n                                                overlay={\n                                                    <Tooltip id={`record${recordIndex}-tooltip`}>この科目は定義されていないため、このツールでは利用できません。</Tooltip>\n                                                }\n                                            >\n                                                <Badge variant=\"secondary\">未定義</Badge>\n                                            </OverlayTrigger>\n                                        </td>\n                                        {tds}\n                                    </tr>\n                                )\n                            } else if (isRegistrable({ course, courseToStatus })) {\n                                const status = courseToStatus.get(course) ?? RegistrationStatus.Unregistered;\n                                const nextStatus = getNextStatus({ currentStatus: status, lockTarget: RegistrationStatusLockTarget.None });\n\n                                return (\n                                    <tr\n                                        key={recordIndex}\n                                        onClick={\n                                            () => setCourseToStatus(new Map([\n                                                ...courseToStatus,\n                                                [course, nextStatus]\n                                            ]))\n                                        }\n                                        style={{ cursor: 'pointer' }}\n                                        className={status === RegistrationStatus.Unregistered ? undefined : `table-${status === RegistrationStatus.Acquired ? 'success' : 'primary'}`}\n                                    >\n                                        <td style={{ textAlign: 'center' }}>\n                                            <CourseRegistrationStatusBadge status={status} />\n                                        </td>\n                                        {tds}\n                                    </tr>\n                                );\n                            } else {\n                                return (\n                                    <tr key={recordIndex}>\n                                        <td style={{ textAlign: 'center' }}>\n                                            <DisabledCourseBadge id={`record${recordIndex}-tooltip`} />\n                                        </td>\n                                        {tds}\n                                    </tr>\n                                )\n                            }\n\n                        }\n                    )\n                }\n            </tbody>\n        </Table>\n    );\n}\n\ninterface CourseAndRecordPair {\n    readonly course: Course | undefined;\n    readonly record: readonly string[];\n}\n\nconst getColumnIndex = <T,>(\n    courseAndRecordPairs: readonly [CourseAndRecordPair, ...CourseAndRecordPair[]],\n    mapCourse: (course: Course) => T,\n    mapRecord: (recordValue: string) => T\n) =>\n    courseAndRecordPairs[0].record.reduce<{\n        count: number,\n        index: number | undefined,\n    }>((previous, _, index) => {\n        const count = courseAndRecordPairs.filter(({ course, record }) => {\n            const recordValue = record[index]!;\n            return course !== undefined && mapRecord(recordValue) === mapCourse(course);\n        }).length;\n        return count > previous.count ? { count, index } : previous;\n    }, {\n        count: 0,\n        index: undefined,\n    }).index;\n\nconst Modal1: React.FC<{\n    codeColumnIndex: number,\n    courseAndRecordPairs: readonly [CourseAndRecordPair, ...CourseAndRecordPair[]],\n    show: boolean,\n    courseToStatus: ReadonlyMap<Course, RegistrationStatus>,\n    setCourseToStatus: (courseToStatus: ReadonlyMap<Course, RegistrationStatus>) => void,\n    onCancel: () => void,\n    onSubmit: () => void,\n}> = ({ codeColumnIndex, courseAndRecordPairs, show, courseToStatus, setCourseToStatus, onCancel, onSubmit }) => {\n    const titleColumnIndex = getColumnIndex(courseAndRecordPairs, course => course.title, recordTitle => recordTitle.trim());\n    const creditsCountColumnIndex = getColumnIndex(courseAndRecordPairs, course => course.creditCount, recordCreditsCount => +recordCreditsCount)\n\n    const setAllCourseStatus = useCallback((status: RegistrationStatus12) => {\n        const nextCourseToStatus = new Map();\n        for (const { course } of courseAndRecordPairs) {\n            if (course !== undefined && isRegistrable({ course, courseToStatus: nextCourseToStatus })) {\n                nextCourseToStatus.set(course, status);\n            }\n        }\n        setCourseToStatus(nextCourseToStatus);\n    }, [courseAndRecordPairs, setCourseToStatus]);\n    const setAllCourseStatusToRegistered = useCallback(() => setAllCourseStatus(RegistrationStatus.Registered), [setAllCourseStatus]);\n    const setAllCourseStatusToAcquired = useCallback(() => setAllCourseStatus(RegistrationStatus.Acquired), [setAllCourseStatus]);\n\n    return (\n        <Modal size=\"xl\" show={show} onHide={onCancel}>\n            <Modal.Header closeButton>\n                <Modal.Title>CSVから履修状況を一括登録</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <p>CSVデータから見つかった科目が以下に表示されています。</p>\n                <p>\n                    それぞれの科目を [履修する] / [修得済み] のどちらかに設定してください。\n                    CSVデータに不要な科目が含まれている場合は、 [履修しない] に設定してください。\n                </p>\n                <p>\n                    [OK] を押すと、設定された履修状況のもとで、最適な科目群への割り当てがないか探します。\n                    割り当てが見つかればそれが適用され、見つからない場合は履修状況の設定だけが行われます。\n                    <strong>現在の履修 / 修得状況は失われます。</strong>\n                </p>\n                <ButtonGroup className=\"mb-3\">\n                    <Button\n                        variant=\"outline-primary\"\n                        onClick={setAllCourseStatusToRegistered}\n                    >\n                        すべて履修する\n                    </Button>\n                    <Button\n                        variant=\"outline-success\"\n                        onClick={setAllCourseStatusToAcquired}\n                    >\n                        すべて修得済み\n                    </Button>\n                </ButtonGroup>\n                <Table1\n                    codeColumnIndex={codeColumnIndex}\n                    titleColumnIndex={titleColumnIndex}\n                    creditsCountColumnIndex={creditsCountColumnIndex}\n                    courseAndRecordPairs={courseAndRecordPairs}\n                    courseToStatus={courseToStatus}\n                    setCourseToStatus={setCourseToStatus}\n                />\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={onCancel}>戻る</Button>\n                <Button onClick={onSubmit}>OK</Button>\n            </Modal.Footer>\n        </Modal>\n    );\n}\n\nconst Modal0: React.FC<{\n    codeToCourse: ReadonlyMap<string, Course>,\n    show: boolean,\n    onCancel: () => void,\n    onSubmit: ({ courseAndRecordPairs, codeColumnIndex }: {\n        courseAndRecordPairs: readonly [CourseAndRecordPair, ...CourseAndRecordPair[]],\n        codeColumnIndex: number,\n    }) => void,\n}> = ({ codeToCourse, show, onCancel: onHide, onSubmit }) => {\n    const [csv, setCSV] = useState(\"\");\n    const [validated, setValidated] = useState(false);\n\n    const records: readonly (readonly string[])[] | undefined = safely(parse, csv);\n    const { courseAndRecordPairs, codeColumnIndex } = records?.[0]?.reduce<{\n        definedCoursesCount: number;\n        courseAndRecordPairs: readonly [CourseAndRecordPair, ...CourseAndRecordPair[]] | undefined;\n        codeColumnIndex: number | undefined;\n    }>((previous, _, index) => {\n        const courseAndRecordPairs = records.map(record => {\n            const code = record[index]!;\n            const course = codeToCourse.get(code.trim());\n            return { record, course };\n        }) as [CourseAndRecordPair, ...CourseAndRecordPair[]];\n        const definedCoursesCount = courseAndRecordPairs.filter(({ course }) => course !== undefined).length;\n\n        return definedCoursesCount > previous.definedCoursesCount ? {\n            definedCoursesCount,\n            courseAndRecordPairs,\n            codeColumnIndex: index,\n        } : previous;\n    }, {\n        definedCoursesCount: 0,\n        courseAndRecordPairs: undefined,\n        codeColumnIndex: undefined,\n    }) ?? {\n        courseAndRecordPairs: undefined,\n        codeColumnIndex: undefined,\n    };\n\n    const feedback =\n        records === undefined ? 'CSVの形式が不正です' :\n            records.length === 0 ? 'CSVを入力してください' :\n                codeColumnIndex === undefined ? '科目がひとつも見つかりません' :\n                    undefined;\n\n    const handleCSVChange = useCallback((nextCSV: string) => {\n        setCSV(nextCSV);\n        setValidated(true);\n    }, []);\n\n    const handleFileChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n        const file = event.target.files?.item(0);\n        if (file === null || file === undefined) {\n            return;\n        }\n        const reader = new FileReader();\n        reader.addEventListener('load', () => {\n            if (typeof reader.result === 'string') {\n                handleCSVChange(reader.result);\n            }\n        });\n        reader.readAsText(file);\n    }, [handleCSVChange]);\n\n    return (\n        <Modal size=\"lg\" show={show} onHide={onHide}>\n            <Modal.Header closeButton>\n                <Modal.Title>CSVから履修状況を一括登録</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <p>\n                    ひとつの列に科目番号が記述されたCSVデータを用意してください。\n                    次のようなCSVデータを使用できます。\n                </p>\n                <ul>\n                    <li>TWINS の [成績照会] 画面からダウンロードしたCSVファイル</li>\n                    <li>各行に科目番号のみを記述したデータ</li>\n                </ul>\n                <p>\n                    用意したデータをテキストボックスに貼り付けるか、ファイルとして読み込んでください。\n                </p>\n\n                <Form.Group>\n                    <Form.Label>CSV / 科目番号のリスト</Form.Label>\n                    <Form.Control\n                        as=\"textarea\"\n                        rows={5}\n                        placeholder={placeholder}\n                        value={csv}\n                        className=\"text-monospace\"\n                        onChange={\n                            (event: React.ChangeEvent<HTMLTextAreaElement>) => handleCSVChange(event.target.value)\n                        }\n                        style={{ whiteSpace: 'pre' }}\n                        isInvalid={validated && feedback !== undefined}\n                    />\n                    <Form.Control.Feedback type=\"invalid\">{feedback}</Form.Control.Feedback>\n                </Form.Group>\n                <Button as=\"label\" variant=\"secondary\" className=\"mb-0\">\n                    CSVファイルを読み込む\n                        <input\n                        type=\"file\"\n                        className=\"d-none\"\n                        accept=\".csv,text/csv,text/plain\"\n                        id=\"csv-file-input\"\n                        onChange={handleFileChange}\n                    />\n                </Button>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={onHide}>キャンセル</Button>\n                {\n                    courseAndRecordPairs === undefined || codeColumnIndex === undefined ?\n                        (<Button disabled>次へ</Button>) :\n                        (<Button onClick={() => onSubmit({ courseAndRecordPairs, codeColumnIndex })}>次へ</Button>)\n                }\n            </Modal.Footer>\n        </Modal>\n    )\n};\n\nconst CollectivelyCourseSetView: React.FC<{\n    codeToCourse: ReadonlyMap<string, Course>,\n    requirement: Requirements,\n    idToRequirement: ReadonlyMap<string, RequirementWithCourses>,\n    plan: Plan,\n    onSubmit: (plan: Plan) => void,\n}> = ({ codeToCourse, requirement, idToRequirement, plan, onSubmit }) => {\n    const [page, setPage] = useState<0 | 1 | 2 | undefined>();\n    const [courseAndRecordPairs, setCourseAndRecordPairs] = useState<readonly [CourseAndRecordPair, ...CourseAndRecordPair[]]>();\n    const [codeColumnIndex, setCodeColumnIndex] = useState<number>();\n    const [courseToStatus, setCourseToStatus] = useState<ReadonlyMap<Course, RegistrationStatus>>(new Map());\n\n    return (\n        <>\n            <Button variant=\"secondary\" onClick={() => setPage(0)}>CSVから履修状況を一括登録</Button>\n            <Modal0\n                codeToCourse={codeToCourse}\n                show={page === 0}\n                onCancel={() => setPage(undefined)}\n                onSubmit={\n                    ({ courseAndRecordPairs, codeColumnIndex }) => {\n                        const nextCourseToStatus = new Map(courseToStatus);\n                        for (const { course } of courseAndRecordPairs) {\n                            if (course !== undefined && !nextCourseToStatus.has(course) && isRegistrable({ course, courseToStatus: nextCourseToStatus })) {\n                                nextCourseToStatus.set(course, RegistrationStatus.Registered);\n                            }\n                        }\n                        setCourseToStatus(nextCourseToStatus);\n                        setCourseAndRecordPairs(courseAndRecordPairs);\n                        setCodeColumnIndex(codeColumnIndex);\n                        setPage(1);\n                    }\n                }\n            />\n            {\n                courseAndRecordPairs === undefined || codeColumnIndex === undefined ? (<></>) : (\n                    <Modal1\n                        courseAndRecordPairs={courseAndRecordPairs}\n                        codeColumnIndex={codeColumnIndex}\n                        show={page === 1}\n                        courseToStatus={courseToStatus}\n                        setCourseToStatus={setCourseToStatus}\n                        onCancel={() => setPage(0)}\n                        onSubmit={() => setPage(2)}\n                    />\n                )\n            }\n            {\n                courseToStatus === undefined ? (<></>) : (\n                    <AssignmentsFindView\n                        show={page === 2}\n                        requirement={requirement}\n                        idToRequirement={idToRequirement}\n                        codeToCourse={codeToCourse}\n                        plan={{ ...plan, courseToStatus }}\n                        selectsAutomatically={true}\n                        cancelButtonLabel=\"スキップ\"\n                        additionalInformation={\n                            <p>スキップすると科目群への割り当てを行わず、履修状況の設定だけを行います。</p>\n                        }\n                        onCancel={\n                            () => {\n                                setPage(undefined);\n                                onSubmit({ ...plan, courseToStatus });\n                            }\n                        }\n                        onSubmit={\n                            plan => {\n                                setPage(undefined);\n                                onSubmit(plan);\n                            }\n                        }\n                    />\n                )\n            }\n        </>\n    )\n}\n\nexport default CollectivelyCourseSetView;","import type Course from '../Course';\nimport courses from './courses1.json';\n\nconst codeToCourse = new Map<string, Course>();\n\nfor (const course of courses) {\n    codeToCourse.set(course.code, course);\n}\n\nexport default codeToCourse;","enum FilterType {\n    None,\n    Registered,\n    Valid,\n}\n\nexport default FilterType;","import { useEffect, useState } from 'react';\nimport { Button, Form } from \"react-bootstrap\";\nimport Plan, { toJSON } from \"./Plan\";\n\nconst ExportView: React.FC<{ plan: Plan }> = ({ plan }) => {\n    const jsonText = JSON.stringify(toJSON(plan));\n    const [url, setURL] = useState<string | undefined>();\n    useEffect(() => {\n        const blob = new Blob([jsonText], { type: 'application/json' });\n        const reader = new FileReader();\n        const onLoad = () => {\n            const url = reader.result;\n            if (typeof url === 'string') {\n                setURL(url);\n            }\n        }\n        reader.addEventListener('load', onLoad);\n        reader.readAsDataURL(blob);\n        return () => reader.removeEventListener('load', onLoad);\n    }, [jsonText]);\n\n    return (\n        <>\n            <h5>バックアップの保存</h5>\n            <p>作業内容のバックアップを保存するには、次のJSONデータを保存してください。</p>\n            <Form.Group>\n                <Form.Label>JSON</Form.Label>\n                <Form.Control\n                    readOnly className=\"input-monospace\"\n                    value={jsonText}\n                    onFocus={(e: React.FocusEvent<HTMLInputElement>) => e.target.select()}\n                />\n            </Form.Group>\n            <Button as='a' href={url} download>JSONファイルとして保存</Button>\n        </>\n    );\n}\n\nexport default ExportView;","import { useState } from 'react';\n\nconst getValueFromModal = async <T, P>(\n    ModalType: React.ComponentType<{\n        onReturn: (value: T) => void,\n        onExited: () => void,\n    } & P>,\n    props: P,\n    setModalsAndCount: React.Dispatch<React.SetStateAction<ModalsAndCount>>,\n): Promise<T> => new Promise((resolve, reject) => {\n    try {\n        setModalsAndCount(({ modals, count }) => {\n            const modal = (\n                <ModalType\n                    {...props}\n                    onReturn={value => resolve(value)}\n                    onExited={() => setModalsAndCount(\n                        ({ modals, count }) => ({\n                            modals: modals.filter(value => value !== modal),\n                            count,\n                        })\n                    )}\n                    key={count}\n                />\n            );\n            return ({\n                modals: [...modals, modal],\n                count: count + 1,\n            })\n        });\n    } catch (e) {\n        reject(e);\n    }\n});\n\nexport interface ModalsAndCount {\n    readonly modals: readonly JSX.Element[];\n    readonly count: number;\n}\n\nconst initialModalsAndCount: ModalsAndCount = {\n    modals: [],\n    count: 0,\n};\n\nexport const useModals = () => {\n    const [modalsAndCount, setModalsAndCount] = useState(initialModalsAndCount);\n    return {\n        modals: modalsAndCount.modals,\n        setModalsAndCount,\n    };\n};\n\nexport default getValueFromModal;","import { useCallback, useState } from 'react';\nimport { Button, ButtonToolbar, Form, Modal } from \"react-bootstrap\";\nimport type Course from \"./Course\";\nimport getValueFromModal, { useModals } from './getValueFromModal';\nimport Plan, { emptyPlan, fromJSON, toJSON } from \"./Plan\";\nimport type { RequirementWithCourses } from \"./Requirements\";\nimport safely from './safely';\n\nconst ImportConfirmationModal: React.FC<{\n    onReturn: (value: boolean) => void,\n    onExited: () => void\n}> = ({ onReturn, onExited }) => {\n    const [show, setShow] = useState(true);\n\n    return (\n        <Modal show={show} onHide={() => { setShow(false); onReturn(false); }} onExited={onExited}>\n            <Modal.Header closeButton>\n                <Modal.Title>バックアップの復元</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                復元すると現在の作業内容は失われますが、よろしいですか？\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={() => { setShow(false); onReturn(false); }}>いいえ</Button>\n                <Button variant=\"danger\" onClick={() => { setShow(false); onReturn(true); }}>はい</Button>\n            </Modal.Footer>\n        </Modal>\n    );\n}\n\nconst ImportView: React.FC<{\n    codeToCourse: ReadonlyMap<string, Course>,\n    idToRequirement: ReadonlyMap<string, RequirementWithCourses>,\n    onSubmit: (nextPlan: Plan) => void,\n}> = ({ codeToCourse, idToRequirement, onSubmit }) => {\n    const [jsonText, setJSONText] = useState(\"\");\n    const [validated, setValidated] = useState(false);\n    const { modals, setModalsAndCount } = useModals();\n\n    const json = safely(JSON.parse, jsonText);\n    const nextPlan = json && safely(fromJSON, json, { codeToCourse, idToRequirement });\n    const isInvalid = nextPlan === undefined;\n\n    const handleJSONChange = useCallback((nextJSON: string) => {\n        setJSONText(nextJSON);\n        setValidated(true);\n    }, []);\n\n    const handleFileChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n        const file = event.target.files?.item(0);\n        if (file === null || file === undefined) {\n            return;\n        }\n        const reader = new FileReader();\n        reader.addEventListener('load', () => {\n            if (typeof reader.result === 'string') {\n                handleJSONChange(reader.result);\n            }\n        });\n        reader.readAsText(file);\n    }, [handleJSONChange]);\n\n    const handleSubmit = useCallback(async (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        if (\n            nextPlan === undefined ||\n            !await getValueFromModal(ImportConfirmationModal, {}, setModalsAndCount)\n        ) {\n            return;\n        }\n        onSubmit(nextPlan);\n    }, [nextPlan, onSubmit, setModalsAndCount]);\n\n    return (\n        <>\n            {modals}\n            <h5>バックアップの復元</h5>\n            <p>\n                保存したJSONデータをテキストボックスに貼り付けるか、ファイルとして読み込んでください。\n                [復元] ボタンを押すと、<strong>現在の作業内容は失われ</strong>、入力されたバックアップが復元されます。\n            </p>\n            <Form onSubmit={handleSubmit}>\n                <Form.Group>\n                    <Form.Label>JSON</Form.Label>\n                    <Form.Control\n                        className=\"input-monospace\"\n                        isInvalid={validated && isInvalid}\n                        value={jsonText}\n                        placeholder={JSON.stringify(toJSON(emptyPlan))}\n                        onChange={(event: React.ChangeEvent<HTMLInputElement>) => handleJSONChange(event.target.value)}\n                    />\n                    <Form.Control.Feedback type=\"invalid\">JSONの形式が不正です</Form.Control.Feedback>\n                </Form.Group>\n                <ButtonToolbar>\n                    <Button type=\"submit\" disabled={isInvalid}>復元</Button>\n                    <Button as=\"label\" variant=\"secondary\" className=\"mb-0\">\n                        JSONファイルを読み込む\n                        <input\n                            type=\"file\"\n                            className=\"d-none\"\n                            accept=\".json,application/json\"\n                            id=\"json-file-input\"\n                            onChange={handleFileChange}\n                        />\n                    </Button>\n                </ButtonToolbar>\n            </Form>\n        </>\n    );\n}\n\nexport default ImportView;","import type Course from \"../Course\";\nimport Plan, { RegisteredCreditCounts, RegistrationStatus } from \"../Plan\";\nimport type { RequirementWithChildrenJSON, RequirementWithCoursesJSON, SelectionRequirementJSON } from './RequirementsJSON';\n\ntype Requirements = RequirementWithChildren | RequirementWithCourses | SelectionRequirement;\nexport default Requirements;\n\nabstract class Requirement {\n    readonly id: string\n    readonly name: string;\n    abstract getRegisteredCreditCounts(plan: Plan, includesExcess: boolean): RegisteredCreditCounts;\n    abstract getRequiredCreditCount(selectionNameToOptionName: ReadonlyMap<string, string>): Range;\n    abstract getVisibleRequirements(selectionNameToOptionName: ReadonlyMap<string, string>): readonly RequirementWithCourses[];\n    constructor({ id, name }: { id: string, name: string }) {\n        this.id = id;\n        this.name = name;\n    }\n    getStatus(plan: Plan): RegistrationStatus {\n        const requiredCreditCount = this.getRequiredCreditCount(plan.selectionNameToOptionName);\n        const registeredCreditCounts = this.getRegisteredCreditCounts(plan, false);\n        return registeredCreditCounts.acquired >= requiredCreditCount.min ?\n            RegistrationStatus.Acquired :\n            registeredCreditCounts.registered >= requiredCreditCount.min ?\n                RegistrationStatus.Registered :\n                RegistrationStatus.Unregistered;\n    }\n}\n\nexport interface Range {\n    min: number;\n    max: number;\n}\n\nexport interface RequirementWithChildrenInit {\n    readonly id: string;\n    readonly name: string;\n    readonly description?: string;\n    readonly children: Iterable<Requirements>;\n    readonly creditCount?: Range;\n}\n\nexport class RequirementWithChildren extends Requirement implements RequirementWithChildrenInit {\n    readonly description?: string;\n    readonly children: readonly Requirements[];\n    readonly creditCount?: Range;\n    constructor({ id, name, description, children, creditCount }: RequirementWithChildrenInit) {\n        super({ id, name });\n        this.description = description\n        this.children = [...children];\n        this.creditCount = creditCount;\n    }\n    getRegisteredCreditCounts(plan: Plan, includesExcess: boolean): RegisteredCreditCounts {\n        const creditCounts = this.children.reduce(\n            (previous, child) => {\n                const childRegisteredCreditCount = child.getRegisteredCreditCounts(plan, includesExcess);\n                return {\n                    acquired: previous.acquired + childRegisteredCreditCount.acquired,\n                    registered: previous.registered + childRegisteredCreditCount.registered,\n                }\n            },\n            { acquired: 0, registered: 0 }\n        );\n        return includesExcess || this.creditCount === undefined ? creditCounts : {\n            acquired: Math.min(this.creditCount.max, creditCounts.acquired),\n            registered: Math.min(this.creditCount.max, creditCounts.registered),\n        };\n    }\n    getRequiredCreditCount(selectionNameToOptionName: ReadonlyMap<string, string>): Range {\n        return this.creditCount === undefined ? this.children.reduce((previous, child) => {\n            const childRequiredCreditCount = child.getRequiredCreditCount(selectionNameToOptionName);\n            return {\n                min: previous.min + childRequiredCreditCount.min,\n                max: previous.max + childRequiredCreditCount.max,\n            }\n        }, { min: 0, max: 0 }) : this.creditCount;\n    }\n    getStatus(plan: Plan): RegistrationStatus {\n        return Math.min(\n            super.getStatus(plan),\n            ...this.children.map(child => child.getStatus(plan))\n        );\n    }\n    getVisibleRequirements(selectionNameToOptionName: ReadonlyMap<string, string>): readonly RequirementWithCourses[] {\n        return this.children.flatMap(requirement => requirement.getVisibleRequirements(selectionNameToOptionName));\n    }\n    toJSON(): RequirementWithChildrenJSON {\n        return {\n            name: this.name,\n            description: this.description,\n            children: this.children.map(child => child.toJSON()),\n            creditCount: this.creditCount,\n        }\n    }\n}\n\nexport interface RequirementWithCoursesInit {\n    readonly id: string;\n    readonly name: string;\n    readonly description?: string;\n    readonly courses: Iterable<Course>;\n    readonly creditCount: Range;\n    readonly allowsOthers?: boolean;\n}\n\nexport class RequirementWithCourses extends Requirement {\n    readonly description?: string;\n    readonly courses: readonly Course[];\n    readonly creditCount: Range;\n    readonly allowsOthers: boolean;\n    constructor({ id, name, description, courses, creditCount, allowsOthers = false }: RequirementWithCoursesInit) {\n        super({ id, name });\n        this.description = description;\n        this.courses = [...courses];\n        this.creditCount = creditCount;\n        this.allowsOthers = allowsOthers;\n    }\n    getRegisteredCreditCounts(plan: Plan, includesExcess: boolean): RegisteredCreditCounts {\n        const othersCount = plan.requirementToOthersCount.get(this) || { acquired: 0, registered: 0 };\n        const creditCounts = this.courses.reduce((previous, course): RegisteredCreditCounts => {\n            const courseStatus = plan.courseToStatus.get(course) || RegistrationStatus.Unregistered;\n            if (plan.courseToRequirement.get(course) === this) {\n                return courseStatus === RegistrationStatus.Acquired ?\n                    {\n                        acquired: previous.acquired + course.creditCount,\n                        registered: previous.registered + course.creditCount,\n                    } :\n                    courseStatus === RegistrationStatus.Registered ?\n                        {\n                            acquired: previous.acquired,\n                            registered: previous.registered + course.creditCount,\n                        } :\n                        previous;\n            } else {\n                return previous;\n            }\n        }, othersCount);\n        return includesExcess || this.creditCount === undefined ? creditCounts : {\n            acquired: Math.min(this.creditCount.max, creditCounts.acquired),\n            registered: Math.min(this.creditCount.max, creditCounts.registered),\n        };\n    }\n    getRequiredCreditCount() {\n        return this.creditCount;\n    }\n    getVisibleRequirements() {\n        return [this] as const;\n    }\n    toJSON(): RequirementWithCoursesJSON {\n        return {\n            name: this.name,\n            description: this.description,\n            courses: this.courses.map(course => course.code),\n            creditCount: this.creditCount,\n            allowsOthers: this.allowsOthers,\n        }\n    }\n}\n\ninterface Option {\n    name: string;\n    requirement: Requirements;\n}\n\nexport interface SelectionRequirementInit {\n    readonly id: string;\n    readonly name: string;\n    readonly options: Iterable<Option>;\n}\n\nexport class SelectionRequirement extends Requirement implements SelectionRequirementInit {\n    readonly name: string;\n    readonly options: readonly Option[];\n    readonly optionNameToRequirement: ReadonlyMap<string, Requirements>;\n    constructor({ id, name, options: options0 }: SelectionRequirementInit) {\n        super({ id, name });\n        this.name = name;\n        const options = [...options0];\n        this.options = options;\n        this.optionNameToRequirement = new Map(options.map(({ name, requirement }) => [name, requirement]));\n    }\n    getSelectedOptionName(selectionNameToOptionName: ReadonlyMap<string, string>) {\n        const selectedOptionName = selectionNameToOptionName.get(this.name) ?? this.options[0]!.name;\n        return selectedOptionName;\n    }\n    getSelectedRequirement(selectionNameToOptionName: ReadonlyMap<string, string>) {\n        const selectedOptionName = this.getSelectedOptionName(selectionNameToOptionName);\n        const selectedRequirement = this.optionNameToRequirement.get(selectedOptionName);\n        return selectedRequirement;\n    }\n    getRegisteredCreditCounts(plan: Plan, includesExcess: boolean): RegisteredCreditCounts {\n        const selectedRequirement = this.getSelectedRequirement(plan.selectionNameToOptionName);\n        if (selectedRequirement === undefined) {\n            return { acquired: 0, registered: 0 };\n        } else {\n            return selectedRequirement.getRegisteredCreditCounts(plan, includesExcess);\n        }\n    }\n    getRequiredCreditCount(selectionNameToOptionName: ReadonlyMap<string, string>): Range {\n        const selectedRequirement = this.getSelectedRequirement(selectionNameToOptionName);\n        if (selectedRequirement === undefined) {\n            return { min: 0, max: 0 };\n        } else {\n            return selectedRequirement.getRequiredCreditCount(selectionNameToOptionName);\n        }\n    }\n    getVisibleRequirements(selectionNameToOptionName: ReadonlyMap<string, string>): readonly RequirementWithCourses[] {\n        const selectedRequirement = this.getSelectedRequirement(selectionNameToOptionName);\n        if (selectedRequirement === undefined) {\n            return [];\n        } else {\n            return selectedRequirement.getVisibleRequirements(selectionNameToOptionName);\n        }\n    }\n    toJSON(): SelectionRequirementJSON {\n        return {\n            name: this.name,\n            options: this.options.map(({ name, requirement }) => ({\n                name,\n                requirement: requirement.toJSON(),\n            }))\n        }\n    }\n}\n","import type Course from \"../Course\";\nimport Requirements, { Range, RequirementWithChildren, RequirementWithCourses, SelectionRequirement } from \"./Requirements\";\nimport type RequirementsJSON from \"./RequirementsJSON\";\n\ninterface RequirementAndDictionary {\n    readonly requirement: Requirements;\n    readonly idToRequirement: ReadonlyMap<string, RequirementWithCourses>;\n}\n\nconst numberOrRangeToRange = (numberOrRange: number | Range): Range =>\n    typeof numberOrRange === 'number' ? {\n        min: numberOrRange,\n        max: numberOrRange,\n    } : numberOrRange;\n\nconst getInnerRequirementAndDictionaryFromJSON = (\n    json: RequirementsJSON,\n    codeToCourse: ReadonlyMap<string, Course>,\n    requirementNameToCount: Map<string, number>\n): RequirementAndDictionary => {\n    const count = requirementNameToCount.get(json.name) ?? 0;\n    requirementNameToCount.set(json.name, count + 1);\n    const id = `${json.name}_${count}`;\n    if ('courses' in json) {\n        const requirement = new RequirementWithCourses({\n            id,\n            name: json.name,\n            description: json.description,\n            creditCount: numberOrRangeToRange(json.creditCount),\n            courses: json.courses.map(courseCode => {\n                const course = codeToCourse.get(courseCode);\n                if (course === undefined) { throw new Error(`科目番号 ${courseCode} は定義されていません。`); }\n                return course;\n            }),\n            allowsOthers: json.allowsOthers,\n        });\n        return {\n            requirement,\n            idToRequirement: new Map([[requirement.id, requirement]]),\n        };\n    } else if ('children' in json) {\n        const requirementAndDictionaryPairs = json.children.map(child => getInnerRequirementAndDictionaryFromJSON(child, codeToCourse, requirementNameToCount));\n        const requirement = new RequirementWithChildren({\n            id,\n            name: json.name,\n            description: json.description,\n            children: requirementAndDictionaryPairs.map(({ requirement }) => requirement),\n            creditCount: json.creditCount === undefined ? undefined : numberOrRangeToRange(json.creditCount),\n        });\n        return {\n            requirement,\n            idToRequirement: new Map(\n                requirementAndDictionaryPairs.flatMap(({ idToRequirement }) => [...idToRequirement.entries()])\n            ),\n        };\n    } else {\n        const optionAndDictionaryArray = json.options.map(optionJSON => {\n            if ('requirement' in optionJSON) {\n                const { requirement, idToRequirement } = getInnerRequirementAndDictionaryFromJSON(optionJSON.requirement, codeToCourse, requirementNameToCount);\n                return {\n                    option: { requirement, name: optionJSON.name },\n                    idToRequirement,\n                };\n            } else {\n                const { requirement, idToRequirement } = getInnerRequirementAndDictionaryFromJSON(optionJSON, codeToCourse, requirementNameToCount);\n                return {\n                    option: { requirement, name: requirement.name },\n                    idToRequirement,\n                };\n            }\n        })\n        const requirement = new SelectionRequirement({\n            id,\n            name: json.name,\n            options: optionAndDictionaryArray.map(({ option }) => option),\n        });\n        return {\n            requirement,\n            idToRequirement: new Map(\n                optionAndDictionaryArray.flatMap(({ idToRequirement }) => [...idToRequirement.entries()])\n            ),\n        };\n    }\n};\n\nconst getRequirementAndDictionaryFromJSON = (\n    json: RequirementsJSON,\n    codeToCourse: ReadonlyMap<string, Course>\n) => getInnerRequirementAndDictionaryFromJSON(json, codeToCourse, new Map())\n\nexport default getRequirementAndDictionaryFromJSON;\n","import codeToCourse from '../courses';\nimport { getRequirementAndDictionaryFromJSON } from '../Requirements';\nimport coins17_0 from './coins17.json';\nimport klis17_0 from './klis17.json';\nimport mast17_0 from './mast17.json';\n\nconst requirementAndDictionaryPairs = new Map([\n    ['coins17', {\n        id: 'coins17',\n        name: '情報科学類 / 2017年度入学',\n        ...getRequirementAndDictionaryFromJSON(coins17_0, codeToCourse)\n    }],\n    ['mast17', {\n        id: 'mast17',\n        name: '情報メディア創成学類 / 2017年度入学',\n        ...getRequirementAndDictionaryFromJSON(mast17_0, codeToCourse)\n    }],\n    ['klis17', {\n        id: 'klis17',\n        name: '知識情報・図書館学類 / 2017年度入学',\n        ...getRequirementAndDictionaryFromJSON(klis17_0, codeToCourse)\n    }],\n]);\n\nexport default requirementAndDictionaryPairs;","import { RequirementRegistrationStatusBadge } from '../badges';\nimport type Plan from '../Plan';\nimport type Requirements from '../Requirements';\nimport type { RequirementWithChildren, RequirementWithCourses } from '../Requirements';\n\nconst CreditsCountLabelDelimiter = () => (<span className=\"text-muted\"> / </span>)\n\nconst ExceededCreditsCountLabel: React.FC<{ creditsCount: number }> = ({ creditsCount }) => (\n    <>\n        <span className=\"text-muted\">(</span>\n        +{creditsCount}\n        <span className=\"text-muted\">)</span>\n    </>\n);\n\nconst CreditsCountLabels: React.FC<{\n    requirement: Requirements,\n    plan: Plan,\n}> = ({ requirement, plan }) => {\n    const creditsCount = requirement.getRegisteredCreditCounts(plan, false);\n    const exceededCreditsCount = requirement.getRegisteredCreditCounts(plan, true);\n    const requiredCreditsCount = requirement.getRequiredCreditCount(plan.selectionNameToOptionName);\n\n    return (\n        <div>\n            <span>\n                <span className=\"text-muted\">修得</span>\n                <> </>\n                <strong className=\"text-success\">{creditsCount.acquired}</strong>\n                {exceededCreditsCount.acquired > creditsCount.acquired ? (<ExceededCreditsCountLabel creditsCount={exceededCreditsCount.acquired - creditsCount.acquired} />) : (<></>)}\n            </span>\n            <CreditsCountLabelDelimiter />\n            <span>\n                <span className=\"text-muted\">履修</span>\n                <> </>\n                <strong className=\"text-primary\">{creditsCount.registered}</strong>\n                {exceededCreditsCount.registered > creditsCount.registered ? (<ExceededCreditsCountLabel creditsCount={exceededCreditsCount.registered - creditsCount.registered} />) : (<></>)}\n            </span>\n            <CreditsCountLabelDelimiter />\n            <span>\n                <span className=\"text-muted\">必要</span>\n                <> </>\n                <strong>\n                    {\n                        requiredCreditsCount.min === requiredCreditsCount.max ?\n                            requiredCreditsCount.min :\n                            `${requiredCreditsCount.min}~${requiredCreditsCount.max}`\n                    }\n                </strong>\n            </span>\n        </div>\n    )\n};\n\nexport const RequirementSummaryView: React.FC<{\n    requirement: RequirementWithChildren | RequirementWithCourses,\n    plan: Plan,\n}> = ({ requirement, plan }) => {\n    const status = requirement.getStatus(plan);\n    return (\n        <>\n            <h5 className=\"d-flex justify-content-between align-items-center\">\n                <div>{requirement.name}</div>\n                <div className=\"ml-2 flex-shrink-0\" >\n                    <RequirementRegistrationStatusBadge status={status} />\n                </div>\n            </h5>\n            <div>\n                {requirement.description === undefined ? (<></>) : (<div className=\"text-muted\">{requirement.description}</div>)}\n                <CreditsCountLabels requirement={requirement} plan={plan} />\n            </div>\n        </>\n    );\n}\n","import { ListGroup } from 'react-bootstrap';\nimport type Course from '../Course';\nimport type FilterType from '../FilterType';\nimport type Plan from '../Plan';\nimport type { RegisteredCreditCounts } from '../Plan';\nimport type RegistrationStatusLockTarget from '../RegistrationStatusLockTarget';\nimport type { RequirementWithChildren, RequirementWithCourses } from '../Requirements';\nimport InnerRequirementView from './InnerRequirementView';\nimport { RequirementSummaryView } from './RequirementSummaryView';\n\nconst RequirementWithChildrenView: React.FC<{\n    requirement: RequirementWithChildren,\n    filterType: FilterType,\n    lockTarget: RegistrationStatusLockTarget,\n    plan: Plan,\n    onCourseClick: (course: Course, requirement: RequirementWithCourses) => void,\n    onOthersCountsChange: (requirement: RequirementWithCourses, newOthersCount: RegisteredCreditCounts) => void,\n    onSelectionChange: (selectionName: string, newOptionName: string) => void,\n}> = ({ requirement, filterType, lockTarget, plan, onCourseClick, onOthersCountsChange, onSelectionChange }) => (\n    <>\n        <RequirementSummaryView requirement={requirement} plan={plan} />\n        <ListGroup className=\"mt-3\">\n            {\n                requirement.children.map(child => (\n                    <ListGroup.Item key={child.id}>\n                        <InnerRequirementView\n                            requirement={child} plan={plan}\n                            filterType={filterType} lockTarget={lockTarget}\n                            onCourseClick={onCourseClick} onSelectionChange={onSelectionChange}\n                            onOthersCountsChange={onOthersCountsChange}\n                        />\n                    </ListGroup.Item>\n                ))\n            }\n        </ListGroup>\n    </>\n);\n\nexport default RequirementWithChildrenView;","import { useCallback } from 'react';\nimport { Badge, ListGroup, OverlayTrigger, Tooltip } from \"react-bootstrap\";\nimport { CourseRegistrationStatusBadge, DisabledCourseBadge } from '../badges';\nimport type Course from \"../Course\";\nimport Plan, { getNextStatus, isRegistrable, RegistrationStatus } from '../Plan';\nimport type RegistrationStatusLockTarget from '../RegistrationStatusLockTarget';\nimport type Requirements from \"../Requirements\";\nimport type { RequirementWithCourses } from \"../Requirements\";\n\nconst CourseListItem: React.FC<{\n    course: Course,\n    newRequirement: Requirements,\n    plan: Plan,\n    lockTarget: RegistrationStatusLockTarget,\n    onClick: () => void,\n}> = ({ course, onClick, newRequirement, plan, lockTarget }) => {\n    const status = plan.courseToStatus.get(course) ?? RegistrationStatus.Unregistered;\n    const currentRequirement = plan.courseToRequirement.get(course);\n    const isRegisteredButInvalid = status !== RegistrationStatus.Unregistered && currentRequirement !== newRequirement;\n    const isRegistrable0 = isRegistrable({\n        course,\n        courseToStatus: plan.courseToStatus\n    });\n    const action = (getNextStatus({ currentStatus: status, lockTarget }) !== status && isRegistrable0) || isRegisteredButInvalid;\n    const handleClick = useCallback(() => {\n        if (isRegistrable0) {\n            onClick();\n        }\n    }, [isRegistrable0, onClick]);\n\n    return (\n        <ListGroup.Item\n            action={action}\n            onClick={handleClick}\n            variant={\n                isRegisteredButInvalid ? 'dark' :\n                    status === RegistrationStatus.Acquired ? 'success' :\n                        status === RegistrationStatus.Registered ? 'primary' :\n                            undefined\n            }\n        >\n            <div className=\"d-flex justify-content-between align-items-center\">\n                <div>\n                    <div>{course.title}</div>\n                    <code>{course.code}</code>\n                </div>\n                <div className=\"ml-2 text-right flex-shrink-0\">\n                    {\n                        isRegisteredButInvalid ?\n                            (\n                                <OverlayTrigger\n                                    overlay={\n                                        <Tooltip id=\"tooltip1\">\n                                            {\n                                                currentRequirement === undefined ?\n                                                    'この科目はどの科目群にも割り当てられていないため、合計単位数の計算に含まれません。' :\n                                                    'この科目はほかの科目群に割り当てられているため、ここでは合計単位数の計算に含まれません。'\n                                            }\n                                        </Tooltip>\n                                    }\n                                >\n                                    {\n                                        currentRequirement === undefined ?\n                                            (<Badge variant=\"secondary\">?</Badge>) :\n                                            (<Badge variant=\"warning\">!</Badge>)\n                                    }\n                                </OverlayTrigger>\n                            ) :\n                            (<></>)\n                    }\n                    {\n                        isRegistrable0 ?\n                            (<CourseRegistrationStatusBadge status={status} />) :\n                            (<DisabledCourseBadge id=\"tooltip2\" />)\n                    }\n                    <div><span className=\"text-muted\">単位数</span> <strong>{course.creditCount}</strong></div>\n                </div>\n            </div>\n        </ListGroup.Item>\n    )\n};\n\nconst CourseList = ({ requirement, courses, plan, onCourseClick, lockTarget }: {\n    requirement: RequirementWithCourses,\n    courses: readonly Course[],\n    plan: Plan,\n    lockTarget: RegistrationStatusLockTarget\n    onCourseClick: (course: Course) => void,\n}) => (\n    <ListGroup>\n        {\n            courses.map((course: Course) => (\n                <CourseListItem\n                    key={course.code}\n                    course={course} plan={plan}\n                    newRequirement={requirement}\n                    lockTarget={lockTarget}\n                    onClick={() => onCourseClick(course)}\n                />\n            ))\n        }\n    </ListGroup>\n);\n\nexport default CourseList;","import { useCallback, useState } from 'react';\nimport { Button, ButtonToolbar, Card, Col, Collapse, Form } from 'react-bootstrap';\nimport type Course from '../Course';\nimport FilterType from '../FilterType';\nimport Plan, { RegisteredCreditCounts, RegistrationStatus } from '../Plan';\nimport type RegistrationStatusLockTarget from '../RegistrationStatusLockTarget';\nimport type { RequirementWithCourses } from '../Requirements';\nimport CourseList from './CourseList';\nimport { RequirementSummaryView } from './RequirementSummaryView';\nimport styles from './RequirementWithCoursesView.module.css';\n\nconst OthersCountInput: React.FC<{\n    currentOthersCount: RegisteredCreditCounts,\n    onReturn: (newOthersCount: RegisteredCreditCounts) => void,\n    onHide: () => void,\n}> = ({ currentOthersCount, onReturn, onHide }) => {\n    const [acquired, setAcquired] = useState<number | undefined>();\n    const [registeredExcludingAcquired, setRegisteredExcludingAcquired] = useState<number | undefined>();\n    const [registeredIncludingAcquired, setRegisteredIncludingAcquired] = useState<number | undefined>();\n\n    const computed = {\n        acquired: acquired ?? currentOthersCount.acquired,\n        registered:\n            registeredIncludingAcquired !== undefined ?\n                registeredIncludingAcquired :\n                registeredExcludingAcquired !== undefined ?\n                    (acquired !== undefined ? acquired : currentOthersCount.acquired) + registeredExcludingAcquired :\n                    acquired !== undefined ?\n                        currentOthersCount.registered + acquired - currentOthersCount.acquired :\n                        currentOthersCount.registered,\n    }\n\n    return (\n        <Card border=\"primary\">\n            <Card.Header>単位数を入力</Card.Header>\n            <Card.Body>\n                <Form onSubmit={(e: React.FormEvent<HTMLFormElement>) => {\n                    e.preventDefault();\n                    onReturn(computed);\n                    onHide();\n                }}>\n                    <Form.Row>\n                        <Form.Group as={Col} md=\"4\">\n                            <Form.Label>修得済みの単位数 <span className=\"text-muted\">(a)</span></Form.Label>\n                            <Form.Control\n                                type=\"number\"\n                                min={0}\n                                step={0.5}\n                                placeholder={`${computed.acquired}`}\n                                value={acquired === undefined ? '' : `${acquired}`}\n                                onChange={\n                                    (e: React.ChangeEvent<HTMLInputElement>) =>\n                                        setAcquired(e.target.value === '' ? undefined : +e.target.value)\n                                }\n                                isInvalid={computed.acquired < 0}\n                            />\n                            <Form.Control.Feedback type=\"invalid\">(a) &gt;= 0</Form.Control.Feedback>\n                        </Form.Group>\n                        <Form.Group as={Col} md=\"4\">\n                            <Form.Label>履修する単位数 <span className=\"text-muted\">(b)</span></Form.Label>\n                            <Form.Control\n                                type=\"number\"\n                                min={0}\n                                step={0.5}\n                                placeholder={`${computed.registered - computed.acquired}`}\n                                value={registeredExcludingAcquired === undefined ? '' : `${registeredExcludingAcquired}`}\n                                onChange={\n                                    (e: React.ChangeEvent<HTMLInputElement>) => {\n                                        if (e.target.value === '') {\n                                            setRegisteredExcludingAcquired(undefined);\n                                        } else {\n                                            setRegisteredExcludingAcquired(+e.target.value);\n                                            setRegisteredIncludingAcquired(undefined);\n                                        }\n                                    }\n                                }\n                                isInvalid={computed.acquired > computed.registered}\n                            />\n                            <Form.Control.Feedback type=\"invalid\">(b) &gt;= 0</Form.Control.Feedback>\n                        </Form.Group>\n                        <Form.Group as={Col} md=\"4\">\n                            <Form.Label>計 <span className=\"text-muted\">(a) + (b)</span></Form.Label>\n                            <Form.Control\n                                type=\"number\"\n                                min={0}\n                                step={0.5}\n                                placeholder={`${computed.registered}`}\n                                value={registeredIncludingAcquired === undefined ? '' : `${registeredIncludingAcquired}`}\n                                onChange={\n                                    (e: React.ChangeEvent<HTMLInputElement>) => {\n                                        if (e.target.value === '') {\n                                            setRegisteredIncludingAcquired(undefined);\n                                        } else {\n                                            setRegisteredIncludingAcquired(+e.target.value);\n                                            setRegisteredExcludingAcquired(undefined);\n                                        }\n                                    }\n                                }\n                            />\n                        </Form.Group>\n                    </Form.Row>\n                    <ButtonToolbar>\n                        <Button\n                            type=\"submit\"\n                            disabled={computed.acquired < 0 || computed.acquired > computed.registered}\n                        >\n                            OK\n                        </Button>\n                        <Button variant=\"secondary\" onClick={onHide}>キャンセル</Button>\n                    </ButtonToolbar>\n                </Form>\n            </Card.Body>\n        </Card>\n    )\n}\n\nconst RequirementWithCoursesView: React.FC<{\n    requirement: RequirementWithCourses,\n    filterType: FilterType,\n    lockTarget: RegistrationStatusLockTarget,\n    plan: Plan,\n    onCourseClick: (course: Course, requirement: RequirementWithCourses) => void,\n    onOthersCountsChange: (newOthersCount: RegisteredCreditCounts) => void,\n}> = ({ requirement, filterType, lockTarget, plan, onCourseClick, onOthersCountsChange }) => {\n    const [open, setOpen] = useState(false);\n    const [showsInput, setShowsInput] = useState(false);\n\n    const courses = requirement.courses.filter(course =>\n        filterType === FilterType.None ||\n        (plan.courseToStatus.has(course) && plan.courseToStatus.get(course) !== RegistrationStatus.Unregistered)\n    ).filter(course => filterType !== FilterType.Valid || requirement === plan.courseToRequirement.get(course));\n\n    const onCollapseExiting = useCallback((e: HTMLElement) => {\n        const root = e.closest(`.${styles.RequirementWithCoursesView}`);\n        if (root === null) { throw new Error(); }\n        const rect = root.getBoundingClientRect();\n        const sticky = root.getElementsByClassName('sticky-top')[0];\n        if (sticky === undefined) { throw new Error(); }\n        const stickyTop = parseInt(getComputedStyle(sticky).getPropertyValue('--top'));\n        if (rect.top < stickyTop) {\n            window.scrollTo({\n                top: window.scrollY + rect.top - stickyTop,\n            });\n        }\n    }, []);\n\n    return (\n        <div className={styles.RequirementWithCoursesView}>\n            <div className=\"sticky-top\">\n                <RequirementSummaryView requirement={requirement} plan={plan} />\n                {\n                    courses.length === 0 ?\n                        requirement.allowsOthers ? (\n                            showsInput ? (<></>) : (\n                                <Button block className=\"mt-3\" variant=\"secondary\" onClick={() => setShowsInput(true)}>\n                                    単位数を入力\n                                </Button>\n                            )\n                        ) : (\n                                <Button block className=\"mt-3\" variant=\"outline-secondary\" disabled>\n                                    {filterType === FilterType.None ? '' : '履修する'}科目はありません\n                                </Button>\n                            ) : (\n                            <Button\n                                block className=\"mt-3\"\n                                onClick={() => setOpen(!open)}\n                                variant={open ? 'primary' : 'outline-secondary'}\n                            >\n                                {filterType === FilterType.None ? '' : '履修する'}科目を{open ? '非' : ''}表示\n                            </Button>\n                        )\n                }\n            </div>\n            {\n                showsInput ? (\n                    <div className=\"mt-3\">\n                        <OthersCountInput\n                            currentOthersCount={plan.requirementToOthersCount.get(requirement) || { acquired: 0, registered: 0 }}\n                            onReturn={onOthersCountsChange} onHide={() => setShowsInput(false)}\n                        />\n                    </div>\n                ) : (<></>)\n            }\n            <Collapse in={open && courses.length !== 0} onExiting={onCollapseExiting}>\n                {\n                    <div>\n                        <div className=\"mt-3\">\n                            <CourseList\n                                courses={courses} plan={plan}\n                                requirement={requirement} lockTarget={lockTarget}\n                                onCourseClick={course => onCourseClick(course, requirement)}\n                            />\n                        </div>\n                    </div>\n                }\n            </Collapse>\n        </div>\n    );\n}\n\nexport default RequirementWithCoursesView;","import { useCallback } from 'react';\nimport { Form, InputGroup } from 'react-bootstrap';\nimport type Course from '../Course';\nimport type FilterType from '../FilterType';\nimport type Plan from '../Plan';\nimport type { RegisteredCreditCounts } from '../Plan';\nimport type RegistrationStatusLockTarget from '../RegistrationStatusLockTarget';\nimport type { RequirementWithCourses, SelectionRequirement } from '../Requirements';\nimport InnerRequirementView from './InnerRequirementView';\n\nconst SelectionRequirementView: React.FC<{\n    requirement: SelectionRequirement,\n    filterType: FilterType,\n    lockTarget: RegistrationStatusLockTarget,\n    plan: Plan,\n    onCourseClick: (course: Course, requirement: RequirementWithCourses) => void,\n    onOthersCountsChange: (requirement: RequirementWithCourses, newOthersCount: RegisteredCreditCounts) => void,\n    onSelectionChange: (selectionName: string, newOptionName: string) => void,\n}> = ({ requirement, filterType, lockTarget, plan, onCourseClick, onOthersCountsChange, onSelectionChange }) => {\n    const selectedOptionName = requirement.getSelectedOptionName(plan.selectionNameToOptionName);\n    const selectedRequirement = requirement.getSelectedRequirement(plan.selectionNameToOptionName);\n\n    const handleSelectionChange = useCallback((e: React.ChangeEvent<HTMLSelectElement>) => {\n        onSelectionChange(requirement.name, e.target.value);\n    }, [onSelectionChange, requirement.name]);\n\n    return (\n        <>\n            <InputGroup>\n                <InputGroup.Prepend>\n                    <InputGroup.Text>{requirement.name}</InputGroup.Text>\n                </InputGroup.Prepend>\n                <Form.Control as=\"select\" custom value={selectedOptionName} onChange={handleSelectionChange}>\n                    {\n                        requirement.options.map(option => (<option key={option.name}>{option.name}</option>))\n                    }\n                </Form.Control>\n            </InputGroup>\n            {\n                selectedRequirement === undefined ? (<></>) : (\n                    <div className=\"mt-3\">\n                        <InnerRequirementView\n                            requirement={selectedRequirement} plan={plan}\n                            filterType={filterType} lockTarget={lockTarget}\n                            onCourseClick={onCourseClick} onOthersCountsChange={onOthersCountsChange}\n                            onSelectionChange={onSelectionChange}\n                        />\n                    </div>\n                )\n            }\n        </>\n    );\n}\n\nexport default SelectionRequirementView;","import type Course from \"../Course\";\nimport type FilterType from '../FilterType';\nimport type Plan from '../Plan';\nimport type { RegisteredCreditCounts } from '../Plan';\nimport type RegistrationStatusLockTarget from '../RegistrationStatusLockTarget';\nimport Requirements, { RequirementWithChildren, RequirementWithCourses } from \"../Requirements\";\nimport RequirementWithChildrenView from './RequirementWithChildrenView';\nimport RequirementWithCoursesView from './RequirementWithCoursesView';\nimport SelectionRequirementView from './SelectionRequirementView';\n\nconst InnerRequirementView: React.FC<{\n    requirement: Requirements,\n    filterType: FilterType,\n    lockTarget: RegistrationStatusLockTarget,\n    plan: Plan,\n    onCourseClick: (course: Course, requirement: RequirementWithCourses) => void,\n    onOthersCountsChange: (requirement: RequirementWithCourses, newOthersCount: RegisteredCreditCounts) => void,\n    onSelectionChange: (selectionName: string, newOptionName: string) => void,\n}> = ({ requirement, filterType, lockTarget, plan, onCourseClick, onOthersCountsChange, onSelectionChange }) => {\n    if (requirement instanceof RequirementWithChildren) {\n        return (\n            <RequirementWithChildrenView\n                requirement={requirement} plan={plan}\n                filterType={filterType} lockTarget={lockTarget}\n                onCourseClick={onCourseClick} onOthersCountsChange={onOthersCountsChange} onSelectionChange={onSelectionChange}\n            />\n        )\n    } else if (requirement instanceof RequirementWithCourses) {\n        return (\n            <RequirementWithCoursesView\n                requirement={requirement} plan={plan}\n                filterType={filterType} lockTarget={lockTarget}\n                onCourseClick={onCourseClick}\n                onOthersCountsChange={creditsCounts => onOthersCountsChange(requirement, creditsCounts)}\n            />\n        )\n    } else {\n        return (\n            <SelectionRequirementView\n                requirement={requirement} plan={plan}\n                filterType={filterType} lockTarget={lockTarget}\n                onCourseClick={onCourseClick} onOthersCountsChange={onOthersCountsChange} onSelectionChange={onSelectionChange}\n            />\n        );\n    }\n}\n\nexport default InnerRequirementView;\n","import { useState } from \"react\";\nimport { Button, Card, Modal } from \"react-bootstrap\";\nimport type Plan from \"../Plan\";\nimport type { RequirementWithCourses } from \"../Requirements\";\nimport { RequirementSummaryView } from \"./RequirementSummaryView\";\n\nconst ReassignmentConfirmationModal: React.FC<{\n    currentRequirement: RequirementWithCourses,\n    plan: Plan,\n    onReturn: (value: boolean) => void,\n    onExited: () => void,\n}> = ({ currentRequirement, plan, onReturn, onExited }) => {\n    const [show, setShow] = useState(true);\n\n    return (\n        <Modal show={show} onHide={() => { setShow(false); onReturn(false); }} onExited={onExited}>\n            <Modal.Header closeButton>\n                <Modal.Title>科目群の割り当てを変更</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <p>\n                    この科目は、すでに以下の科目群に割り当てられています。\n                    <strong>続けると、この科目群への割り当ては解除されます。</strong>\n                </p>\n                <p>各科目に割り当てできる科目群は1つまでです。</p>\n                <Card body>\n                    <RequirementSummaryView requirement={currentRequirement} plan={plan} />\n                </Card>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={() => { setShow(false); onReturn(false); }}>キャンセル</Button>\n                <Button variant=\"primary\" onClick={() => { setShow(false); onReturn(true); }}>続ける</Button>\n            </Modal.Footer>\n        </Modal>\n    );\n};\n\nexport default ReassignmentConfirmationModal;","import type Course from '../Course';\nimport type FilterType from '../FilterType';\nimport getValueFromModal, { useModals } from '../getValueFromModal';\nimport Plan, { getNextStatus, RegisteredCreditCounts, RegistrationStatus } from '../Plan';\nimport type RegistrationStatusLockTarget from '../RegistrationStatusLockTarget';\nimport type Requirements from '../Requirements';\nimport type { RequirementWithCourses } from '../Requirements';\nimport InnerRequirementView from './InnerRequirementView';\nimport ReassignmentConfirmationModal from './ReassignmentConfirmationModal';\n\nconst RequirementView = ({ requirement, plan, filterType, lockTarget, onChange }: {\n    requirement: Requirements,\n    filterType: FilterType,\n    lockTarget: RegistrationStatusLockTarget,\n    plan: Plan,\n    onChange: (newPlan: Plan) => void,\n}) => {\n    const { courseToStatus, courseToRequirement, requirementToOthersCount, selectionNameToOptionName } = plan;\n    const { modals, setModalsAndCount } = useModals();\n\n    const handleCourseClick = async (course: Course, requirement: RequirementWithCourses) => {\n        const currentStatus: RegistrationStatus = courseToStatus.get(course) || RegistrationStatus.Unregistered;\n        const currentRequirement = courseToRequirement.get(course);\n        let nextCourseToStatus = courseToStatus;\n        if (currentStatus === RegistrationStatus.Unregistered || currentRequirement === requirement) {\n            const nextStatus = getNextStatus({ currentStatus, lockTarget });\n            nextCourseToStatus = new Map([...courseToStatus, [course, nextStatus]]);\n        } else if (\n            currentRequirement !== undefined &&\n            !await getValueFromModal(\n                ReassignmentConfirmationModal,\n                { currentRequirement, plan },\n                setModalsAndCount\n            )\n        ) {\n            return;\n        }\n        onChange({\n            ...plan,\n            courseToStatus: nextCourseToStatus,\n            courseToRequirement: new Map([...courseToRequirement, [course, requirement]]),\n        });\n    }\n\n    const handleOthersCountsChange = (requirement: RequirementWithCourses, newOthersCount: RegisteredCreditCounts) => {\n        onChange({\n            ...plan,\n            requirementToOthersCount: new Map([\n                ...requirementToOthersCount,\n                [requirement, newOthersCount]\n            ]),\n        });\n    }\n\n    const handleSelectionChange = (selectionName: string, newOptionName: string) => {\n        const nextSelectionNameToOptionName = new Map([...selectionNameToOptionName, [selectionName, newOptionName]]);\n        const visibleRequirements = requirement.getVisibleRequirements(nextSelectionNameToOptionName);\n        const nextCourseToRequirement = new Map([...courseToRequirement.entries()].filter(\n            ([_, requirement]) => visibleRequirements.includes(requirement)\n        ));\n        onChange({\n            ...plan,\n            courseToRequirement: nextCourseToRequirement,\n            selectionNameToOptionName: nextSelectionNameToOptionName,\n        });\n    }\n\n    return (\n        <>\n            {modals}\n            <InnerRequirementView\n                requirement={requirement} plan={plan}\n                filterType={filterType} lockTarget={lockTarget}\n                onCourseClick={handleCourseClick} onOthersCountsChange={handleOthersCountsChange}\n                onSelectionChange={handleSelectionChange}\n            />\n        </>\n    );\n}\n\nexport default RequirementView;","import 'bootstrap/dist/css/bootstrap.min.css';\nimport { useState } from 'react';\nimport { Alert, ButtonToolbar, Card, Container, Dropdown, Form, Nav, Navbar, Tab } from 'react-bootstrap';\nimport { HashRouter, Link, Redirect, Route, Switch, useParams } from 'react-router-dom';\nimport { useLocalStorage } from 'react-use';\nimport './App.css';\nimport { AssignmentsFindButton } from './AssignmentsFindView';\nimport { RequirementRegistrationStatusBadge } from './badges';\nimport CollectivelyCourseSetView from './CollectivelyCourseSetView';\nimport codeToCourse from './courses';\nimport ExportView from './ExportView';\nimport FilterType from './FilterType';\nimport ImportView from './ImportView';\nimport Plan, { emptyPlan, fromJSON, PlanJSON, RegistrationStatus, toJSON } from './Plan';\nimport RegistrationStatusLockTarget from './RegistrationStatusLockTarget';\nimport requirementAndDictionaryPairs from './requirementInstances';\nimport type Requirements from './Requirements';\nimport type { RequirementWithCourses } from './Requirements';\nimport RequirementView from './RequirementView';\n\nconst StatusAlert: React.FC<{\n    requirement: Requirements,\n    plan: Plan,\n}> = ({ requirement, plan }) => {\n    const status = requirement.getStatus(plan);\n    const variant = status === RegistrationStatus.Acquired ? 'success' : status === RegistrationStatus.Registered ? 'primary' : 'secondary';\n\n    return (\n        <Alert variant={variant} className=\"d-flex align-items-center\">\n            <div className=\"mr-2\">\n                <RequirementRegistrationStatusBadge status={status} />\n            </div>\n            現在の\n            {\n                status === RegistrationStatus.Acquired ? '修得状況は要件を満たしています。' :\n                    status === RegistrationStatus.Registered ? '履修状況は要件を満たしていますが、修得状況は要件を満たしていません。' :\n                        '履修状況は要件を満たしていません。'\n            }\n        </Alert>\n    );\n}\n\nconst RequirementWithConfiguration: React.FC<{\n    requirement: Requirements,\n    idToRequirement: ReadonlyMap<string, RequirementWithCourses>,\n    plan: Plan,\n    setPlan: (nextPlan: Plan) => void,\n}> = ({ requirement, idToRequirement, plan, setPlan }) => {\n    const [filterType, setFilterType] = useState(FilterType.None);\n    const { lockTarget, setLockTarget } = useLockTarget(filterType);\n\n    return (\n        <>\n            <Tab.Container defaultActiveKey=\"general\">\n                <Card className=\"mb-3\">\n                    <Card.Header>\n                        <Nav variant=\"tabs\">\n                            <Nav.Item>\n                                <Nav.Link eventKey=\"general\">一般</Nav.Link>\n                            </Nav.Item>\n                            <Nav.Item>\n                                <Nav.Link eventKey=\"backup\">バックアップ</Nav.Link>\n                            </Nav.Item>\n                        </Nav>\n                    </Card.Header>\n                    <Card.Body>\n                        <Tab.Content>\n                            <Tab.Pane eventKey=\"general\">\n                                <Form.Group>\n                                    <Form.Label>履修状況のロック</Form.Label>\n                                    {\n                                        [\n                                            {\n                                                label: \"ロックしない\",\n                                                lockTarget: RegistrationStatusLockTarget.None,\n                                                disabled: filterType !== FilterType.None,\n                                            },\n                                            {\n                                                label: \"[履修する] と [修得済み] の間の変更のみ許可\",\n                                                lockTarget: RegistrationStatusLockTarget.Unregistered,\n                                            },\n                                            {\n                                                label: \"[履修しない] と [履修する] の間の変更のみ許可\",\n                                                lockTarget: RegistrationStatusLockTarget.Acquired,\n                                                disabled: filterType !== FilterType.None,\n                                            },\n                                            {\n                                                label: \"すべてロックする\",\n                                                lockTarget: RegistrationStatusLockTarget.All,\n                                            },\n                                        ].map(({ label, disabled, lockTarget: lockTarget1 }) => (\n                                            <Form.Check\n                                                custom type=\"radio\"\n                                                id={`lockTargetCheck${lockTarget1}`}\n                                                label={label} key={lockTarget1}\n                                                disabled={disabled}\n                                                checked={lockTarget === lockTarget1}\n                                                onChange={() => setLockTarget(lockTarget1)}\n                                            />\n                                        ))\n                                    }\n                                </Form.Group>\n                                <Form.Group>\n                                    <Form.Check\n                                        custom\n                                        id=\"filterTypeCheck0\"\n                                        label=\"履修する科目のみ表示\"\n                                        checked={filterType !== FilterType.None}\n                                        onChange={\n                                            () => {\n                                                if (filterType === FilterType.None) {\n                                                    setFilterType(FilterType.Registered);\n                                                } else {\n                                                    setFilterType(FilterType.None);\n                                                }\n                                            }\n                                        }\n                                    />\n                                    <Form.Check\n                                        custom\n                                        id=\"filterTypeCheck1\"\n                                        label=\"単位数の計算に含まれる科目のみ表示\"\n                                        checked={filterType === FilterType.Valid}\n                                        onChange={\n                                            () => {\n                                                if (filterType === FilterType.Valid) {\n                                                    setFilterType(FilterType.Registered);\n                                                } else {\n                                                    setFilterType(FilterType.Valid);\n                                                }\n                                            }\n                                        }\n                                    />\n                                </Form.Group>\n                                <ButtonToolbar>\n                                    <CollectivelyCourseSetView\n                                        requirement={requirement}\n                                        codeToCourse={codeToCourse}\n                                        idToRequirement={idToRequirement}\n                                        plan={plan}\n                                        onSubmit={setPlan}\n                                    />\n                                    <AssignmentsFindButton\n                                        requirement={requirement}\n                                        idToRequirement={idToRequirement}\n                                        codeToCourse={codeToCourse}\n                                        plan={plan}\n                                        onSubmit={setPlan}\n                                    />\n                                </ButtonToolbar>\n                            </Tab.Pane>\n                            <Tab.Pane eventKey=\"backup\">\n                                <p>作業内容はブラウザに自動保存されますが、別にバックアップをとれます。</p>\n                                <ExportView plan={plan} />\n                                <hr />\n                                <ImportView\n                                    onSubmit={setPlan}\n                                    codeToCourse={codeToCourse}\n                                    idToRequirement={idToRequirement}\n                                />\n                            </Tab.Pane>\n                        </Tab.Content>\n                    </Card.Body>\n                </Card>\n            </Tab.Container>\n            <StatusAlert requirement={requirement} plan={plan} />\n            <div className=\"mb-3\">\n                <RequirementView\n                    requirement={requirement}\n                    lockTarget={lockTarget} filterType={filterType}\n                    plan={plan} onChange={setPlan}\n                />\n            </div>\n        </>\n    );\n}\n\nconst InnerMain: React.FC<{\n    requirement: Requirements;\n    idToRequirement: ReadonlyMap<string, RequirementWithCourses>;\n    requirementId: string;\n    requirementName: string;\n}> = ({ requirement, idToRequirement, requirementId, requirementName }) => {\n    const { plan, setPlan } = usePlan(requirementId);\n\n    return (\n        <>\n            <Dropdown className=\"mb-3\">\n                <Dropdown.Toggle id=\"department-dropdown\" variant=\"secondary\">\n                    <span\n                        style={{\n                            overflow: 'hidden',\n                            textOverflow: 'ellipsis',\n                        }}\n                    >\n                        学類\n                    <> : </>\n                        <strong>{requirementName}</strong>\n                    </span>\n                </Dropdown.Toggle>\n                <Dropdown.Menu>\n                    {\n                        [...requirementAndDictionaryPairs.values()].map(\n                            ({ id, name }) => (\n                                <Dropdown.Item as={Link} to={`/${id}`} active={id === requirementId} key={id}>\n                                    {name}\n                                </Dropdown.Item>\n                            )\n                        )\n                    }\n                </Dropdown.Menu>\n            </Dropdown>\n            <RequirementWithConfiguration requirement={requirement} idToRequirement={idToRequirement} plan={plan} setPlan={setPlan} />\n        </>\n    );\n}\n\nconst Main: React.FC = () => {\n    const { requirementId }: { requirementId: string } = useParams();\n    if (requirementId === undefined) {\n        return (<Redirect to=\"/\" />);\n    }\n\n    const {\n        requirement,\n        idToRequirement,\n        name: requirementName,\n    } = requirementAndDictionaryPairs.get(requirementId) ?? {};\n    if (requirement === undefined || idToRequirement === undefined || requirementName === undefined) {\n        return (<Redirect to=\"/\" />);\n    }\n\n    return (\n        <InnerMain\n            requirement={requirement}\n            idToRequirement={idToRequirement}\n            requirementId={requirementId}\n            requirementName={requirementName}\n        />\n    );\n}\n\nconst App: React.FC = () => (\n    <HashRouter>\n        <Navbar variant=\"dark\" bg=\"dark\">\n            <Navbar.Brand>卒業要件を満たしたい</Navbar.Brand>\n        </Navbar>\n        <Container>\n            <Alert variant=\"danger\" className=\"my-3\">\n                このツールの結果を利用する場合、必ず履修要覧や支援室などでその結果が正しいことを確認するようにしてください。\n                <strong>科目や要件の定義が誤っていることや、実際には認められない履修の組み合わせが存在することがあります。</strong>\n            </Alert>\n            <Switch>\n                <Route path=\"/:requirementId\">\n                    <Main />\n                </Route>\n                <Route path=\"/\">\n                    <Redirect to=\"/coins17\" />\n                </Route>\n            </Switch>\n        </Container>\n    </HashRouter>\n);\n\nconst useLockTarget = (filterType: FilterType) => {\n    const [lockTarget, setLockTarget] = useState(RegistrationStatusLockTarget.None);\n\n    if (filterType === FilterType.None) {\n        return { lockTarget, setLockTarget };\n    } else if (lockTarget === RegistrationStatusLockTarget.None) {\n        return {\n            lockTarget: RegistrationStatusLockTarget.Unregistered,\n            setLockTarget,\n        };\n    } else if (lockTarget === RegistrationStatusLockTarget.Acquired) {\n        return {\n            lockTarget: RegistrationStatusLockTarget.All,\n            setLockTarget,\n        };\n    } else {\n        return { lockTarget, setLockTarget };\n    }\n}\n\nconst COURSES_STATE = \"courses-state\"\n\nconst usePlanMap = () => {\n    const [storedJSON, setStoredJSON] = useLocalStorage<readonly (readonly [string, PlanJSON])[]>(COURSES_STATE);\n    const [planMap0, setPlanMap0] = useState(() => {\n        if (storedJSON === undefined) {\n            const storedPlanMap: ReadonlyMap<string, Plan> = new Map();\n            return storedPlanMap;\n        } else {\n            try {\n                const storedPlanEntries = storedJSON.map(([requirementName, planJSON]) => {\n                    const idToRequirement = requirementAndDictionaryPairs.get(requirementName)?.idToRequirement;\n                    if (idToRequirement === undefined) {\n                        return undefined;\n                    } else {\n                        try {\n                            return [requirementName, fromJSON(planJSON, { codeToCourse, idToRequirement })] as const;\n                        } catch {\n                            return undefined;\n                        }\n                    }\n                }).filter((value): value is NonNullable<typeof value> => value !== undefined);\n                const storedPlanMap: ReadonlyMap<string, Plan> = new Map(storedPlanEntries);\n                return storedPlanMap;\n            } catch {\n                const storedPlanMap: ReadonlyMap<string, Plan> = new Map();\n                return storedPlanMap;\n            }\n        }\n    });\n    const setPlanMap = (newPlanMap: ReadonlyMap<string, Plan>) => {\n        const planJSONEntries = [...newPlanMap].map(([requirementName, plan]) => [requirementName, toJSON(plan)] as const);\n        setPlanMap0(newPlanMap);\n        setStoredJSON(planJSONEntries);\n    };\n    return {\n        planMap: planMap0,\n        setPlanMap,\n    };\n}\n\nconst usePlan = (requirementName: string) => {\n    const { planMap, setPlanMap } = usePlanMap();\n\n    const plan = planMap.get(requirementName) || emptyPlan;\n    const setPlan = (newPlan: Plan) => {\n        const newPlanMap = new Map([\n            ...planMap,\n            [requirementName, newPlan]\n        ]);\n        setPlanMap(newPlanMap);\n    };\n\n    return { plan, setPlan };\n}\n\nexport default App;","import type { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"RequirementWithCoursesView\":\"RequirementWithCoursesView_RequirementWithCoursesView__2_BVH\"};"],"sourceRoot":""}