{"version":3,"sources":["Plan.ts","getValueFromModal.tsx","CollectivelyCourseSetView.tsx","courses/index.ts","FilterType.ts","ExportView.tsx","RegistrationStatusLockTarget.ts","ImportView.tsx","Requirements/getRequirementAndDictionaryFromJSON.ts","Requirements/index.ts","requirementInstances/index.ts","RequirementView/RequirementSummaryView.tsx","RequirementView/CourseMovementConfirmationModal.tsx","RequirementView/getNextStatus.ts","RequirementView/RequirementWithChildrenView.tsx","RequirementView/CourseList.tsx","RequirementView/RequirementWithCoursesView.tsx","RequirementView/SelectionRequirementView.tsx","RequirementView/InnerRequirementView.tsx","RequirementView/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["RegistrationStatus","initialModalsAndCount","modals","count","useModals","useState","modalsAndCount","setModalsAndCount","getValueFromModal","ModalType","props","a","Promise","resolve","reject","modal","onReturn","value","onExited","filter","key","e","toJSON","courseToStatus","courseToRequirement","requirementToOthersCount","selectionNameToOptionName","map","course","status","code","requirement","name","creditsCounts","fromJSON","json","codeToCourse","nameToRequirement","Map","get","undefined","Error","courseCode","requirementName","emptyPlan","placeholder","join","CollectivelyCourseSetConfirmationModal","show","setShow","Modal","onHide","Header","closeButton","Title","Body","Footer","Button","variant","onClick","CodesInput","label","onChange","setValue","coursesCount","setCoursesCount","undefinedCodes","setUndefinedCodes","Form","Group","as","Col","Label","Control","className","rows","nextValue","target","codes","split","line","trim","courses","Set","nextUndefinedCodes","has","size","Text","length","reduce","previous","current","CollectivelyCourseSetView","eventKey","onSubmit","registeredCourses","setRegisteredCourses","acquiredCourses","setAcquiredCourses","toggle","useAccordionToggle","handleSubmit","preventDefault","Registered","Acquired","coursesOfIntersection","intersection","Card","Accordion","Toggle","Collapse","Row","Alert","title","type","set","FilterType","ExportView","plan","readOnly","JSON","stringify","onFocus","select","RegistrationStatusLockTarget","ImportConfirmationModal","ImportView","jsonString","setJSONString","nextPlan","parse","isInvalid","Feedback","disabled","numberOrRangeToRange","numberOrRange","isRange","min","max","getRequirementAndDictionaryFromJSON","getInnerRequirementAndDictionaryFromJSON","selectionNameToCount","RequirementWithCourses","description","creditsCount","allowsOthers","requirementAndDictionaryPairs","children","child","RequirementWithChildren","flatMap","dictionary","entries","selectionCount","selectionName","optionAndDictionaryArray","options","optionJSON","option","SelectionRequirement","Requirement","requiredCreditsCount","this","getRequiredCreditsCount","registeredCreditsCounts","getRegisteredCreditsCount","acquired","registered","Unregistered","obj","isCompatible","$object","$number","includesExcess","childRegisteredCreditsCount","Math","childRequiredCreditsCount","getStatus","othersCount","courseStatus","options0","optionNameToRequirement","selectedOptionName","getSelectedOptionName","selectedRequirement","getSelectedRequirement","id","coins17_0","mast17_0","klis17_0","CreditsCountLabelDelimiter","ExceededCreditsCountLabel","CreditsCountLabels","exceededCreditsCount","RequirementSummaryView","Badge","CourseMovementConfirmationModal","currentRequirement","body","getNextStatus","currentStatus","lockTarget","All","RequirementWithChildrenView","filterType","onCourseClick","onOthersCountsChange","onSelectionChange","ListGroup","Item","CourseListItem","newRequirement","isRegisteredButInvalid","some","course1","isRegistrable","action","OverlayTrigger","overlay","Tooltip","CourseList","OthersCountInput","currentOthersCount","setAcquired","registeredExcludingAcquired","setRegisteredExcludingAcquired","registeredIncludingAcquired","setRegisteredIncludingAcquired","computed","border","md","ButtonToolbar","RequirementWithCoursesView","isOpen","setIsOpen","showsInput","setShowsInput","None","Valid","activeKey","block","SelectionRequirementView","Dropdown","style","overflow","textOverflow","Menu","zIndex","active","newOptionName","InnerRequirementView","RequirementView","handleCourseClick","nextCourseToStatus","nextStatus","clearCourseToRequirementInSelection","newCourseToRequirement","clearCourseToRequirement","delete","newOthersCount","RequirementWithConfiguration","setPlan","setFilterType","useLockTarget","setLockTarget","lockTarget1","Check","custom","checked","InnerMain","selectedId","usePlan","selectedName","to","values","Link","Main","requirementId","useParams","useLocalStorage","storedJSON","setStoredJSON","storedPlanEntries","planJSON","planMap0","setPlanMap0","planMap","setPlanMap","newPlanMap","planJSONEntries","usePlanMap","newPlan","App","Navbar","bg","Brand","Container","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bcea5da1.chunk.js","sourcesContent":["import Course from \"./Course\";\nimport { RequirementWithCourses } from \"./Requirements\";\n\nexport interface RegisteredCreditsCounts {\n    acquired: number;\n    registered: number;\n}\n\nexport default interface Plan {\n    readonly courseToStatus: ReadonlyMap<Course, RegistrationStatus>;\n    readonly courseToRequirement: ReadonlyMap<Course, RequirementWithCourses>;\n    readonly requirementToOthersCount: ReadonlyMap<RequirementWithCourses, RegisteredCreditsCounts>;\n    readonly selectionNameToOptionName: ReadonlyMap<string, string>;\n}\n\nexport type CourseCode = string;\nexport type RequirementName = string;\n\nexport enum RegistrationStatus {\n    Unregistered = 0,\n    Registered = 1,\n    Acquired = 2,\n}\n\nexport interface PlanJSON {\n    readonly courseToStatus: readonly [CourseCode, RegistrationStatus][];\n    readonly courseToRequirement: readonly [CourseCode, RequirementName][];\n    readonly requirementToOthersCount: readonly [RequirementName, RegisteredCreditsCounts][];\n    readonly selectionNameToOptionName: readonly [string, string][];\n}\n\nexport const toJSON =\n    ({ courseToStatus, courseToRequirement, requirementToOthersCount, selectionNameToOptionName }: Plan): PlanJSON => ({\n        courseToStatus: [...courseToStatus].map(([course, status]) => [course.code, status]),\n        courseToRequirement: [...courseToRequirement].map(([course, requirement]) => [course.code, requirement.name]),\n        requirementToOthersCount: [...requirementToOthersCount].map(([requirement, creditsCounts]) => [requirement.name, creditsCounts]),\n        selectionNameToOptionName: [...selectionNameToOptionName],\n    });\n\nexport const fromJSON = (json: PlanJSON, { codeToCourse, nameToRequirement }: {\n    codeToCourse: ReadonlyMap<CourseCode, Course>,\n    nameToRequirement: ReadonlyMap<RequirementName, RequirementWithCourses>,\n}): Plan => {\n    const courseToStatus = new Map([...json.courseToStatus].map(([code, status]) => {\n        const course = codeToCourse.get(code);\n        if (course === undefined) { throw new Error(); }\n        return [course, status];\n    }));\n\n    const courseToRequirement = new Map([...json.courseToRequirement].map(([courseCode, requirementName]) => {\n        const course = codeToCourse.get(courseCode);\n        const requirement = nameToRequirement.get(requirementName);\n\n        if (course === undefined) { throw new Error(); }\n        if (requirement === undefined) { throw new Error(); }\n\n        return [course, requirement];\n    }));\n\n    const requirementToOthersCount = new Map([...json.requirementToOthersCount].map(([requirementName, creditsCounts]) => {\n        const requirement = nameToRequirement.get(requirementName);\n        if (requirement === undefined) { throw new Error(); }\n        return [requirement, creditsCounts];\n    }));\n\n    const selectionNameToOptionName = new Map(json.selectionNameToOptionName);\n\n    return { courseToStatus, courseToRequirement, requirementToOthersCount, selectionNameToOptionName }\n}\n\nexport const emptyPlan: Plan = {\n    courseToStatus: new Map(),\n    courseToRequirement: new Map(),\n    requirementToOthersCount: new Map(),\n    selectionNameToOptionName: new Map(),\n};","import React, { useState } from 'react';\n\nconst getValueFromModal = async <T, P>(\n    ModalType: React.ComponentType<{\n        onReturn: (value: T) => void,\n        onExited: () => void,\n    } & P>,\n    props: P,\n    setModalsAndCount: React.Dispatch<React.SetStateAction<ModalsAndCount>>,\n): Promise<T> => new Promise((resolve, reject) => {\n    try {\n        setModalsAndCount(({ modals, count }) => {\n            const modal = (\n                <ModalType\n                    {...props}\n                    onReturn={value => resolve(value)}\n                    onExited={() => setModalsAndCount(\n                        ({ modals, count }) => ({\n                            modals: modals.filter(value => value !== modal),\n                            count,\n                        })\n                    )}\n                    key={count}\n                />\n            );\n            return ({\n                modals: [...modals, modal],\n                count: count + 1,\n            })\n        });\n    } catch (e) {\n        reject(e);\n    }\n});\n\nexport interface ModalsAndCount {\n    readonly modals: readonly JSX.Element[];\n    readonly count: number;\n}\n\nconst initialModalsAndCount: ModalsAndCount = {\n    modals: [],\n    count: 0,\n};\n\nexport const useModals = () => {\n    const [modalsAndCount, setModalsAndCount] = useState(initialModalsAndCount);\n    return {\n        modals: modalsAndCount.modals,\n        setModalsAndCount,\n    };\n};\n\nexport default getValueFromModal;","import { intersection } from 'lodash';\nimport React, { useState } from 'react';\nimport { Accordion, Alert, Button, Card, Col, Form, Modal, useAccordionToggle } from \"react-bootstrap\";\nimport Course from './Course';\nimport getValueFromModal, { useModals } from './getValueFromModal';\nimport { RegistrationStatus } from './Plan';\n\nconst placeholder = ['GB10615', 'GB10664'].join('\\n');\n\nconst CollectivelyCourseSetConfirmationModal = ({ onReturn, onExited }: {\n    onReturn: (value: boolean) => void,\n    onExited: () => void\n}) => {\n    const [show, setShow] = useState(true);\n\n    return (\n        <Modal show={show} onHide={() => { setShow(false); onReturn(false); }} onExited={onExited}>\n            <Modal.Header closeButton>\n                <Modal.Title>科目の履修 / 修得状態をまとめて設定</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                続けると、<strong>現在の履修 / 修得状態が失われます</strong>。\n                よろしいですか？\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={() => { setShow(false); onReturn(false); }}>いいえ</Button>\n                <Button variant=\"danger\" onClick={() => { setShow(false); onReturn(true); }}>はい</Button>\n            </Modal.Footer>\n        </Modal>\n    );\n}\n\nconst CodesInput = ({ label, codeToCourse, onChange }: {\n    label: string,\n    codeToCourse: ReadonlyMap<string, Course>,\n    onChange: (courses: ReadonlySet<Course>) => void,\n}) => {\n    const [value, setValue] = useState(\"\");\n    const [coursesCount, setCoursesCount] = useState(0);\n    const [undefinedCodes, setUndefinedCodes] = useState<string[]>([]);\n\n    const handleChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n        const nextValue = e.target.value;\n        const codes = nextValue.split('\\n').map(line => line.trim()).filter(line => line !== '');\n        const courses = new Set(\n            codes.map(code => codeToCourse.get(code))\n                .filter((course): course is NonNullable<typeof course> => course !== undefined)\n        );\n        const nextUndefinedCodes = [...new Set(codes.filter(code => !codeToCourse.has(code)))];\n        setValue(nextValue);\n        setCoursesCount(courses.size);\n        setUndefinedCodes(nextUndefinedCodes);\n        onChange(courses);\n    }\n\n    return (\n        <Form.Group as={Col}>\n            <Form.Label>{label}</Form.Label>\n            <Form.Control\n                as=\"textarea\" className=\"input-monospace\" rows={5}\n                placeholder={placeholder} value={value} onChange={handleChange}\n            />\n            <Form.Text>\n                {coursesCount}個の科目\n            </Form.Text>\n            {\n                undefinedCodes.length === 0 ? <></> : (\n                    <Form.Text>\n                        次の科目は見つかりません\n                        <> : </>\n                        {\n                            undefinedCodes\n                                .map<React.ReactNode>(code => (<code key={code}>{code}</code>))\n                                .reduce((previous, current) => [previous, ', ', current])\n                        }\n                    </Form.Text>\n                )\n            }\n        </Form.Group>\n    );\n}\n\nconst CollectivelyCourseSetView = ({ eventKey, codeToCourse, onSubmit }: {\n    eventKey: string,\n    codeToCourse: ReadonlyMap<string, Course>,\n    onSubmit: (courseToStatus: ReadonlyMap<Course, RegistrationStatus.Acquired | RegistrationStatus.Registered>) => void,\n}) => {\n    const [registeredCourses, setRegisteredCourses] = useState<ReadonlySet<Course>>(new Set());\n    const [acquiredCourses, setAcquiredCourses] = useState<ReadonlySet<Course>>(new Set<Course>());\n    const toggle = useAccordionToggle(eventKey, () => { });\n    const { modals, setModalsAndCount } = useModals();\n\n    const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        if (!await getValueFromModal(CollectivelyCourseSetConfirmationModal, {}, setModalsAndCount)) {\n            return;\n        }\n        onSubmit(new Map([\n            ...[...registeredCourses].map(course => [course, RegistrationStatus.Registered] as const),\n            ...[...acquiredCourses].map(course => [course, RegistrationStatus.Acquired] as const),\n        ]));\n        toggle();\n    }\n\n    const coursesOfIntersection = intersection([...registeredCourses], [...acquiredCourses]);\n\n    return (\n        <>\n            {modals}\n            <Card>\n                <Card.Header>\n                    <Accordion.Toggle eventKey={eventKey} variant=\"link\" as={Button}>\n                        科目の履修 / 修得状態をまとめて設定\n                    </Accordion.Toggle>\n                </Card.Header>\n                <Accordion.Collapse eventKey={eventKey}>\n                    <Card.Body>\n                        <p>\n                            履修する科目や修得済みの科目の番号を、それぞれのテキストボックスへ1行ごとに入力します。\n                            いずれにも入力されなかった科目は、履修しない科目として設定されます。\n                            <strong>現在の履修 / 修得状態は失われます。</strong>\n                        </p>\n                        <Form onSubmit={handleSubmit}>\n                            <Form.Row>\n                                <CodesInput label=\"履修する科目\" codeToCourse={codeToCourse} onChange={setRegisteredCourses} />\n                                <CodesInput label=\"修得済みの科目\" codeToCourse={codeToCourse} onChange={setAcquiredCourses} />\n                            </Form.Row>\n                            {\n                                coursesOfIntersection.length === 0 ? (<></>) : (\n                                    <Alert variant=\"warning\">\n                                        <p>\n                                            次の科目は [履修する科目] と [修得済みの科目] の両方に入力されています。\n                                            このまま [OK] を押すと、<strong>修得済みの科目として設定されます</strong>。\n                                        </p>\n                                        <ul className=\"mb-0\">\n                                            {\n                                                coursesOfIntersection.map(course => (\n                                                    <li key={course.code}>\n                                                        <code>{course.code}</code>\n                                                        <> : </>\n                                                        {course.title}\n                                                    </li>\n                                                ))\n                                            }\n                                        </ul>\n                                    </Alert>\n                                )\n                            }\n                            <Button type=\"submit\">OK</Button>\n                        </Form>\n                    </Card.Body>\n                </Accordion.Collapse>\n            </Card>\n        </>\n    )\n};\n\nexport default CollectivelyCourseSetView;","import Course from '../Course';\nimport courses from './courses1.json';\n\nconst codeToCourse = new Map<string, Course>();\n\nfor (const course of courses) {\n    codeToCourse.set(course.code, course);\n}\n\nexport default codeToCourse;","enum FilterType {\n    None,\n    Registered,\n    Valid,\n}\n\nexport default FilterType;","import React from 'react';\nimport { Accordion, Button, Card, Form } from \"react-bootstrap\";\nimport Plan, { toJSON } from \"./Plan\";\n\nconst ExportView = ({ plan, eventKey }: {\n    plan: Plan,\n    eventKey: string,\n}) => (\n        <Card>\n            <Card.Header>\n                <Accordion.Toggle eventKey={eventKey} variant=\"link\" as={Button}>\n                    エクスポート\n                </Accordion.Toggle>\n            </Card.Header>\n            <Accordion.Collapse eventKey={eventKey}>\n                <Card.Body>\n                    <p>テキストボックスの内容をコピーして、テキストファイルなどに保存します。</p>\n                    <Form>\n                        <Form.Group className=\"mb-0\">\n                            <Form.Label>JSON</Form.Label>\n                            <Form.Control\n                                readOnly className=\"input-monospace\"\n                                value={JSON.stringify(toJSON(plan))}\n                                onFocus={(e: React.FocusEvent<HTMLInputElement>) => e.target.select()}\n                            />\n                        </Form.Group>\n                    </Form>\n                </Card.Body>\n            </Accordion.Collapse>\n        </Card>\n    );\n\nexport default ExportView","enum RegistrationStatusLockTarget {\n    Unregistered = 0,\n    Acquired = 2,\n    All = 3,\n    None = 4,\n}\n\nexport default RegistrationStatusLockTarget;","import React, { useState } from 'react';\nimport { Accordion, Button, Card, Form, Modal, useAccordionToggle } from \"react-bootstrap\";\nimport Course from \"./Course\";\nimport getValueFromModal, { useModals } from './getValueFromModal';\nimport Plan, { emptyPlan, fromJSON, toJSON } from \"./Plan\";\nimport { RequirementWithCourses } from \"./Requirements\";\n\nconst ImportConfirmationModal = ({ onReturn, onExited }: {\n    onReturn: (value: boolean) => void,\n    onExited: () => void\n}) => {\n    const [show, setShow] = useState(true);\n\n    return (\n        <Modal show={show} onHide={() => { setShow(false); onReturn(false); }} onExited={onExited}>\n            <Modal.Header closeButton>\n                <Modal.Title>インポート</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                インポートすると現在の設定状態は失われますが、よろしいですか？\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={() => { setShow(false); onReturn(false); }}>いいえ</Button>\n                <Button variant=\"danger\" onClick={() => { setShow(false); onReturn(true); }}>はい</Button>\n            </Modal.Footer>\n        </Modal>\n    );\n}\n\nconst ImportView = ({ eventKey, codeToCourse, nameToRequirement, onSubmit }: {\n    eventKey: string,\n    codeToCourse: ReadonlyMap<string, Course>,\n    nameToRequirement: ReadonlyMap<string, RequirementWithCourses>,\n    onSubmit: (nextPlan: Plan) => void,\n}) => {\n    const [jsonString, setJSONString] = useState(\"\");\n    const toggle = useAccordionToggle(eventKey, () => { });\n    const { modals, setModalsAndCount } = useModals();\n\n    const nextPlan = (() => {\n        try {\n            return fromJSON(\n                JSON.parse(jsonString),\n                { codeToCourse, nameToRequirement }\n            );\n        } catch {\n            return undefined;\n        }\n    })();\n    const isInvalid = nextPlan === undefined;\n\n    const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        if (\n            nextPlan === undefined ||\n            !await getValueFromModal(ImportConfirmationModal, {}, setModalsAndCount)\n        ) {\n            return;\n        }\n        onSubmit(nextPlan);\n        toggle();\n    };\n\n    return (\n        <>\n            {modals}\n            <Card>\n                <Card.Header>\n                    <Accordion.Toggle eventKey={eventKey} variant=\"link\" as={Button}>\n                        インポート\n                    </Accordion.Toggle>\n                </Card.Header>\n                <Accordion.Collapse eventKey={eventKey}>\n                    <Card.Body>\n                        <p>\n                            テキストボックスに保存したテキストを貼り付けてから、 [インポート] ボタンを押します。\n                            <strong>インポートすると現在の設定状態は失われます。</strong>\n                        </p>\n                        <Form onSubmit={handleSubmit}>\n                            <Form.Group>\n                                <Form.Label>JSON</Form.Label>\n                                <Form.Control\n                                    className=\"input-monospace\" isInvalid={isInvalid}\n                                    value={jsonString} placeholder={JSON.stringify(toJSON(emptyPlan))}\n                                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => setJSONString(e.target.value)}\n                                />\n                                <Form.Control.Feedback type=\"invalid\">JSONが不正です</Form.Control.Feedback>\n                            </Form.Group>\n                            <Button type=\"submit\" disabled={isInvalid}>インポート</Button>\n                        </Form>\n                    </Card.Body>\n                </Accordion.Collapse>\n            </Card>\n        </>\n    );\n}\n\nexport default ImportView;","import Requirements, { isRange, Range, RequirementWithChildren, RequirementWithCourses, SelectionRequirement } from \".\";\nimport Course from \"../Course\";\nimport RequirementsJSON from \"./RequirementsJSON\";\n\ninterface RequirementAndDictionary {\n    readonly requirement: Requirements;\n    readonly nameToRequirement: ReadonlyMap<string, RequirementWithCourses>;\n}\n\nconst numberOrRangeToRange = (numberOrRange: number | Range): Range =>\n    isRange(numberOrRange) ? numberOrRange : {\n        min: numberOrRange,\n        max: numberOrRange,\n    };\n\nconst getInnerRequirementAndDictionaryFromJSON = (\n    json: RequirementsJSON,\n    codeToCourse: ReadonlyMap<string, Course>,\n    selectionNameToCount: Map<string, number>\n): RequirementAndDictionary => {\n    if ('courses' in json) {\n        const requirement = new RequirementWithCourses({\n            name: json.name,\n            description: json.description,\n            creditsCount: numberOrRangeToRange(json.creditsCount),\n            courses: json.courses.map(courseCode => {\n                const course = codeToCourse.get(courseCode);\n                if (course === undefined) { throw new Error(`科目番号 ${courseCode} は定義されていません。`); }\n                return course;\n            }),\n            allowsOthers: json.allowsOthers,\n        });\n        return {\n            requirement,\n            nameToRequirement: new Map([[requirement.name, requirement]]),\n        };\n    } else if ('children' in json) {\n        const requirementAndDictionaryPairs = json.children.map(child => getInnerRequirementAndDictionaryFromJSON(child, codeToCourse, selectionNameToCount));\n        const requirement = new RequirementWithChildren({\n            name: json.name,\n            description: json.description,\n            children: requirementAndDictionaryPairs.map(({ requirement }) => requirement),\n            creditsCount: json.creditsCount === undefined ? undefined : numberOrRangeToRange(json.creditsCount),\n        });\n        return {\n            requirement,\n            nameToRequirement: new Map(\n                requirementAndDictionaryPairs.flatMap(({ nameToRequirement: dictionary }) => [...dictionary.entries()])\n            ),\n        };\n    } else {\n        const selectionCount = selectionNameToCount.get(json.selectionName) || 0;\n        selectionNameToCount.set(json.selectionName, selectionCount + 1);\n        const optionAndDictionaryArray = json.options.map(optionJSON => {\n            if ('requirement' in optionJSON) {\n                const { requirement, nameToRequirement: dictionary } = getInnerRequirementAndDictionaryFromJSON(optionJSON.requirement, codeToCourse, selectionNameToCount);\n                return {\n                    option: { requirement, name: optionJSON.name },\n                    dictionary,\n                };\n            } else {\n                const { requirement, nameToRequirement: dictionary } = getInnerRequirementAndDictionaryFromJSON(optionJSON, codeToCourse, selectionNameToCount);\n                return {\n                    option: { requirement, name: requirement.name },\n                    dictionary,\n                };\n            }\n        })\n        const requirement = new SelectionRequirement({\n            name: `${json.selectionName}_${selectionCount}`,\n            selectionName: json.selectionName,\n            options: optionAndDictionaryArray.map(({ option }) => option),\n        });\n        return {\n            requirement,\n            nameToRequirement: new Map(\n                optionAndDictionaryArray.flatMap(({ dictionary }) => [...dictionary.entries()])\n            )\n        };\n    }\n};\n\nconst getRequirementAndDictionaryFromJSON = (\n    json: RequirementsJSON,\n    codeToCourse: ReadonlyMap<string, Course>\n) => getInnerRequirementAndDictionaryFromJSON(json, codeToCourse, new Map())\n\nexport default getRequirementAndDictionaryFromJSON;\n","import { $number, $object, isCompatible } from \"@hiroto/json-type-checker\";\nimport Course from \"../Course\";\nimport Plan, { RegistrationStatus, RegisteredCreditsCounts } from \"../Plan\";\n\nexport { default as getRequirementAndDictionaryFromJSON } from './getRequirementAndDictionaryFromJSON';\n\ntype Requirements = RequirementWithChildren | RequirementWithCourses | SelectionRequirement;\nexport default Requirements;\n\nabstract class Requirement {\n    abstract getRegisteredCreditsCount(plan: Plan, includesExcess: boolean): RegisteredCreditsCounts;\n    abstract getRequiredCreditsCount(selectionNameToOptionName: ReadonlyMap<string, string>): Range;\n    constructor(readonly name: string) { }\n    getStatus(plan: Plan): RegistrationStatus {\n        const requiredCreditsCount = this.getRequiredCreditsCount(plan.selectionNameToOptionName);\n        const registeredCreditsCounts = this.getRegisteredCreditsCount(plan, false);\n        return registeredCreditsCounts.acquired >= requiredCreditsCount.min ?\n            RegistrationStatus.Acquired :\n            registeredCreditsCounts.registered >= requiredCreditsCount.min ?\n                RegistrationStatus.Registered :\n                RegistrationStatus.Unregistered;\n    };\n}\n\nexport interface Range {\n    min: number;\n    max: number;\n}\nexport const isRange = (obj: unknown): obj is Range => isCompatible(obj, $object({ min: $number, max: $number }));\n\nexport interface RequirementWithChildrenInit {\n    readonly name: string;\n    readonly description?: string;\n    readonly children: Iterable<Requirements>;\n    readonly creditsCount?: Range;\n}\n\nexport class RequirementWithChildren extends Requirement implements RequirementWithChildrenInit {\n    readonly description?: string;\n    readonly children: readonly Requirements[];\n    readonly creditsCount?: Range;\n    constructor({ name, description, children, creditsCount }: RequirementWithChildrenInit) {\n        super(name);\n        this.description = description\n        this.children = [...children];\n        this.creditsCount = creditsCount;\n    }\n    getRegisteredCreditsCount(plan: Plan, includesExcess: boolean): RegisteredCreditsCounts {\n        const creditsCounts = this.children.reduce(\n            (previous, child) => {\n                const childRegisteredCreditsCount = child.getRegisteredCreditsCount(plan, includesExcess);\n                return {\n                    acquired: previous.acquired + childRegisteredCreditsCount.acquired,\n                    registered: previous.registered + childRegisteredCreditsCount.registered,\n                }\n            },\n            { acquired: 0, registered: 0 }\n        );\n        return includesExcess || this.creditsCount === undefined ? creditsCounts : {\n            acquired: Math.min(this.creditsCount.max, creditsCounts.acquired),\n            registered: Math.min(this.creditsCount.max, creditsCounts.registered),\n        };\n    }\n    getRequiredCreditsCount(selectionNameToOptionName: ReadonlyMap<string, string>): Range {\n        return this.creditsCount === undefined ? this.children.reduce((previous, child) => {\n            const childRequiredCreditsCount = child.getRequiredCreditsCount(selectionNameToOptionName);\n            return {\n                min: previous.min + childRequiredCreditsCount.min,\n                max: previous.max + childRequiredCreditsCount.max,\n            }\n        }, { min: 0, max: 0 }) : this.creditsCount;\n    }\n    getStatus(plan: Plan): RegistrationStatus {\n        return Math.min(\n            super.getStatus(plan),\n            ...this.children.map(child => child.getStatus(plan))\n        );\n    };\n}\n\nexport interface RequirementWithCoursesInit {\n    readonly name: string;\n    readonly description?: string;\n    readonly courses: Iterable<Course>;\n    readonly creditsCount: Range;\n    readonly allowsOthers?: boolean;\n}\n\nexport class RequirementWithCourses extends Requirement {\n    readonly description?: string;\n    readonly courses: readonly Course[];\n    readonly creditsCount: Range;\n    readonly allowsOthers: boolean;\n    constructor({ name, description, courses, creditsCount, allowsOthers = false }: RequirementWithCoursesInit) {\n        super(name);\n        this.description = description;\n        this.courses = [...courses];\n        this.creditsCount = creditsCount;\n        this.allowsOthers = allowsOthers;\n    }\n    getRegisteredCreditsCount(plan: Plan, includesExcess: boolean): RegisteredCreditsCounts {\n        const othersCount = plan.requirementToOthersCount.get(this) || { acquired: 0, registered: 0 };\n        const creditsCounts = this.courses.reduce((previous, course): RegisteredCreditsCounts => {\n            const courseStatus = plan.courseToStatus.get(course) || RegistrationStatus.Unregistered;\n            if (plan.courseToRequirement.get(course) === this) {\n                return courseStatus === RegistrationStatus.Acquired ?\n                    {\n                        acquired: previous.acquired + course.creditsCount,\n                        registered: previous.registered + course.creditsCount,\n                    } :\n                    courseStatus === RegistrationStatus.Registered ?\n                        {\n                            acquired: previous.acquired,\n                            registered: previous.registered + course.creditsCount,\n                        } :\n                        previous;\n            } else {\n                return previous;\n            }\n        }, othersCount);\n        return includesExcess || this.creditsCount === undefined ? creditsCounts : {\n            acquired: Math.min(this.creditsCount.max, creditsCounts.acquired),\n            registered: Math.min(this.creditsCount.max, creditsCounts.registered),\n        };\n    }\n    getRequiredCreditsCount() {\n        return this.creditsCount;\n    }\n}\n\ninterface Option {\n    name: string;\n    requirement: Requirements;\n}\n\nexport interface SelectionRequirementInit {\n    readonly name: string;\n    readonly selectionName: string;\n    readonly options: Iterable<Option>;\n}\n\nexport class SelectionRequirement extends Requirement implements SelectionRequirementInit {\n    readonly selectionName: string;\n    readonly options: Option[];\n    readonly optionNameToRequirement: ReadonlyMap<string, Requirements>;\n    constructor({ name, selectionName, options: options0 }: SelectionRequirementInit) {\n        super(name);\n        this.selectionName = selectionName;\n        const options = [...options0]\n        this.options = options;\n        this.optionNameToRequirement = new Map(options.map(({ name, requirement }) => [name, requirement]));\n    }\n    getSelectedOptionName(selectionNameToOptionName: ReadonlyMap<string, string>) {\n        const selectedOptionName = selectionNameToOptionName.get(this.selectionName) || this.options[0].name;\n        return selectedOptionName;\n    }\n    getSelectedRequirement(selectionNameToOptionName: ReadonlyMap<string, string>) {\n        const selectedOptionName = this.getSelectedOptionName(selectionNameToOptionName);\n        const selectedRequirement = this.optionNameToRequirement.get(selectedOptionName);\n        return selectedRequirement;\n    }\n    getRegisteredCreditsCount(plan: Plan, includesExcess: boolean): RegisteredCreditsCounts {\n        const selectedRequirement = this.getSelectedRequirement(plan.selectionNameToOptionName);\n        if (selectedRequirement === undefined) {\n            return { acquired: 0, registered: 0 };\n        } else {\n            return selectedRequirement.getRegisteredCreditsCount(plan, includesExcess);\n        }\n    }\n    getRequiredCreditsCount(selectionNameToOptionName: ReadonlyMap<string, string>): Range {\n        const selectedRequirement = this.getSelectedRequirement(selectionNameToOptionName);\n        if (selectedRequirement === undefined) {\n            return { min: 0, max: 0 };\n        } else {\n            return selectedRequirement.getRequiredCreditsCount(selectionNameToOptionName);\n        }\n    }\n}\n","import codeToCourse from '../courses';\nimport { getRequirementAndDictionaryFromJSON } from '../Requirements';\nimport coins17_0 from './coins17.json';\nimport klis17_0 from './klis17.json';\nimport mast17_0 from './mast17.json';\n\nconst requirementAndDictionaryPairs = new Map([\n    ['coins17', {\n        id: 'coins17',\n        name: '情報科学類 / 2017年度入学',\n        ...getRequirementAndDictionaryFromJSON(coins17_0, codeToCourse)\n    }],\n    ['mast17', {\n        id: 'mast17',\n        name: '情報メディア創成学類 / 2017年度入学',\n        ...getRequirementAndDictionaryFromJSON(mast17_0, codeToCourse)\n    }],\n    ['klis17', {\n        id: 'klis17',\n        name: '知識情報・図書館学類 / 2017年度入学',\n        ...getRequirementAndDictionaryFromJSON(klis17_0, codeToCourse)\n    }],\n]);\n\nexport default requirementAndDictionaryPairs;","import React from 'react';\nimport { Badge } from 'react-bootstrap';\nimport Plan, { RegistrationStatus } from '../Plan';\nimport Requirements, { RequirementWithChildren, RequirementWithCourses } from '../Requirements';\n\nconst CreditsCountLabelDelimiter = () => (<span className=\"text-muted\"> / </span>)\n\nconst ExceededCreditsCountLabel = ({ creditsCount }: { creditsCount: number }) => (\n    <>\n        <span className=\"text-muted\">(</span>\n        +{creditsCount}\n        <span className=\"text-muted\">)</span>\n    </>\n);\n\nconst CreditsCountLabels = ({ requirement, plan }: {\n    requirement: Requirements,\n    plan: Plan,\n}) => {\n    const creditsCount = requirement.getRegisteredCreditsCount(plan, false);\n    const exceededCreditsCount = requirement.getRegisteredCreditsCount(plan, true);\n    const requiredCreditsCount = requirement.getRequiredCreditsCount(plan.selectionNameToOptionName);\n\n    return (\n        <div>\n            <span>\n                <span className=\"text-muted\">習得</span>\n                <> </>\n                <strong className=\"text-success\">{creditsCount.acquired}</strong>\n                {exceededCreditsCount.acquired > creditsCount.acquired ? (<ExceededCreditsCountLabel creditsCount={exceededCreditsCount.acquired - creditsCount.acquired} />) : (<></>)}\n            </span>\n            <CreditsCountLabelDelimiter />\n            <span>\n                <span className=\"text-muted\">履修</span>\n                <> </>\n                <strong className=\"text-primary\">{creditsCount.registered}</strong>\n                {exceededCreditsCount.registered > creditsCount.registered ? (<ExceededCreditsCountLabel creditsCount={exceededCreditsCount.registered - creditsCount.registered} />) : (<></>)}\n            </span>\n            <CreditsCountLabelDelimiter />\n            <span>\n                <span className=\"text-muted\">必要</span>\n                <> </>\n                <strong>\n                    {\n                        requiredCreditsCount.min === requiredCreditsCount.max ?\n                            requiredCreditsCount.min :\n                            `${requiredCreditsCount.min}~${requiredCreditsCount.max}`\n                    }\n                </strong>\n            </span>\n        </div>\n    )\n};\n\nexport const RequirementSummaryView = ({ requirement, plan }: {\n    requirement: RequirementWithChildren | RequirementWithCourses,\n    plan: Plan,\n}) => {\n    const status = requirement.getStatus(plan);\n    return (\n        <>\n            <h5 className=\"d-flex justify-content-between align-items-center\">\n                <div>{requirement.name}</div>\n                <Badge className=\"ml-2 flex-shrink-0\" variant={status === RegistrationStatus.Acquired ? 'success' : status === RegistrationStatus.Registered ? 'primary' : 'secondary'}>\n                    {status === RegistrationStatus.Acquired ? '修得OK' : status === RegistrationStatus.Registered ? '履修OK' : '不足'}\n                </Badge>\n            </h5>\n            <div>\n                {requirement.description === undefined ? (<></>) : (<div className=\"text-muted\">{requirement.description}</div>)}\n                <CreditsCountLabels requirement={requirement} plan={plan} />\n            </div>\n        </>\n    );\n}\n","import React, { useState } from \"react\";\nimport { Button, Card, Modal } from \"react-bootstrap\";\nimport Plan from \"../Plan\";\nimport { RequirementWithCourses } from \"../Requirements\";\nimport { RequirementSummaryView } from \"./RequirementSummaryView\";\n\nconst CourseMovementConfirmationModal = ({ currentRequirement, plan, onReturn, onExited }: {\n    currentRequirement: RequirementWithCourses,\n    plan: Plan,\n    onReturn: (value: boolean) => void,\n    onExited: () => void,\n}) => {\n    const [show, setShow] = useState(true);\n\n    return (\n        <Modal show={show} onHide={() => { setShow(false); onReturn(false); }} onExited={onExited}>\n            <Modal.Header closeButton>\n                <Modal.Title>科目群の割り当てを変更</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <p>\n                    この科目は、すでに以下の科目群に割り当てられています。\n                    <strong>続けると、この科目群への割り当ては解除されます。</strong>\n                </p>\n                <p>各科目に割り当てできる科目群は1つまでです。</p>\n                <Card body>\n                    <RequirementSummaryView requirement={currentRequirement} plan={plan} />\n                </Card>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={() => { setShow(false); onReturn(false); }}>キャンセル</Button>\n                <Button variant=\"primary\" onClick={() => { setShow(false); onReturn(true); }}>続ける</Button>\n            </Modal.Footer>\n        </Modal>\n    );\n};\n\nexport default CourseMovementConfirmationModal;","import { RegistrationStatus } from '../Plan';\nimport RegistrationStatusLockTarget from '../RegistrationStatusLockTarget';\n\nconst getNextStatus = ({ currentStatus, lockTarget }: {\n    currentStatus: RegistrationStatus,\n    lockTarget: RegistrationStatusLockTarget,\n}): RegistrationStatus => {\n    switch (lockTarget) {\n        case RegistrationStatusLockTarget.All:\n            return currentStatus;\n        case RegistrationStatusLockTarget.Acquired:\n        case RegistrationStatusLockTarget.Unregistered:\n            const difference = (3 + lockTarget - currentStatus) % 3;\n            switch (difference) {\n                case 0:\n                    return currentStatus;\n                case 1:\n                    return (currentStatus + 2) % 3;\n                default:\n                    return (currentStatus + 1) % 3;\n            }\n        default:\n            return (currentStatus + 1) % 3;\n    }\n}\n\nexport default getNextStatus;","import React from 'react';\nimport { ListGroup } from 'react-bootstrap';\nimport Course from '../Course';\nimport FilterType from '../FilterType';\nimport Plan, { RegisteredCreditsCounts } from '../Plan';\nimport RegistrationStatusLockTarget from '../RegistrationStatusLockTarget';\nimport { RequirementWithChildren, RequirementWithCourses } from '../Requirements';\nimport InnerRequirementView from './InnerRequirementView';\nimport { RequirementSummaryView } from './RequirementSummaryView';\n\nconst RequirementWithChildrenView = ({ requirement, filterType, lockTarget, plan, onCourseClick, onOthersCountsChange, onSelectionChange }: {\n    requirement: RequirementWithChildren,\n    filterType: FilterType,\n    lockTarget: RegistrationStatusLockTarget,\n    plan: Plan,\n    onCourseClick: (course: Course, requirement: RequirementWithCourses) => void,\n    onOthersCountsChange: (requirement: RequirementWithCourses, newOthersCount: RegisteredCreditsCounts) => void,\n    onSelectionChange: (selectionName: string, newOptionName: string) => void,\n}) => (\n        <>\n            <RequirementSummaryView requirement={requirement} plan={plan} />\n            <ListGroup className=\"mt-3\">\n                {\n                    requirement.children.map(child => (\n                        <ListGroup.Item key={child.name}>\n                            <InnerRequirementView\n                                requirement={child} plan={plan}\n                                filterType={filterType} lockTarget={lockTarget}\n                                onCourseClick={onCourseClick} onSelectionChange={onSelectionChange}\n                                onOthersCountsChange={onOthersCountsChange}\n                            />\n                        </ListGroup.Item>\n                    ))\n                }\n            </ListGroup>\n        </>\n    );\n\nexport default RequirementWithChildrenView;","import React from 'react';\nimport { Badge, ListGroup, OverlayTrigger, Tooltip } from \"react-bootstrap\";\nimport Course from \"../Course\";\nimport Plan, { RegistrationStatus } from '../Plan';\nimport RegistrationStatusLockTarget from '../RegistrationStatusLockTarget';\nimport Requirements, { RequirementWithCourses } from \"../Requirements\";\nimport getNextStatus from './getNextStatus';\n\nconst isRegistrable = ({ course, courseToStatus }: {\n    course: Course,\n    courseToStatus: ReadonlyMap<Course, RegistrationStatus>,\n}) => ![...courseToStatus].some(\n    ([course1, status]) =>\n        course1 !== course && course1.title === course.title && status !== RegistrationStatus.Unregistered\n);\n\nconst CourseListItem = ({ course, onClick, newRequirement, plan, lockTarget }: {\n    course: Course,\n    newRequirement: Requirements,\n    plan: Plan,\n    lockTarget: RegistrationStatusLockTarget,\n    onClick: () => void,\n}) => {\n    const status = plan.courseToStatus.get(course) ?? RegistrationStatus.Unregistered;\n    const currentRequirement = plan.courseToRequirement.get(course);\n    const isRegisteredButInvalid = status !== RegistrationStatus.Unregistered && currentRequirement !== newRequirement;\n    const disabled = !isRegistrable({\n        course,\n        courseToStatus: plan.courseToStatus\n    });\n    const action = getNextStatus({ currentStatus: status, lockTarget }) !== status || isRegisteredButInvalid;\n\n    return (\n        <ListGroup.Item\n            action={action}\n            onClick={onClick}\n            disabled={disabled}\n            variant={\n                isRegisteredButInvalid ? 'dark' :\n                    status === RegistrationStatus.Acquired ? 'success' :\n                        status === RegistrationStatus.Registered ? 'primary' :\n                            undefined\n            }\n        >\n            <div className=\"d-flex justify-content-between align-items-center\">\n                <div>\n                    <div>{course.title}</div>\n                    <code>{course.code}</code>\n                </div>\n                <div className=\"ml-2 text-right flex-shrink-0\">\n                    {\n                        isRegisteredButInvalid ?\n                            (\n                                <OverlayTrigger\n                                    overlay={\n                                        <Tooltip id=\"tooltip1\">\n                                            {\n                                                currentRequirement === undefined ?\n                                                    'この科目はどの科目群にも割り当てられていません。' :\n                                                    'この科目はほかの科目群に割り当てられています。'\n                                            }\n                                        </Tooltip>\n                                    }\n                                >\n                                    {\n                                        currentRequirement === undefined ?\n                                            (<Badge variant=\"secondary\">?</Badge>) :\n                                            (<Badge variant=\"warning\">!</Badge>)\n                                    }\n                                </OverlayTrigger>\n                            ) :\n                            (<></>)\n                    }\n                    <Badge variant={status === RegistrationStatus.Acquired ? 'success' : status === RegistrationStatus.Registered ? 'primary' : 'secondary'}>\n                        {status === RegistrationStatus.Acquired ? '修得済み' : status === RegistrationStatus.Registered ? '履修する' : '履修しない'}\n                    </Badge>\n                    <div><span className=\"text-muted\">単位数</span> <strong>{course.creditsCount}</strong></div>\n                </div>\n            </div>\n        </ListGroup.Item>\n    )\n};\n\nconst CourseList = ({ requirement, courses, plan, onCourseClick, lockTarget }: {\n    requirement: RequirementWithCourses,\n    courses: readonly Course[],\n    plan: Plan,\n    lockTarget: RegistrationStatusLockTarget\n    onCourseClick: (course: Course) => void,\n}) => (\n        <ListGroup>\n            {\n                courses.map((course: Course) => (\n                    <CourseListItem\n                        key={course.code}\n                        course={course} plan={plan}\n                        newRequirement={requirement}\n                        lockTarget={lockTarget}\n                        onClick={() => onCourseClick(course)}\n                    />\n                ))\n            }\n        </ListGroup>\n    );\n\nexport default CourseList;","import React, { useState } from 'react';\nimport { Accordion, Button, ButtonToolbar, Card, Col, Form } from 'react-bootstrap';\nimport Course from '../Course';\nimport FilterType from '../FilterType';\nimport Plan, { RegisteredCreditsCounts, RegistrationStatus } from '../Plan';\nimport RegistrationStatusLockTarget from '../RegistrationStatusLockTarget';\nimport { RequirementWithCourses } from '../Requirements';\nimport CourseList from './CourseList';\nimport { RequirementSummaryView } from './RequirementSummaryView';\n\n\nconst OthersCountInput = ({ currentOthersCount, onReturn, onHide }: {\n    currentOthersCount: RegisteredCreditsCounts,\n    onReturn: (newOthersCount: RegisteredCreditsCounts) => void,\n    onHide: () => void,\n}) => {\n    const [acquired, setAcquired] = useState<number | undefined>();\n    const [registeredExcludingAcquired, setRegisteredExcludingAcquired] = useState<number | undefined>();\n    const [registeredIncludingAcquired, setRegisteredIncludingAcquired] = useState<number | undefined>();\n\n    const computed = {\n        acquired: acquired ?? currentOthersCount.acquired,\n        registered:\n            registeredIncludingAcquired !== undefined ?\n                registeredIncludingAcquired :\n                registeredExcludingAcquired !== undefined ?\n                    (acquired !== undefined ? acquired : currentOthersCount.acquired) + registeredExcludingAcquired :\n                    acquired !== undefined ?\n                        currentOthersCount.registered + acquired - currentOthersCount.acquired :\n                        currentOthersCount.registered,\n    }\n\n    return (\n        <Card border=\"primary\">\n            <Card.Header>単位数を入力</Card.Header>\n            <Card.Body>\n                <Form onSubmit={(e: React.FormEvent<HTMLFormElement>) => {\n                    e.preventDefault();\n                    onReturn(computed);\n                    onHide();\n                }}>\n                    <Form.Row>\n                        <Form.Group as={Col} md=\"4\">\n                            <Form.Label>習得済みの単位数 <span className=\"text-muted\">(a)</span></Form.Label>\n                            <Form.Control\n                                type=\"number\" min={0}\n                                placeholder={`${computed.acquired}`}\n                                value={acquired === undefined ? '' : `${acquired}`}\n                                onChange={\n                                    (e: React.ChangeEvent<HTMLInputElement>) =>\n                                        setAcquired(e.target.value === '' ? undefined : +e.target.value)\n                                }\n                                isInvalid={computed.acquired < 0}\n                            />\n                            <Form.Control.Feedback type=\"invalid\">(a) &gt;= 0</Form.Control.Feedback>\n                        </Form.Group>\n                        <Form.Group as={Col} md=\"4\">\n                            <Form.Label>履修する単位数 <span className=\"text-muted\">(b)</span></Form.Label>\n                            <Form.Control\n                                type=\"number\" min={0}\n                                placeholder={`${computed.registered - computed.acquired}`}\n                                value={registeredExcludingAcquired === undefined ? '' : `${registeredExcludingAcquired}`}\n                                onChange={\n                                    (e: React.ChangeEvent<HTMLInputElement>) => {\n                                        if (e.target.value === '') {\n                                            setRegisteredExcludingAcquired(undefined);\n                                        } else {\n                                            setRegisteredExcludingAcquired(+e.target.value);\n                                            setRegisteredIncludingAcquired(undefined);\n                                        }\n                                    }\n                                }\n                                isInvalid={computed.acquired > computed.registered}\n                            />\n                            <Form.Control.Feedback type=\"invalid\">(b) &gt;= 0</Form.Control.Feedback>\n                        </Form.Group>\n                        <Form.Group as={Col} md=\"4\">\n                            <Form.Label>計 <span className=\"text-muted\">(a) + (b)</span></Form.Label>\n                            <Form.Control\n                                type=\"number\" min={0}\n                                placeholder={`${computed.registered}`}\n                                value={registeredIncludingAcquired === undefined ? '' : `${registeredIncludingAcquired}`}\n                                onChange={\n                                    (e: React.ChangeEvent<HTMLInputElement>) => {\n                                        if (e.target.value === '') {\n                                            setRegisteredIncludingAcquired(undefined);\n                                        } else {\n                                            setRegisteredIncludingAcquired(+e.target.value);\n                                            setRegisteredExcludingAcquired(undefined);\n                                        }\n                                    }\n                                }\n                            />\n                        </Form.Group>\n                    </Form.Row>\n                    <ButtonToolbar>\n                        <Button\n                            type=\"submit\"\n                            disabled={computed.acquired < 0 || computed.acquired > computed.registered}\n                        >\n                            OK\n                        </Button>\n                        <Button variant=\"secondary\" onClick={onHide}>キャンセル</Button>\n                    </ButtonToolbar>\n                </Form>\n            </Card.Body>\n        </Card>\n    )\n}\n\nconst RequirementWithCoursesView = ({ requirement, filterType, lockTarget, plan, onCourseClick, onOthersCountsChange }: {\n    requirement: RequirementWithCourses,\n    filterType: FilterType,\n    lockTarget: RegistrationStatusLockTarget,\n    plan: Plan,\n    onCourseClick: (course: Course, requirement: RequirementWithCourses) => void,\n    onOthersCountsChange: (newOthersCount: RegisteredCreditsCounts) => void,\n}) => {\n    const [isOpen, setIsOpen] = useState(false);\n    const [showsInput, setShowsInput] = useState(false);\n\n    const courses = requirement.courses.filter(course =>\n        filterType === FilterType.None ||\n        (plan.courseToStatus.has(course) && plan.courseToStatus.get(course) !== RegistrationStatus.Unregistered)\n    ).filter(course => filterType !== FilterType.Valid || requirement === plan.courseToRequirement.get(course));\n\n    return (\n        <>\n            <Accordion activeKey={isOpen ? '0' : ''}>\n                <div className={`bg-white ${isOpen ? 'sticky-top' : ''}`}>\n                    <RequirementSummaryView requirement={requirement} plan={plan} />\n                    {\n                        courses.length === 0 ?\n                            requirement.allowsOthers ? (\n                                showsInput ? (<></>) : (\n                                    <Button block className=\"mt-3\" variant=\"secondary\" onClick={() => setShowsInput(true)}>\n                                        単位数を入力\n                                    </Button>\n                                )\n                            ) : (\n                                    <Button block className=\"mt-3\" variant=\"outline-secondary\" disabled>\n                                        {filterType === FilterType.None ? '' : '履修する'}科目はありません\n                                    </Button>\n                                ) : (\n                                <Button\n                                    block className=\"mt-3\"\n                                    onClick={() => setIsOpen(!isOpen)}\n                                    variant={isOpen ? 'primary' : 'outline-secondary'}\n                                >\n                                    {filterType === FilterType.None ? '' : '履修する'}科目を{isOpen ? '非' : ''}表示\n                                </Button>\n                            )\n                    }\n                </div>\n                {\n                    showsInput ? (\n                        <div className=\"mt-3\">\n                            <OthersCountInput\n                                currentOthersCount={plan.requirementToOthersCount.get(requirement) || { acquired: 0, registered: 0 }}\n                                onReturn={onOthersCountsChange} onHide={() => setShowsInput(false)}\n                            />\n                        </div>\n                    ) : (<></>)\n                }\n                <Accordion.Collapse eventKey=\"0\">\n                    {\n                        courses.length === 0 ? (<></>) : (\n                            <div className=\"mt-3\">\n                                <CourseList\n                                    courses={courses} plan={plan}\n                                    requirement={requirement} lockTarget={lockTarget}\n                                    onCourseClick={course => onCourseClick(course, requirement)}\n                                />\n                            </div>\n                        )\n                    }\n                </Accordion.Collapse>\n            </Accordion>\n        </>\n    );\n}\n\nexport default RequirementWithCoursesView;","import React from 'react';\nimport { Dropdown } from 'react-bootstrap';\nimport Course from '../Course';\nimport FilterType from '../FilterType';\nimport Plan, { RegisteredCreditsCounts } from '../Plan';\nimport RegistrationStatusLockTarget from '../RegistrationStatusLockTarget';\nimport { RequirementWithCourses, SelectionRequirement } from '../Requirements';\nimport InnerRequirementView from './InnerRequirementView';\n\nconst SelectionRequirementView = ({ requirement, filterType, lockTarget, plan, onCourseClick, onOthersCountsChange, onSelectionChange }: {\n    requirement: SelectionRequirement,\n    filterType: FilterType,\n    lockTarget: RegistrationStatusLockTarget,\n    plan: Plan,\n    onCourseClick: (course: Course, requirement: RequirementWithCourses) => void,\n    onOthersCountsChange: (requirement: RequirementWithCourses, newOthersCount: RegisteredCreditsCounts) => void,\n    onSelectionChange: (selectionName: string, newOptionName: string) => void,\n}) => {\n    const selectedOptionName = requirement.getSelectedOptionName(plan.selectionNameToOptionName);\n    const selectedRequirement = requirement.getSelectedRequirement(plan.selectionNameToOptionName);\n\n    const handleOptionClick = (newOptionName: string) => {\n        if (selectedOptionName !== newOptionName) {\n            onSelectionChange(requirement.selectionName, newOptionName);\n        }\n    };\n\n    return (\n        <>\n            <Dropdown>\n                <Dropdown.Toggle id=\"\" variant=\"secondary\" disabled={filterType === FilterType.Valid}>\n                    <span\n                        style={{\n                            overflow: 'hidden',\n                            textOverflow: 'ellipsis',\n                        }}\n                    >\n                        {requirement.selectionName}\n                        <> : </>\n                        <strong>{selectedOptionName}</strong>\n                    </span>\n                </Dropdown.Toggle>\n\n                <Dropdown.Menu style={{ zIndex: 1100 }}>\n                    {\n                        requirement.options.map(option => (\n                            <Dropdown.Item key={option.name}\n                                active={option.name === selectedOptionName}\n                                onClick={() => handleOptionClick(option.name)}\n                            >\n                                {option.name}\n                            </Dropdown.Item>\n                        ))\n                    }\n                </Dropdown.Menu>\n            </Dropdown>\n            {\n                selectedRequirement === undefined ? (<></>) : (\n                    <div className=\"mt-3\">\n                        <InnerRequirementView\n                            requirement={selectedRequirement} plan={plan}\n                            filterType={filterType} lockTarget={lockTarget}\n                            onCourseClick={onCourseClick} onOthersCountsChange={onOthersCountsChange}\n                            onSelectionChange={onSelectionChange}\n                        />\n                    </div>\n                )\n            }\n        </>\n    );\n}\n\nexport default SelectionRequirementView;","import React from 'react';\nimport Course from \"../Course\";\nimport FilterType from '../FilterType';\nimport Plan, { RegisteredCreditsCounts } from '../Plan';\nimport RegistrationStatusLockTarget from '../RegistrationStatusLockTarget';\nimport Requirements, { RequirementWithChildren, RequirementWithCourses } from \"../Requirements\";\nimport RequirementWithChildrenView from './RequirementWithChildrenView';\nimport RequirementWithCoursesView from './RequirementWithCoursesView';\nimport SelectionRequirementView from './SelectionRequirementView';\n\nconst InnerRequirementView = ({ requirement, filterType, lockTarget, plan, onCourseClick, onOthersCountsChange, onSelectionChange }: {\n    requirement: Requirements,\n    filterType: FilterType,\n    lockTarget: RegistrationStatusLockTarget,\n    plan: Plan,\n    onCourseClick: (course: Course, requirement: RequirementWithCourses) => void,\n    onOthersCountsChange: (requirement: RequirementWithCourses, newOthersCount: RegisteredCreditsCounts) => void,\n    onSelectionChange: (selectionName: string, newOptionName: string) => void,\n}) => {\n    if (requirement instanceof RequirementWithChildren) {\n        return (\n            <RequirementWithChildrenView\n                requirement={requirement} plan={plan}\n                filterType={filterType} lockTarget={lockTarget}\n                onCourseClick={onCourseClick} onOthersCountsChange={onOthersCountsChange} onSelectionChange={onSelectionChange}\n            />\n        )\n    } else if (requirement instanceof RequirementWithCourses) {\n        return (\n            <RequirementWithCoursesView\n                requirement={requirement} plan={plan}\n                filterType={filterType} lockTarget={lockTarget}\n                onCourseClick={onCourseClick}\n                onOthersCountsChange={creditsCounts => onOthersCountsChange(requirement, creditsCounts)}\n            />\n        )\n    } else {\n        return (\n            <SelectionRequirementView\n                requirement={requirement} plan={plan}\n                filterType={filterType} lockTarget={lockTarget}\n                onCourseClick={onCourseClick} onOthersCountsChange={onOthersCountsChange} onSelectionChange={onSelectionChange}\n            />\n        );\n    }\n}\n\nexport default InnerRequirementView;\n","import React from 'react';\nimport Course from '../Course';\nimport FilterType from '../FilterType';\nimport getValueFromModal, { useModals } from '../getValueFromModal';\nimport Plan, { RegisteredCreditsCounts, RegistrationStatus } from '../Plan';\nimport RegistrationStatusLockTarget from '../RegistrationStatusLockTarget';\nimport Requirements, { RequirementWithChildren, RequirementWithCourses, SelectionRequirement } from '../Requirements';\nimport CourseMovementConfirmationModal from './CourseMovementConfirmationModal';\nimport getNextStatus from './getNextStatus';\nimport InnerRequirementView from './InnerRequirementView';\n\nconst RequirementView = ({ requirement, plan, filterType, lockTarget, onChange }: {\n    requirement: Requirements,\n    filterType: FilterType,\n    lockTarget: RegistrationStatusLockTarget,\n    plan: Plan,\n    onChange: (newPlan: Plan) => void,\n}) => {\n    const { courseToStatus, courseToRequirement, requirementToOthersCount, selectionNameToOptionName } = plan;\n    const { modals, setModalsAndCount } = useModals();\n\n    const handleCourseClick = async (course: Course, requirement: RequirementWithCourses) => {\n        const currentStatus: RegistrationStatus = courseToStatus.get(course) || RegistrationStatus.Unregistered;\n        const currentRequirement = courseToRequirement.get(course);\n        let nextCourseToStatus = courseToStatus;\n        if (currentStatus === RegistrationStatus.Unregistered || currentRequirement === requirement) {\n            const nextStatus = getNextStatus({ currentStatus, lockTarget });\n            nextCourseToStatus = new Map([...courseToStatus, [course, nextStatus]]);\n        } else if (\n            currentRequirement !== undefined &&\n            !await getValueFromModal(\n                CourseMovementConfirmationModal,\n                { currentRequirement, plan },\n                setModalsAndCount\n            )\n        ) {\n            return;\n        }\n        onChange({\n            ...plan,\n            courseToStatus: nextCourseToStatus,\n            courseToRequirement: new Map([...courseToRequirement, [course, requirement]]),\n        });\n    }\n\n    const clearCourseToRequirement = (requirement: Requirements, newCourseToRequirement: Map<Course, RequirementWithCourses>) => {\n        if (requirement instanceof RequirementWithChildren) {\n            for (const child of requirement.children) {\n                clearCourseToRequirement(child, newCourseToRequirement);\n            }\n        } else if (requirement instanceof RequirementWithCourses) {\n            for (const course of requirement.courses) {\n                if (newCourseToRequirement.get(course) === requirement) {\n                    newCourseToRequirement.delete(course);\n                }\n            }\n        } else {\n            const selectedRequirement = requirement.getSelectedRequirement(selectionNameToOptionName);\n            if (selectedRequirement !== undefined) {\n                clearCourseToRequirement(selectedRequirement, newCourseToRequirement);\n            }\n        }\n    }\n\n    const clearCourseToRequirementInSelection = (selectionName: string, requirement: Requirements, newCourseToRequirement: Map<Course, RequirementWithCourses>) => {\n        if (requirement instanceof RequirementWithChildren) {\n            for (const child of requirement.children) {\n                clearCourseToRequirementInSelection(selectionName, child, newCourseToRequirement);\n            }\n        } else if (requirement instanceof SelectionRequirement && requirement.selectionName === selectionName) {\n            clearCourseToRequirement(requirement, newCourseToRequirement);\n        }\n    }\n\n    const handleOthersCountsChange = (requirement: RequirementWithCourses, newOthersCount: RegisteredCreditsCounts) => {\n        onChange({\n            ...plan,\n            requirementToOthersCount: new Map([\n                ...requirementToOthersCount,\n                [requirement, newOthersCount]\n            ]),\n        });\n    }\n\n    const handleSelectionChange = (selectionName: string, newOptionName: string) => {\n        const newCourseToRequirement = new Map(courseToRequirement);\n        clearCourseToRequirementInSelection(selectionName, requirement, newCourseToRequirement);\n        onChange({\n            ...plan,\n            courseToRequirement: newCourseToRequirement,\n            selectionNameToOptionName: new Map([...selectionNameToOptionName, [selectionName, newOptionName]]),\n        });\n    }\n\n    return (\n        <>\n            {modals}\n            <InnerRequirementView\n                requirement={requirement} plan={plan}\n                filterType={filterType} lockTarget={lockTarget}\n                onCourseClick={handleCourseClick} onOthersCountsChange={handleOthersCountsChange}\n                onSelectionChange={handleSelectionChange}\n            />\n        </>\n    );\n}\n\nexport default RequirementView;","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React, { useState } from 'react';\nimport { Accordion, Alert, Container, Dropdown, Form, Navbar } from 'react-bootstrap';\nimport { HashRouter, Link, Redirect, Route, Switch, useParams } from 'react-router-dom';\nimport { useLocalStorage } from 'react-use';\nimport './App.css';\nimport CollectivelyCourseSetView from './CollectivelyCourseSetView';\nimport codeToCourse from './courses';\nimport ExportView from './ExportView';\nimport FilterType from './FilterType';\nimport ImportView from './ImportView';\nimport Plan, { emptyPlan, fromJSON, PlanJSON, toJSON } from './Plan';\nimport RegistrationStatusLockTarget from './RegistrationStatusLockTarget';\nimport requirementAndDictionaryPairs from './requirementInstances';\nimport Requirements, { RequirementWithCourses } from './Requirements';\nimport RequirementView from './RequirementView';\n\nconst RequirementWithConfiguration: React.FC<{\n    requirement: Requirements,\n    nameToRequirement: ReadonlyMap<string, RequirementWithCourses>,\n    plan: Plan,\n    setPlan: (nextPlan: Plan) => void,\n}> = ({ requirement, nameToRequirement, plan, setPlan }) => {\n    const [filterType, setFilterType] = useState(FilterType.None);\n    const { lockTarget, setLockTarget } = useLockTarget(filterType);\n\n    return (\n        <>\n            <Accordion className=\"mb-3\">\n                <CollectivelyCourseSetView\n                    eventKey=\"0\"\n                    codeToCourse={codeToCourse}\n                    onSubmit={courseToStatus => setPlan({ ...plan, courseToStatus })}\n                />\n                <ExportView eventKey=\"1\" plan={plan} />\n                <ImportView\n                    eventKey=\"2\"\n                    onSubmit={setPlan}\n                    codeToCourse={codeToCourse}\n                    nameToRequirement={nameToRequirement}\n                />\n            </Accordion>\n            <Form.Group>\n                <Form.Label>科目の履修状態のロック</Form.Label>\n                {\n                    [\n                        {\n                            label: \"ロックしない\",\n                            lockTarget: RegistrationStatusLockTarget.None,\n                            disabled: filterType !== FilterType.None,\n                        },\n                        {\n                            label: \"[履修する] と [修得済み] の間の変更のみ許可\",\n                            lockTarget: RegistrationStatusLockTarget.Unregistered,\n                        },\n                        {\n                            label: \"[履修しない] と [履修する] の間の変更のみ許可\",\n                            lockTarget: RegistrationStatusLockTarget.Acquired,\n                            disabled: filterType !== FilterType.None,\n                        },\n                        {\n                            label: \"すべてロックする\",\n                            lockTarget: RegistrationStatusLockTarget.All,\n                        },\n                    ].map(({ label, disabled, lockTarget: lockTarget1 }) => (\n                        <Form.Check\n                            custom type=\"radio\"\n                            id={`lockTargetCheck${lockTarget1}`}\n                            label={label} key={lockTarget1}\n                            disabled={disabled}\n                            checked={lockTarget === lockTarget1}\n                            onChange={() => setLockTarget(lockTarget1)}\n                        />\n                    ))\n                }\n            </Form.Group>\n            <Form.Group>\n                <Form.Check\n                    custom\n                    id=\"filterTypeCheck0\"\n                    label=\"履修する科目のみ表示する\"\n                    checked={filterType !== FilterType.None}\n                    onChange={\n                        () => {\n                            if (filterType === FilterType.None) {\n                                setFilterType(FilterType.Registered);\n                            } else {\n                                setFilterType(FilterType.None);\n                            }\n                        }\n                    }\n                />\n                <Form.Check\n                    custom\n                    id=\"filterTypeCheck1\"\n                    label=\"単位数の計算に含まれる科目のみ表示する\"\n                    checked={filterType === FilterType.Valid}\n                    onChange={\n                        () => {\n                            if (filterType === FilterType.Valid) {\n                                setFilterType(FilterType.Registered);\n                            } else {\n                                setFilterType(FilterType.Valid);\n                            }\n                        }\n                    }\n                />\n            </Form.Group>\n            <hr />\n            <div className=\"mb-3\">\n                <RequirementView\n                    requirement={requirement}\n                    lockTarget={lockTarget} filterType={filterType}\n                    plan={plan} onChange={setPlan}\n                />\n            </div>\n        </>\n    );\n}\n\nconst InnerMain: React.FC<{ selectedId: string }> = ({ selectedId }) => {\n    const { plan, setPlan } = usePlan(selectedId);\n\n    const {\n        requirement,\n        nameToRequirement,\n        name: selectedName,\n    } = requirementAndDictionaryPairs.get(selectedId) ?? {};\n    if (requirement === undefined || nameToRequirement === undefined || selectedName === undefined) {\n        return (<Redirect to=\"/\" />);\n    }\n\n    return (\n        <>\n            <Alert variant=\"danger\" className=\"my-3\">\n                このツールの結果を利用する場合、必ず履修要覧や支援室などでその結果が正しいことを確認するようにしてください。\n                <strong>科目や要件の定義が誤っていることや、実際には認められない履修の組み合わせが存在することがあります。</strong>\n            </Alert>\n            <Dropdown className=\"mb-3\">\n                <Dropdown.Toggle id=\"department-dropdown\" variant=\"secondary\">\n                    <span\n                        style={{\n                            overflow: 'hidden',\n                            textOverflow: 'ellipsis',\n                        }}\n                    >\n                        学類\n                    <> : </>\n                        <strong>{selectedName}</strong>\n                    </span>\n                </Dropdown.Toggle>\n                <Dropdown.Menu>\n                    {\n                        [...requirementAndDictionaryPairs.values()].map(\n                            ({ id, name }) => (\n                                <Dropdown.Item as={Link} to={`/${id}`} active={id === selectedId}>\n                                    {name}\n                                </Dropdown.Item>\n                            )\n                        )\n                    }\n                </Dropdown.Menu>\n            </Dropdown>\n            <RequirementWithConfiguration requirement={requirement} nameToRequirement={nameToRequirement} plan={plan} setPlan={setPlan} />\n        </>\n    );\n}\n\nconst Main: React.FC = () => {\n    const { requirementId } = useParams();\n    if (requirementId === undefined) {\n        return (<Redirect to=\"/\" />);\n    } else {\n        return (<InnerMain selectedId={requirementId} />);\n    }\n}\n\nconst App: React.FC = () => (\n    <HashRouter>\n        <Navbar variant=\"dark\" bg=\"dark\">\n            <Navbar.Brand>卒業要件を満たしたい</Navbar.Brand>\n        </Navbar>\n        <Container>\n            <Switch>\n                <Route path=\"/:requirementId\">\n                    <Main />\n                </Route>\n                <Route path=\"/\">\n                    <Redirect to=\"/coins17\" />\n                </Route>\n            </Switch>\n        </Container>\n    </HashRouter>\n);\n\nconst useLockTarget = (filterType: FilterType) => {\n    const [lockTarget, setLockTarget] = useState(RegistrationStatusLockTarget.None);\n\n    if (filterType === FilterType.None) {\n        return { lockTarget, setLockTarget };\n    } else if (lockTarget === RegistrationStatusLockTarget.None) {\n        return {\n            lockTarget: RegistrationStatusLockTarget.Unregistered,\n            setLockTarget,\n        };\n    } else if (lockTarget === RegistrationStatusLockTarget.Acquired) {\n        return {\n            lockTarget: RegistrationStatusLockTarget.All,\n            setLockTarget,\n        };\n    } else {\n        return { lockTarget, setLockTarget };\n    }\n}\n\nconst COURSES_STATE = \"courses-state\"\n\nconst usePlanMap = () => {\n    const [storedJSON, setStoredJSON] = useLocalStorage<readonly (readonly [string, PlanJSON])[]>(COURSES_STATE);\n    const [planMap0, setPlanMap0] = useState(() => {\n        try {\n            const storedPlanEntries = storedJSON.map(([requirementName, planJSON]) => {\n                const nameToRequirement = requirementAndDictionaryPairs.get(requirementName)?.nameToRequirement;\n                if (nameToRequirement === undefined) {\n                    return undefined;\n                } else {\n                    try {\n                        return [requirementName, fromJSON(planJSON, { codeToCourse, nameToRequirement })] as const;\n                    } catch {\n                        return undefined;\n                    }\n                }\n            }).filter((value): value is NonNullable<typeof value> => value !== undefined);\n            const storedPlanMap: ReadonlyMap<string, Plan> = new Map(storedPlanEntries);\n            return storedPlanMap;\n        } catch {\n            const storedPlanMap: ReadonlyMap<string, Plan> = new Map();\n            return storedPlanMap;\n        }\n    });\n    const setPlanMap = (newPlanMap: ReadonlyMap<string, Plan>) => {\n        const planJSONEntries = [...newPlanMap].map(([requirementName, plan]) => [requirementName, toJSON(plan)] as const);\n        setPlanMap0(newPlanMap);\n        setStoredJSON(planJSONEntries);\n    };\n    return {\n        planMap: planMap0,\n        setPlanMap,\n    };\n}\n\nconst usePlan = (requirementName: string) => {\n    const { planMap, setPlanMap } = usePlanMap();\n\n    const plan = planMap.get(requirementName) || emptyPlan;\n    const setPlan = (newPlan: Plan) => {\n        const newPlanMap = new Map([\n            ...planMap,\n            [requirementName, newPlan]\n        ]);\n        setPlanMap(newPlanMap);\n    };\n\n    return { plan, setPlan };\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'react-app-polyfill/stable';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}