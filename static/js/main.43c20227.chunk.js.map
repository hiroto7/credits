{"version":3,"sources":["AssignmentsFindView/findAssignments.worker.ts","Plan.ts","AssignmentsFindView/index.tsx","getValueFromModal.tsx","safely.ts","CollectivelyCourseSetView.tsx","courses/index.ts","ExportView.tsx","FilterType.ts","ImportView.tsx","RegistrationStatusLockTarget.ts","Requirements/Requirements.ts","Requirements/getRequirementAndDictionaryFromJSON.ts","requirementInstances/index.ts","RequirementView/RequirementSummaryView.tsx","RequirementView/CourseMovementConfirmationModal.tsx","RequirementView/getNextStatus.ts","RequirementView/RequirementWithChildrenView.tsx","RequirementView/CourseList.tsx","RequirementView/RequirementWithCoursesView.tsx","RequirementView/SelectionRequirementView.tsx","RequirementView/InnerRequirementView.tsx","RequirementView/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Worker","RegistrationStatus","toJSON","courseToStatus","courseToRequirement","requirementToOthersCount","selectionNameToOptionName","Object","fromEntries","map","course","status","code","requirement","id","creditsCounts","fromJSON","json","codeToCourse","idToRequirement","Map","entries","get","undefined","Error","courseCode","requirementId","emptyPlan","AssignmentsFindView","plan","onSubmit","useState","worker","setWorker","show","setShow","isLoading","setIsLoading","plans","setPlans","onMessage","event","data","planJSON","handleHide","useEffect","terminate","Button","variant","onClick","AssignmentsFindWorker","addEventListener","postMessage","requirementJSON","Modal","onHide","Header","closeButton","Title","Body","className","ListGroup","plan1","getStatus","getRegisteredCreditCounts","Item","key","acquired","registered","action","Badge","Acquired","Registered","selectionName","optionName","Spinner","animation","Footer","initialModalsAndCount","modals","count","useModals","modalsAndCount","setModalsAndCount","getValueFromModal","ModalType","props","a","Promise","resolve","reject","modal","onReturn","value","onExited","filter","e","safely","f","args","placeholder","trim","CollectivelyCourseSetConfirmationModal","Table1","codeColumnIndex","titleColumnIndex","creditsCountColumnIndex","courseAndRecordPairs","setCourseToStatus","firstCourse","firstRecord","record","firstRecordIsHeader","Table","bordered","hover","responsive","style","whiteSpace","cell","index","_","slice","recordIndex","getTdContent","mapCourse","mapRecord","recordValue","tds0","title","recordTitle","textAlign","creditCount","recordCreditsCount","tds1","tds","OverlayTrigger","overlay","Tooltip","nextStatus","cursor","getColumnIndex","reduce","previous","current","Modal1","onBack","handleOKClick","setAllCourseStatus","size","ButtonGroup","Modal0","csv","setCSV","validated","setValidated","records","parse","length","Array","feedback","handleCSVChange","nextCSV","Form","Group","Label","Control","as","rows","onChange","target","isInvalid","Feedback","type","File","custom","accept","label","file","files","item","reader","FileReader","result","readAsText","disabled","CollectivelyCourseSetView","page","setPage","setCourseAndRecordPairs","setCodeColumnIndex","courses","set","ExportView","FilterType","eventKey","jsonText","JSON","stringify","url","setURL","blob","Blob","onLoad","readAsDataURL","removeEventListener","Card","Accordion","Toggle","Collapse","readOnly","onFocus","select","href","download","ImportConfirmationModal","ImportView","RegistrationStatusLockTarget","setJSONText","toggle","useAccordionToggle","nextPlan","handleJSONChange","nextJSON","handleSubmit","preventDefault","Requirement","constructor","name","this","requiredCreditCount","getRequiredCreditCount","registeredCreditCounts","min","Unregistered","RequirementWithChildren","description","children","super","includesExcess","creditCounts","child","childRegisteredCreditCount","Math","max","childRequiredCreditCount","getVisibleRequirements","flatMap","RequirementWithCourses","allowsOthers","othersCount","courseStatus","SelectionRequirement","options","options0","optionNameToRequirement","getSelectedOptionName","getSelectedRequirement","selectedOptionName","selectedRequirement","numberOrRangeToRange","numberOrRange","getInnerRequirementAndDictionaryFromJSON","requirementNameToCount","requirementAndDictionaryPairs","optionAndDictionaryArray","optionJSON","option","getRequirementAndDictionaryFromJSON","coins17_0","mast17_0","klis17_0","CreditsCountLabelDelimiter","ExceededCreditsCountLabel","creditsCount","CreditsCountLabels","exceededCreditsCount","requiredCreditsCount","RequirementSummaryView","CourseMovementConfirmationModal","currentRequirement","body","getNextStatus","currentStatus","lockTarget","All","RequirementWithChildrenView","filterType","onCourseClick","onOthersCountsChange","onSelectionChange","CourseListItem","newRequirement","isRegisteredButInvalid","some","course1","isRegistrable","CourseList","OthersCountInput","currentOthersCount","setAcquired","registeredExcludingAcquired","setRegisteredExcludingAcquired","registeredIncludingAcquired","setRegisteredIncludingAcquired","computed","border","Row","Col","md","step","ButtonToolbar","RequirementWithCoursesView","isOpen","setIsOpen","showsInput","setShowsInput","None","has","Valid","activeKey","block","SelectionRequirementView","Dropdown","overflow","textOverflow","Menu","zIndex","active","handleOptionClick","newOptionName","InnerRequirementView","RequirementView","handleCourseClick","nextCourseToStatus","newOthersCount","nextSelectionNameToOptionName","visibleRequirements","nextCourseToRequirement","includes","RequirementWithConfiguration","nameToRequirement","setPlan","setFilterType","useLockTarget","setLockTarget","lockTarget1","Check","checked","InnerMain","selectedId","usePlan","selectedName","to","Alert","values","Link","Main","useParams","requirementName","useLocalStorage","storedJSON","setStoredJSON","storedPlanEntries","planMap0","setPlanMap0","planMap","setPlanMap","newPlanMap","planJSONEntries","usePlanMap","newPlan","App","Navbar","bg","Brand","Container","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.43c20227.chunk.js","sourcesContent":["module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"34751ad57474ccc55a0e.worker.js\");\n};","import Course from \"./Course\";\nimport { RequirementWithCourses } from \"./Requirements\";\n\nexport interface RegisteredCreditCounts {\n    acquired: number;\n    registered: number;\n}\n\nexport default interface Plan {\n    readonly courseToStatus: ReadonlyMap<Course, RegistrationStatus>;\n    readonly courseToRequirement: ReadonlyMap<Course, RequirementWithCourses>;\n    readonly requirementToOthersCount: ReadonlyMap<RequirementWithCourses, RegisteredCreditCounts>;\n    readonly selectionNameToOptionName: ReadonlyMap<string, string>;\n}\n\nexport type CourseCode = string;\nexport type RequirementId = string;\n\nexport enum RegistrationStatus {\n    Unregistered = 0,\n    Registered = 1,\n    Acquired = 2,\n}\n\nexport interface PlanJSON {\n    readonly courseToStatus: { [courseCode: string]: RegistrationStatus };\n    readonly courseToRequirement: { [courseCode: string]: RequirementId };\n    readonly requirementToOthersCount: { [requirementName: string]: RegisteredCreditCounts };\n    readonly selectionNameToOptionName: { [selectionName: string]: string };\n}\n\nexport const toJSON =\n    ({ courseToStatus, courseToRequirement, requirementToOthersCount, selectionNameToOptionName }: Plan): PlanJSON => ({\n        courseToStatus: Object.fromEntries(\n            [...courseToStatus].map(([course, status]) => [course.code, status])\n        ),\n        courseToRequirement: Object.fromEntries(\n            [...courseToRequirement].map(([course, requirement]) => [course.code, requirement.id])\n        ),\n        requirementToOthersCount: Object.fromEntries(\n            [...requirementToOthersCount].map(([requirement, creditsCounts]) => [requirement.id, creditsCounts])\n        ),\n        selectionNameToOptionName: Object.fromEntries(selectionNameToOptionName),\n    });\n\nexport const fromJSON = (json: PlanJSON, { codeToCourse, idToRequirement }: {\n    codeToCourse: ReadonlyMap<CourseCode, Course>,\n    idToRequirement: ReadonlyMap<RequirementId, RequirementWithCourses>,\n}): Plan => {\n    const courseToStatus = new Map(\n        Object.entries(json.courseToStatus).map(([code, status]) => {\n            const course = codeToCourse.get(code);\n            if (course === undefined) { throw new Error(); }\n            return [course, status];\n        })\n    );\n\n    const courseToRequirement = new Map(\n        Object.entries(json.courseToRequirement).map(([courseCode, requirementId]) => {\n            const course = codeToCourse.get(courseCode);\n            const requirement = idToRequirement.get(requirementId);\n\n            if (course === undefined) { throw new Error(); }\n            if (requirement === undefined) { throw new Error(); }\n\n            return [course, requirement];\n        })\n    );\n\n    const requirementToOthersCount = new Map(\n        Object.entries(json.requirementToOthersCount).map(([requirementId, creditsCounts]) => {\n            const requirement = idToRequirement.get(requirementId);\n            if (requirement === undefined) { throw new Error(); }\n            return [requirement, creditsCounts];\n        })\n    );\n\n    const selectionNameToOptionName = new Map(Object.entries(json.selectionNameToOptionName));\n\n    return { courseToStatus, courseToRequirement, requirementToOthersCount, selectionNameToOptionName }\n}\n\nexport const emptyPlan: Plan = {\n    courseToStatus: new Map(),\n    courseToRequirement: new Map(),\n    requirementToOthersCount: new Map(),\n    selectionNameToOptionName: new Map(),\n};\n","import React, { useEffect, useState } from 'react';\nimport { Badge, Button, ListGroup, Modal, Spinner } from \"react-bootstrap\";\n// eslint-disable-next-line import/no-webpack-loader-syntax\nimport AssignmentsFindWorker from 'worker-loader!./findAssignments.worker';\nimport Course from '../Course';\nimport Plan, { fromJSON, PlanJSON, RegistrationStatus, toJSON } from '../Plan';\nimport Requirements, { RequirementWithCourses } from '../Requirements';\n\nconst AssignmentsFindView: React.FC<{\n    requirement: Requirements,\n    idToRequirement: ReadonlyMap<string, RequirementWithCourses>,\n    codeToCourse: ReadonlyMap<string, Course>,\n    plan: Plan,\n    onSubmit: (plan: Plan) => void,\n}> = ({ requirement, idToRequirement, codeToCourse, plan, onSubmit }) => {\n    const [worker, setWorker] = useState<Worker | undefined>(undefined);\n    const [show, setShow] = useState(false);\n    const [isLoading, setIsLoading] = useState(false);\n    const [plans, setPlans] = useState<readonly Plan[] | undefined>(undefined);\n\n    const onMessage = (event: MessageEvent) => {\n        if (event.data === 'done') {\n            setIsLoading(false);\n        } else {\n            const planJSONList: readonly PlanJSON[] = event.data;\n            const plans: readonly Plan[] = planJSONList.map(planJSON => fromJSON(planJSON, { codeToCourse, idToRequirement }));\n            setPlans(plans);\n        }\n    }\n\n    const handleHide = () => {\n        setShow(false);\n        setWorker(undefined);\n    }\n\n    useEffect(() => () => {\n        worker?.terminate();\n    }, [worker]);\n\n    return (\n        <>\n            <Button\n                variant=\"secondary\"\n                onClick={\n                    () => {\n                        setShow(true);\n                        setIsLoading(true);\n                        setPlans(undefined);\n                        const worker = new AssignmentsFindWorker();\n                        setWorker(worker);\n                        worker.addEventListener('message', onMessage);\n                        worker.postMessage({\n                            codeToCourse,\n                            planJSON: toJSON(plan),\n                            requirementJSON: requirement.toJSON(),\n                        });\n                    }\n                }\n            >\n                要件を満たす割り当てを見つける\n            </Button>\n            <Modal show={show} onHide={handleHide}>\n                <Modal.Header closeButton>\n                    <Modal.Title>要件を満たす割り当てを見つける</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <p>\n                        全体として修得単位数や履修単位数が最大となるような割り当てを見つけます。\n                        先に<b>履修状態の設定</b>と<b>単位数の入力</b>を行っておいてください。\n                    </p>\n                    {\n                        plans === undefined ?\n                            isLoading ? (<></>) : (<strong className=\"text-danger\">要件を満たす割り当ては見つかりませんでした。</strong>) :\n                            (\n                                <>\n                                    <p>見つかった割り当てが以下に表示されています。適用するものを選択します。</p>\n                                    <ListGroup className={isLoading ? 'mb-3' : undefined}>\n                                        {\n                                            plans.map(plan1 => {\n                                                const status = requirement.getStatus(plan1);\n                                                const creditsCounts = requirement.getRegisteredCreditCounts(plan1, false);\n                                                return (\n                                                    <ListGroup.Item\n                                                        key={`${creditsCounts.acquired}-${creditsCounts.registered}`}\n                                                        action\n                                                        onClick={() => { handleHide(); onSubmit(plan1); }}\n                                                    >\n                                                        <div className=\"d-flex justify-content-between align-items-center\">\n                                                            <div>\n                                                                修得\n                                                                <> </>\n                                                                <strong className=\"text-success\">{creditsCounts.acquired}</strong>\n                                                                <> / </>\n                                                                履修\n                                                                <> </>\n                                                                <strong className=\"text-primary\">{creditsCounts.registered}</strong>\n                                                            </div>\n                                                            <Badge className=\"ml-2 flex-shrink-0\" variant={status === RegistrationStatus.Acquired ? 'success' : status === RegistrationStatus.Registered ? 'primary' : 'secondary'}>\n                                                                {status === RegistrationStatus.Acquired ? '修得OK' : status === RegistrationStatus.Registered ? '履修OK' : '不足'}\n                                                            </Badge>\n                                                        </div>\n                                                        {\n                                                            [...plan1.selectionNameToOptionName].map(([selectionName, optionName]) => (\n                                                                <div key={selectionName}>\n                                                                    {selectionName}\n                                                                    <> : </>\n                                                                    <strong>{optionName}</strong>\n                                                                </div>\n                                                            ))\n                                                        }\n                                                    </ListGroup.Item>\n                                                )\n                                            })\n                                        }\n                                    </ListGroup>\n                                </>\n                            )\n                    }\n                    {\n                        isLoading ? (\n                            <>\n                                <p>\n                                    {plans === undefined ? '' : 'そのほかの'}割り当てを探しています。\n                                    この処理は短時間で終了しない場合があります。\n                                </p>\n                                <div className=\"text-center\">\n                                    <Spinner animation=\"border\" variant=\"primary\" />\n                                </div>\n                            </>\n                        ) : (<></>)\n                    }\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={handleHide}>キャンセル</Button>\n                </Modal.Footer>\n            </Modal>\n        </>\n    );\n}\n\nexport default AssignmentsFindView;","import React, { useState } from 'react';\n\nconst getValueFromModal = async <T, P>(\n    ModalType: React.ComponentType<{\n        onReturn: (value: T) => void,\n        onExited: () => void,\n    } & P>,\n    props: P,\n    setModalsAndCount: React.Dispatch<React.SetStateAction<ModalsAndCount>>,\n): Promise<T> => new Promise((resolve, reject) => {\n    try {\n        setModalsAndCount(({ modals, count }) => {\n            const modal = (\n                <ModalType\n                    {...props}\n                    onReturn={value => resolve(value)}\n                    onExited={() => setModalsAndCount(\n                        ({ modals, count }) => ({\n                            modals: modals.filter(value => value !== modal),\n                            count,\n                        })\n                    )}\n                    key={count}\n                />\n            );\n            return ({\n                modals: [...modals, modal],\n                count: count + 1,\n            })\n        });\n    } catch (e) {\n        reject(e);\n    }\n});\n\nexport interface ModalsAndCount {\n    readonly modals: readonly JSX.Element[];\n    readonly count: number;\n}\n\nconst initialModalsAndCount: ModalsAndCount = {\n    modals: [],\n    count: 0,\n};\n\nexport const useModals = () => {\n    const [modalsAndCount, setModalsAndCount] = useState(initialModalsAndCount);\n    return {\n        modals: modalsAndCount.modals,\n        setModalsAndCount,\n    };\n};\n\nexport default getValueFromModal;","const safely = <F extends (...args: any) => any>(f: F, ...args: Parameters<F>): ReturnType<F> | undefined => {\n    try {\n        return f(...args);\n    } catch {\n        return undefined;\n    }\n}\n\nexport default safely;","import parse from 'csv-parse/lib/sync';\nimport React, { useState } from 'react';\nimport { Badge, Button, ButtonGroup, Form, Modal, OverlayTrigger, Table, Tooltip } from \"react-bootstrap\";\nimport Course from './Course';\nimport getValueFromModal, { useModals } from './getValueFromModal';\nimport { RegistrationStatus } from './Plan';\nimport safely from './safely';\n\nconst placeholder = `\n\"学籍番号\",\"学生氏名\",\"科目番号\",\"科目名 \",\"単位数\",\"春学期\",\"秋学期\",\"総合評価\",\"科目区分\",\"開講年度\",\"開講区分\"\n\"201700000\",\"＊＊ ＊＊\",\"GB10615\",\"コンピュータリテラシ\",\" 2.0\",\"-\",\"-\",\"A\",\"A\",\"2017\",\"通常\"\n\"201700000\",\"＊＊ ＊＊\",\"GB10664\",\"プログラミング入門A\",\" 1.0\",\"-\",\"-\",\"A\",\"A\",\"2017\",\"通常\"\n`.trim();\n\ntype RegistrationStatus12 = RegistrationStatus.Registered | RegistrationStatus.Acquired\n\nconst CollectivelyCourseSetConfirmationModal = ({ onReturn, onExited }: {\n    onReturn: (value: boolean) => void,\n    onExited: () => void\n}) => {\n    const [show, setShow] = useState(true);\n\n    return (\n        <Modal show={show} onHide={() => { setShow(false); onReturn(false); }} onExited={onExited}>\n            <Modal.Header closeButton>\n                <Modal.Title>履修状態の一括登録</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                続けると、<strong>現在の履修 / 修得状態が失われます</strong>。\n                よろしいですか？\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={() => { setShow(false); onReturn(false); }}>いいえ</Button>\n                <Button variant=\"danger\" onClick={() => { setShow(false); onReturn(true); }}>はい</Button>\n            </Modal.Footer>\n        </Modal>\n    );\n}\n\nconst Table1: React.FC<{\n    codeColumnIndex: number,\n    titleColumnIndex: number | undefined,\n    creditsCountColumnIndex: number | undefined,\n    courseAndRecordPairs: readonly CourseAndRecordPair[],\n    courseToStatus: ReadonlyMap<Course, RegistrationStatus12>,\n    setCourseToStatus: (courseToStatus: ReadonlyMap<Course, RegistrationStatus12>) => void,\n}> = ({ codeColumnIndex, titleColumnIndex, creditsCountColumnIndex, courseAndRecordPairs, courseToStatus, setCourseToStatus }) => {\n    const {\n        course: firstCourse,\n        record: firstRecord,\n    } = courseAndRecordPairs[0];\n\n    const firstRecordIsHeader =\n        firstCourse === undefined &&\n        firstRecord[codeColumnIndex].trim() === '科目番号' &&\n        (titleColumnIndex === undefined || firstRecord[titleColumnIndex].trim() === '科目名') &&\n        (creditsCountColumnIndex === undefined || firstRecord[creditsCountColumnIndex].trim() === '単位数');\n\n    return (\n        <Table\n            bordered hover responsive\n            style={{ whiteSpace: 'nowrap' }}\n        >\n            <thead>\n                <tr>\n                    <th></th>\n                    <th>科目番号</th>\n                    <th>科目名</th>\n                    <th>単位数</th>\n                    {\n                        firstRecord\n                            .map((cell, index) => (<th key={index}>{firstRecordIsHeader ? cell : (<></>)}</th>))\n                            .filter((_, index) => index !== codeColumnIndex && index !== titleColumnIndex && index !== creditsCountColumnIndex)\n                    }\n                </tr>\n            </thead>\n            <tbody>\n                {\n                    (firstRecordIsHeader ? courseAndRecordPairs.slice(1) : courseAndRecordPairs).map(\n                        ({ course, record }, recordIndex) => {\n                            const getTdContent = <T,>(index: number | undefined, mapCourse: (course: Course) => T, mapRecord: (recordValue: string) => T) => {\n                                const recordValue = index === undefined ? undefined : record[index];\n                                return (\n                                    course === undefined ?\n                                        recordValue :\n                                        recordValue === undefined || mapRecord(recordValue) === mapCourse(course) ?\n                                            mapCourse(course) :\n                                            (\n                                                <>\n                                                    <div><del>{recordValue}</del></div>\n                                                    <div><ins>{mapCourse(course)}</ins></div>\n                                                </>\n                                            )\n                                );\n                            }\n\n                            const tds0 = (\n                                <>\n                                    <td><code>{record[codeColumnIndex]}</code></td>\n                                    <td>{getTdContent(titleColumnIndex, course => course.title, recordTitle => recordTitle.trim())}</td>\n                                    <td style={{ textAlign: 'center' }}>\n                                        {getTdContent(creditsCountColumnIndex, course => course.creditCount, recordCreditsCount => +recordCreditsCount)}\n                                    </td>\n                                </>\n                            );\n                            const tds1 = record\n                                .map((cell, index) => (\n                                    <td key={index}>\n                                        {\n                                            index === codeColumnIndex ?\n                                                (<code>{cell}</code>) :\n                                                index === titleColumnIndex ?\n                                                    cell :\n                                                    (<span className=\"text-muted\">{cell}</span>)\n                                        }\n                                    </td>\n                                ))\n                                .filter((_, index) =>\n                                    index !== codeColumnIndex &&\n                                    index !== titleColumnIndex &&\n                                    index !== creditsCountColumnIndex\n                                );\n\n                            const tds = (<>{tds0}{tds1}</>);\n\n                            if (course === undefined) {\n                                return (\n                                    <tr key={recordIndex}>\n                                        <td style={{ textAlign: 'center' }}>\n                                            <OverlayTrigger\n                                                overlay={\n                                                    <Tooltip id={`record${recordIndex}-tooltip`}>この科目は見つかりません。</Tooltip>\n                                                }\n                                            >\n                                                <Badge variant=\"secondary\">?</Badge>\n                                            </OverlayTrigger>\n                                        </td>\n                                        {tds}\n                                    </tr>\n                                )\n                            } else {\n                                const status = courseToStatus.get(course);\n                                const nextStatus = status === RegistrationStatus.Acquired ? RegistrationStatus.Registered : RegistrationStatus.Acquired;\n                                const variant = status === RegistrationStatus.Acquired ? 'success' : 'primary';\n\n                                return (\n                                    <tr\n                                        key={recordIndex}\n                                        onClick={\n                                            () => setCourseToStatus(new Map([\n                                                ...courseToStatus,\n                                                [course, nextStatus]\n                                            ]))\n                                        }\n                                        style={{ cursor: 'pointer' }}\n                                        className={`table-${variant}`}\n                                    >\n                                        <td style={{ textAlign: 'center' }}>\n                                            <Badge variant={variant}>\n                                                {status === RegistrationStatus.Acquired ? '修得済み' : '履修する'}\n                                            </Badge>\n                                        </td>\n                                        {tds}\n                                    </tr>\n                                )\n                            }\n                        }\n                    )\n                }\n            </tbody>\n        </Table>\n    );\n}\n\ninterface CourseAndRecordPair {\n    course: Course | undefined;\n    record: readonly string[];\n}\n\nconst getColumnIndex = <T,>(courseAndRecordPairs: readonly CourseAndRecordPair[], mapCourse: (course: Course) => T, mapRecord: (recordValue: string) => T) =>\n    courseAndRecordPairs[0].record\n        .map((_, index) => courseAndRecordPairs.reduce((count, { course, record }) => {\n            const recordValue = record[index];\n            if (course !== undefined && mapRecord(recordValue) === mapCourse(course)) {\n                return count + 1;\n            } else {\n                return count;\n            }\n        }, 0))\n        .reduce<{\n            count: number,\n            index: number | undefined,\n        }>((previous, current, index) => {\n            if (current > previous.count) {\n                return {\n                    count: current,\n                    index,\n                }\n            } else {\n                return previous;\n            }\n        }, {\n            count: 0,\n            index: undefined,\n        }).index;\n\nconst Modal1: React.FC<{\n    codeColumnIndex: number,\n    courseAndRecordPairs: readonly CourseAndRecordPair[],\n    show: boolean,\n    onHide: () => void,\n    onBack: () => void,\n    onSubmit: (courseToStatus: ReadonlyMap<Course, RegistrationStatus12>) => void,\n}> = ({ codeColumnIndex, courseAndRecordPairs, show, onHide, onBack, onSubmit }) => {\n    const { modals, setModalsAndCount } = useModals();\n    const [courseToStatus, setCourseToStatus] = useState<ReadonlyMap<Course, RegistrationStatus12>>(new Map());\n\n    const titleColumnIndex = getColumnIndex(courseAndRecordPairs, course => course.title, recordTitle => recordTitle.trim());\n    const creditsCountColumnIndex = getColumnIndex(courseAndRecordPairs, course => course.creditCount, recordCreditsCount => +recordCreditsCount)\n\n    const handleOKClick = async () => {\n        if (!await getValueFromModal(CollectivelyCourseSetConfirmationModal, {}, setModalsAndCount)) {\n            return;\n        }\n        onSubmit(new Map(\n            courseAndRecordPairs\n                .map(({ course }) => course)\n                .filter((course): course is NonNullable<typeof course> => course !== undefined)\n                .map(course => [course, courseToStatus.get(course) ?? RegistrationStatus.Registered])\n        ));\n    };\n\n    const setAllCourseStatus = (status: RegistrationStatus12) => {\n        setCourseToStatus(new Map(\n            courseAndRecordPairs\n                .map(({ course }) => course)\n                .filter((course): course is NonNullable<typeof course> => course !== undefined)\n                .map(course => [course, status])\n        ));\n    }\n\n    return (\n        <>\n            {modals}\n            <Modal size=\"xl\" show={show} onHide={onHide}>\n                <Modal.Header closeButton>\n                    <Modal.Title>履修状態の一括登録</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <p>\n                        CSVデータから見つかった科目が以下に表示されています。\n                        それぞれの科目を [履修する] / [修得済み] のどちらかに設定し、 [OK] ボタンを押します。\n                        <strong>現在の履修 / 修得状態は失われます。</strong>\n                    </p>\n                    <ButtonGroup className=\"mb-3\">\n                        <Button\n                            variant=\"outline-primary\"\n                            onClick={() => setAllCourseStatus(RegistrationStatus.Registered)}\n                        >\n                            すべて履修する\n                        </Button>\n                        <Button\n                            variant=\"outline-success\"\n                            onClick={() => setAllCourseStatus(RegistrationStatus.Acquired)}\n                        >\n                            すべて修得済み\n                        </Button>\n                    </ButtonGroup>\n                    <Table1\n                        codeColumnIndex={codeColumnIndex}\n                        titleColumnIndex={titleColumnIndex}\n                        creditsCountColumnIndex={creditsCountColumnIndex}\n                        courseAndRecordPairs={courseAndRecordPairs}\n                        courseToStatus={courseToStatus}\n                        setCourseToStatus={setCourseToStatus}\n                    />\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={onHide}>キャンセル</Button>\n                    <Button variant=\"secondary\" onClick={onBack}>戻る</Button>\n                    <Button onClick={handleOKClick}>OK</Button>\n                </Modal.Footer>\n            </Modal>\n        </>\n    );\n}\n\nconst Modal0: React.FC<{\n    codeToCourse: ReadonlyMap<string, Course>,\n    show: boolean,\n    onHide: () => void,\n    onSubmit: ({ courseAndRecordPairs, codeColumnIndex }: {\n        courseAndRecordPairs: readonly CourseAndRecordPair[],\n        codeColumnIndex: number,\n    }) => void,\n}> = ({ codeToCourse, show, onHide, onSubmit }) => {\n    const [csv, setCSV] = useState(\"\");\n    const [validated, setValidated] = useState(false);\n\n    const records: readonly (readonly string[])[] | undefined = safely(parse, csv);\n    const { courseAndRecordPairs, index: codeColumnIndex } = (\n        records === undefined || records.length === 0 ? undefined : records[0]\n            .map((_, index) => records.reduce(({ count, courseAndRecordPairs }, record) => {\n                const code = record[index];\n                const course = codeToCourse.get(code.trim());\n                return {\n                    count: course === undefined ? count : count + 1,\n                    courseAndRecordPairs: [...courseAndRecordPairs, { record, course }],\n                };\n            }, { count: 0, courseAndRecordPairs: new Array<CourseAndRecordPair>() }))\n            .reduce<{\n                count: number;\n                courseAndRecordPairs: readonly CourseAndRecordPair[] | undefined;\n                index: number | undefined;\n            }>((previous, current, index) => {\n                if (current.count > previous.count) {\n                    return { ...current, index };\n                } else {\n                    return previous;\n                }\n            }, {\n                count: 0,\n                courseAndRecordPairs: undefined,\n                index: undefined,\n            })\n    ) ?? {\n        courseAndRecordPairs: undefined,\n        index: undefined,\n    };\n\n    const feedback =\n        records === undefined ? 'CSVの形式が不正です' :\n            records.length === 0 ? 'CSVを入力してください' :\n                codeColumnIndex === undefined ? '科目がひとつも見つかりません' :\n                    undefined;\n\n    const handleCSVChange = (nextCSV: string) => {\n        setCSV(nextCSV);\n        setValidated(true);\n    }\n\n    return (\n        <Modal size=\"lg\" show={show} onHide={onHide}>\n            <Modal.Header closeButton>\n                <Modal.Title>履修状態の一括登録</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <p>\n                    ひとつの列に履修 / 修得する科目の番号が記述されたCSVデータを用意します。\n                </p>\n                <ul>\n                    <li>TWINS の [成績照会] 画面からダウンロードしたCSVファイルをそのまま使用できます。</li>\n                    <li>科目番号のみを各行に記述したデータも使用できます。</li>\n                </ul>\n                <p>\n                    用意したデータをテキストボックスに貼り付けるか、ファイルとして読み込みます。\n                </p>\n                <Form.Group>\n                    <Form.Label>CSV / 科目番号のリスト</Form.Label>\n                    <Form.Control\n                        as=\"textarea\"\n                        rows={5}\n                        placeholder={placeholder}\n                        value={csv}\n                        className=\"text-monospace\"\n                        onChange={\n                            (event: React.ChangeEvent<HTMLTextAreaElement>) => handleCSVChange(event.target.value)\n                        }\n                        style={{ whiteSpace: 'pre' }}\n                        isInvalid={validated && feedback !== undefined}\n                    />\n                    <Form.Control.Feedback type=\"invalid\">{feedback}</Form.Control.Feedback>\n                </Form.Group>\n                <Form.Group>\n                    <Form.Label>CSVファイル</Form.Label>\n                    <Form.File\n                        custom\n                        accept=\".csv,text/csv,text/plain\"\n                        id=\"csv-file-input\"\n                        label=\"Choose file\"\n                        onChange={\n                            (event: React.ChangeEvent<HTMLInputElement>) => {\n                                const file = event.target.files?.item(0);\n                                if (file === null || file === undefined) {\n                                    return;\n                                }\n                                const reader = new FileReader();\n                                reader.addEventListener('load', () => {\n                                    if (typeof reader.result === 'string') {\n                                        handleCSVChange(reader.result);\n                                    }\n                                });\n                                reader.readAsText(file);\n                            }\n                        }\n                    />\n                </Form.Group>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={onHide}>キャンセル</Button>\n                {\n                    courseAndRecordPairs === undefined || codeColumnIndex === undefined ?\n                        (<Button disabled>次へ</Button>) :\n                        (<Button onClick={() => onSubmit({ courseAndRecordPairs, codeColumnIndex })}>次へ</Button>)\n                }\n            </Modal.Footer>\n        </Modal>\n    )\n};\n\nconst CollectivelyCourseSetView: React.FC<{\n    codeToCourse: ReadonlyMap<string, Course>,\n    onSubmit: (courseToStatus: ReadonlyMap<Course, RegistrationStatus12>) => void,\n}> = ({ codeToCourse, onSubmit }) => {\n    const [page, setPage] = useState<number | undefined>();\n    const [courseAndRecordPairs, setCourseAndRecordPairs] = useState<readonly CourseAndRecordPair[] | undefined>();\n    const [codeColumnIndex, setCodeColumnIndex] = useState<number | undefined>();\n\n    return (\n        <>\n            <Button variant=\"secondary\" onClick={() => setPage(0)}>履修状態の一括登録</Button>\n            <Modal0\n                codeToCourse={codeToCourse}\n                show={page === 0}\n                onHide={() => setPage(undefined)}\n                onSubmit={\n                    ({ courseAndRecordPairs, codeColumnIndex }) => {\n                        setCourseAndRecordPairs(courseAndRecordPairs);\n                        setCodeColumnIndex(codeColumnIndex);\n                        setPage(1);\n                    }\n                }\n            />\n            {\n                courseAndRecordPairs === undefined || codeColumnIndex === undefined ? (<></>) : (\n                    <Modal1\n                        courseAndRecordPairs={courseAndRecordPairs}\n                        codeColumnIndex={codeColumnIndex}\n                        show={page === 1}\n                        onHide={() => setPage(undefined)}\n                        onBack={() => setPage(0)}\n                        onSubmit={\n                            (courseToStatus: ReadonlyMap<Course, RegistrationStatus12>) => {\n                                onSubmit(courseToStatus);\n                                setPage(undefined);\n                            }\n                        }\n                    />\n                )\n            }\n        </>\n    )\n}\n\nexport default CollectivelyCourseSetView;","import Course from '../Course';\nimport courses from './courses1.json';\n\nconst codeToCourse = new Map<string, Course>();\n\nfor (const course of courses) {\n    codeToCourse.set(course.code, course);\n}\n\nexport default codeToCourse;","import React, { useEffect, useState } from 'react';\nimport { Accordion, Button, Card, Form } from \"react-bootstrap\";\nimport Plan, { toJSON } from \"./Plan\";\n\nconst ExportView = ({ plan, eventKey }: {\n    plan: Plan,\n    eventKey: string,\n}) => {\n    const jsonText = JSON.stringify(toJSON(plan));\n    const [url, setURL] = useState<string | undefined>();\n    useEffect(() => {\n        const blob = new Blob([jsonText], { type: 'application/json' });\n        const reader = new FileReader();\n        const onLoad = () => {\n            const url = reader.result;\n            if (typeof url === 'string') {\n                setURL(url);\n            }\n        }\n        reader.addEventListener('load', onLoad);\n        reader.readAsDataURL(blob);\n        return () => reader.removeEventListener('load', onLoad);\n    }, [jsonText]);\n\n    return (\n        <Card>\n            <Card.Header>\n                <Accordion.Toggle eventKey={eventKey} variant=\"link\" as={Button}>\n                    エクスポート\n                </Accordion.Toggle>\n            </Card.Header>\n            <Accordion.Collapse eventKey={eventKey}>\n                <Card.Body>\n                    <Form>\n                        <Form.Group>\n                            <Form.Label>JSON</Form.Label>\n                            <Form.Control\n                                readOnly className=\"input-monospace\"\n                                value={jsonText}\n                                onFocus={(e: React.FocusEvent<HTMLInputElement>) => e.target.select()}\n                            />\n                        </Form.Group>\n                        <Button as='a' href={url} download>保存</Button>\n                    </Form>\n                </Card.Body>\n            </Accordion.Collapse>\n        </Card>\n    );\n}\n\nexport default ExportView;","enum FilterType {\n    None,\n    Registered,\n    Valid,\n}\n\nexport default FilterType;","import React, { useState } from 'react';\nimport { Accordion, Button, Card, Form, Modal, useAccordionToggle } from \"react-bootstrap\";\nimport Course from \"./Course\";\nimport getValueFromModal, { useModals } from './getValueFromModal';\nimport Plan, { emptyPlan, fromJSON, toJSON } from \"./Plan\";\nimport { RequirementWithCourses } from \"./Requirements\";\nimport safely from './safely';\n\nconst ImportConfirmationModal = ({ onReturn, onExited }: {\n    onReturn: (value: boolean) => void,\n    onExited: () => void\n}) => {\n    const [show, setShow] = useState(true);\n\n    return (\n        <Modal show={show} onHide={() => { setShow(false); onReturn(false); }} onExited={onExited}>\n            <Modal.Header closeButton>\n                <Modal.Title>インポート</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                インポートすると現在の設定状態は失われますが、よろしいですか？\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={() => { setShow(false); onReturn(false); }}>いいえ</Button>\n                <Button variant=\"danger\" onClick={() => { setShow(false); onReturn(true); }}>はい</Button>\n            </Modal.Footer>\n        </Modal>\n    );\n}\n\nconst ImportView = ({ eventKey, codeToCourse, idToRequirement, onSubmit }: {\n    eventKey: string,\n    codeToCourse: ReadonlyMap<string, Course>,\n    idToRequirement: ReadonlyMap<string, RequirementWithCourses>,\n    onSubmit: (nextPlan: Plan) => void,\n}) => {\n    const [jsonText, setJSONText] = useState(\"\");\n    const [validated, setValidated] = useState(false);\n    const toggle = useAccordionToggle(eventKey, () => { });\n    const { modals, setModalsAndCount } = useModals();\n\n    const json = safely(JSON.parse, jsonText);\n    const nextPlan = json && safely(fromJSON, json, { codeToCourse, idToRequirement });\n    const isInvalid = nextPlan === undefined;\n\n    const handleJSONChange = (nextJSON: string) => {\n        setJSONText(nextJSON);\n        setValidated(true);\n    }\n\n    const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        if (\n            nextPlan === undefined ||\n            !await getValueFromModal(ImportConfirmationModal, {}, setModalsAndCount)\n        ) {\n            return;\n        }\n        onSubmit(nextPlan);\n        toggle();\n    };\n\n    return (\n        <>\n            {modals}\n            <Card>\n                <Card.Header>\n                    <Accordion.Toggle eventKey={eventKey} variant=\"link\" as={Button}>\n                        インポート\n                    </Accordion.Toggle>\n                </Card.Header>\n                <Accordion.Collapse eventKey={eventKey}>\n                    <Card.Body>\n                        <p>\n                            保存したJSONデータをテキストボックスに貼り付けるか、ファイルとして読み込みます。\n                            次に [インポート] ボタンを押します。\n                            <strong>現在の設定状態は失われます。</strong>\n                        </p>\n                        <Form onSubmit={handleSubmit}>\n                            <Form.Group>\n                                <Form.Label>JSON</Form.Label>\n                                <Form.Control\n                                    className=\"input-monospace\"\n                                    isInvalid={validated && isInvalid}\n                                    value={jsonText}\n                                    placeholder={JSON.stringify(toJSON(emptyPlan))}\n                                    onChange={(event: React.ChangeEvent<HTMLInputElement>) => handleJSONChange(event.target.value)}\n                                />\n                                <Form.Control.Feedback type=\"invalid\">JSONの形式が不正です</Form.Control.Feedback>\n                            </Form.Group>\n                            <Form.Group>\n                                <Form.Label>JSONファイル</Form.Label>\n                                <Form.File\n                                    custom\n                                    label=\"Choose file\"\n                                    accept=\".json,application/json\"\n                                    id=\"json-file-input\"\n                                    onChange={\n                                        (event: React.ChangeEvent<HTMLInputElement>) => {\n                                            const file = event.target.files?.item(0);\n                                            if (file === null || file === undefined) {\n                                                return;\n                                            }\n                                            const reader = new FileReader();\n                                            reader.addEventListener('load', () => {\n                                                if (typeof reader.result === 'string') {\n                                                    handleJSONChange(reader.result);\n                                                }\n                                            });\n                                            reader.readAsText(file);\n                                        }\n                                    }\n                                />\n                            </Form.Group>\n                            <Button type=\"submit\" disabled={isInvalid}>インポート</Button>\n                        </Form>\n                    </Card.Body>\n                </Accordion.Collapse>\n            </Card>\n        </>\n    );\n}\n\nexport default ImportView;","enum RegistrationStatusLockTarget {\n    Unregistered = 0,\n    Acquired = 2,\n    All = 3,\n    None = 4,\n}\n\nexport default RegistrationStatusLockTarget;","import Course from \"../Course\";\nimport Plan, { RegisteredCreditCounts, RegistrationStatus } from \"../Plan\";\nimport { RequirementWithChildrenJSON, RequirementWithCoursesJSON, SelectionRequirementJSON } from './RequirementsJSON';\n\ntype Requirements = RequirementWithChildren | RequirementWithCourses | SelectionRequirement;\nexport default Requirements;\n\nabstract class Requirement {\n    readonly id: string\n    readonly name: string;\n    abstract getRegisteredCreditCounts(plan: Plan, includesExcess: boolean): RegisteredCreditCounts;\n    abstract getRequiredCreditCount(selectionNameToOptionName: ReadonlyMap<string, string>): Range;\n    abstract getVisibleRequirements(selectionNameToOptionName: ReadonlyMap<string, string>): readonly RequirementWithCourses[];\n    constructor({ id, name }: { id: string, name: string }) {\n        this.id = id;\n        this.name = name;\n    }\n    getStatus(plan: Plan): RegistrationStatus {\n        const requiredCreditCount = this.getRequiredCreditCount(plan.selectionNameToOptionName);\n        const registeredCreditCounts = this.getRegisteredCreditCounts(plan, false);\n        return registeredCreditCounts.acquired >= requiredCreditCount.min ?\n            RegistrationStatus.Acquired :\n            registeredCreditCounts.registered >= requiredCreditCount.min ?\n                RegistrationStatus.Registered :\n                RegistrationStatus.Unregistered;\n    }\n}\n\nexport interface Range {\n    min: number;\n    max: number;\n}\n\nexport interface RequirementWithChildrenInit {\n    readonly id: string;\n    readonly name: string;\n    readonly description?: string;\n    readonly children: Iterable<Requirements>;\n    readonly creditCount?: Range;\n}\n\nexport class RequirementWithChildren extends Requirement implements RequirementWithChildrenInit {\n    readonly description?: string;\n    readonly children: readonly Requirements[];\n    readonly creditCount?: Range;\n    constructor({ id, name, description, children, creditCount }: RequirementWithChildrenInit) {\n        super({ id, name });\n        this.description = description\n        this.children = [...children];\n        this.creditCount = creditCount;\n    }\n    getRegisteredCreditCounts(plan: Plan, includesExcess: boolean): RegisteredCreditCounts {\n        const creditCounts = this.children.reduce(\n            (previous, child) => {\n                const childRegisteredCreditCount = child.getRegisteredCreditCounts(plan, includesExcess);\n                return {\n                    acquired: previous.acquired + childRegisteredCreditCount.acquired,\n                    registered: previous.registered + childRegisteredCreditCount.registered,\n                }\n            },\n            { acquired: 0, registered: 0 }\n        );\n        return includesExcess || this.creditCount === undefined ? creditCounts : {\n            acquired: Math.min(this.creditCount.max, creditCounts.acquired),\n            registered: Math.min(this.creditCount.max, creditCounts.registered),\n        };\n    }\n    getRequiredCreditCount(selectionNameToOptionName: ReadonlyMap<string, string>): Range {\n        return this.creditCount === undefined ? this.children.reduce((previous, child) => {\n            const childRequiredCreditCount = child.getRequiredCreditCount(selectionNameToOptionName);\n            return {\n                min: previous.min + childRequiredCreditCount.min,\n                max: previous.max + childRequiredCreditCount.max,\n            }\n        }, { min: 0, max: 0 }) : this.creditCount;\n    }\n    getStatus(plan: Plan): RegistrationStatus {\n        return Math.min(\n            super.getStatus(plan),\n            ...this.children.map(child => child.getStatus(plan))\n        );\n    }\n    getVisibleRequirements(selectionNameToOptionName: ReadonlyMap<string, string>): readonly RequirementWithCourses[] {\n        return this.children.flatMap(requirement => requirement.getVisibleRequirements(selectionNameToOptionName));\n    }\n    toJSON(): RequirementWithChildrenJSON {\n        return {\n            name: this.name,\n            description: this.description,\n            children: this.children.map(child => child.toJSON()),\n            creditCount: this.creditCount,\n        }\n    }\n}\n\nexport interface RequirementWithCoursesInit {\n    readonly id: string;\n    readonly name: string;\n    readonly description?: string;\n    readonly courses: Iterable<Course>;\n    readonly creditCount: Range;\n    readonly allowsOthers?: boolean;\n}\n\nexport class RequirementWithCourses extends Requirement {\n    readonly description?: string;\n    readonly courses: readonly Course[];\n    readonly creditCount: Range;\n    readonly allowsOthers: boolean;\n    constructor({ id, name, description, courses, creditCount, allowsOthers = false }: RequirementWithCoursesInit) {\n        super({ id, name });\n        this.description = description;\n        this.courses = [...courses];\n        this.creditCount = creditCount;\n        this.allowsOthers = allowsOthers;\n    }\n    getRegisteredCreditCounts(plan: Plan, includesExcess: boolean): RegisteredCreditCounts {\n        const othersCount = plan.requirementToOthersCount.get(this) || { acquired: 0, registered: 0 };\n        const creditCounts = this.courses.reduce((previous, course): RegisteredCreditCounts => {\n            const courseStatus = plan.courseToStatus.get(course) || RegistrationStatus.Unregistered;\n            if (plan.courseToRequirement.get(course) === this) {\n                return courseStatus === RegistrationStatus.Acquired ?\n                    {\n                        acquired: previous.acquired + course.creditCount,\n                        registered: previous.registered + course.creditCount,\n                    } :\n                    courseStatus === RegistrationStatus.Registered ?\n                        {\n                            acquired: previous.acquired,\n                            registered: previous.registered + course.creditCount,\n                        } :\n                        previous;\n            } else {\n                return previous;\n            }\n        }, othersCount);\n        return includesExcess || this.creditCount === undefined ? creditCounts : {\n            acquired: Math.min(this.creditCount.max, creditCounts.acquired),\n            registered: Math.min(this.creditCount.max, creditCounts.registered),\n        };\n    }\n    getRequiredCreditCount() {\n        return this.creditCount;\n    }\n    getVisibleRequirements() {\n        return [this] as const;\n    }\n    toJSON(): RequirementWithCoursesJSON {\n        return {\n            name: this.name,\n            description: this.description,\n            courses: this.courses.map(course => course.code),\n            creditCount: this.creditCount,\n            allowsOthers: this.allowsOthers,\n        }\n    }\n}\n\ninterface Option {\n    name: string;\n    requirement: Requirements;\n}\n\nexport interface SelectionRequirementInit {\n    readonly id: string;\n    readonly name: string;\n    readonly options: Iterable<Option>;\n}\n\nexport class SelectionRequirement extends Requirement implements SelectionRequirementInit {\n    readonly name: string;\n    readonly options: readonly Option[];\n    readonly optionNameToRequirement: ReadonlyMap<string, Requirements>;\n    constructor({ id, name, options: options0 }: SelectionRequirementInit) {\n        super({ id, name });\n        this.name = name;\n        const options = [...options0]\n        this.options = options;\n        this.optionNameToRequirement = new Map(options.map(({ name, requirement }) => [name, requirement]));\n    }\n    getSelectedOptionName(selectionNameToOptionName: ReadonlyMap<string, string>) {\n        const selectedOptionName = selectionNameToOptionName.get(this.name) || this.options[0].name;\n        return selectedOptionName;\n    }\n    getSelectedRequirement(selectionNameToOptionName: ReadonlyMap<string, string>) {\n        const selectedOptionName = this.getSelectedOptionName(selectionNameToOptionName);\n        const selectedRequirement = this.optionNameToRequirement.get(selectedOptionName);\n        return selectedRequirement;\n    }\n    getRegisteredCreditCounts(plan: Plan, includesExcess: boolean): RegisteredCreditCounts {\n        const selectedRequirement = this.getSelectedRequirement(plan.selectionNameToOptionName);\n        if (selectedRequirement === undefined) {\n            return { acquired: 0, registered: 0 };\n        } else {\n            return selectedRequirement.getRegisteredCreditCounts(plan, includesExcess);\n        }\n    }\n    getRequiredCreditCount(selectionNameToOptionName: ReadonlyMap<string, string>): Range {\n        const selectedRequirement = this.getSelectedRequirement(selectionNameToOptionName);\n        if (selectedRequirement === undefined) {\n            return { min: 0, max: 0 };\n        } else {\n            return selectedRequirement.getRequiredCreditCount(selectionNameToOptionName);\n        }\n    }\n    getVisibleRequirements(selectionNameToOptionName: ReadonlyMap<string, string>): readonly RequirementWithCourses[] {\n        const selectedRequirement = this.getSelectedRequirement(selectionNameToOptionName);\n        if (selectedRequirement === undefined) {\n            return [];\n        } else {\n            return selectedRequirement.getVisibleRequirements(selectionNameToOptionName);\n        }\n    }\n    toJSON(): SelectionRequirementJSON {\n        return {\n            name: this.name,\n            options: this.options.map(({ name, requirement }) => ({\n                name,\n                requirement: requirement.toJSON(),\n            }))\n        }\n    }\n}\n","import Course from \"../Course\";\nimport Requirements, { Range, RequirementWithChildren, RequirementWithCourses, SelectionRequirement } from \"./Requirements\";\nimport RequirementsJSON from \"./RequirementsJSON\";\n\ninterface RequirementAndDictionary {\n    readonly requirement: Requirements;\n    readonly idToRequirement: ReadonlyMap<string, RequirementWithCourses>;\n}\n\nconst numberOrRangeToRange = (numberOrRange: number | Range): Range =>\n    typeof numberOrRange === 'number' ? {\n        min: numberOrRange,\n        max: numberOrRange,\n    } : numberOrRange;\n\nconst getInnerRequirementAndDictionaryFromJSON = (\n    json: RequirementsJSON,\n    codeToCourse: ReadonlyMap<string, Course>,\n    requirementNameToCount: Map<string, number>\n): RequirementAndDictionary => {\n    const count = requirementNameToCount.get(json.name) ?? 0;\n    requirementNameToCount.set(json.name, count + 1);\n    const id = `${json.name}_${count}`;\n    if ('courses' in json) {\n        const requirement = new RequirementWithCourses({\n            id,\n            name: json.name,\n            description: json.description,\n            creditCount: numberOrRangeToRange(json.creditCount),\n            courses: json.courses.map(courseCode => {\n                const course = codeToCourse.get(courseCode);\n                if (course === undefined) { throw new Error(`科目番号 ${courseCode} は定義されていません。`); }\n                return course;\n            }),\n            allowsOthers: json.allowsOthers,\n        });\n        return {\n            requirement,\n            idToRequirement: new Map([[requirement.id, requirement]]),\n        };\n    } else if ('children' in json) {\n        const requirementAndDictionaryPairs = json.children.map(child => getInnerRequirementAndDictionaryFromJSON(child, codeToCourse, requirementNameToCount));\n        const requirement = new RequirementWithChildren({\n            id,\n            name: json.name,\n            description: json.description,\n            children: requirementAndDictionaryPairs.map(({ requirement }) => requirement),\n            creditCount: json.creditCount === undefined ? undefined : numberOrRangeToRange(json.creditCount),\n        });\n        return {\n            requirement,\n            idToRequirement: new Map(\n                requirementAndDictionaryPairs.flatMap(({ idToRequirement }) => [...idToRequirement.entries()])\n            ),\n        };\n    } else {\n        const optionAndDictionaryArray = json.options.map(optionJSON => {\n            if ('requirement' in optionJSON) {\n                const { requirement, idToRequirement } = getInnerRequirementAndDictionaryFromJSON(optionJSON.requirement, codeToCourse, requirementNameToCount);\n                return {\n                    option: { requirement, name: optionJSON.name },\n                    idToRequirement,\n                };\n            } else {\n                const { requirement, idToRequirement } = getInnerRequirementAndDictionaryFromJSON(optionJSON, codeToCourse, requirementNameToCount);\n                return {\n                    option: { requirement, name: requirement.name },\n                    idToRequirement,\n                };\n            }\n        })\n        const requirement = new SelectionRequirement({\n            id,\n            name: json.name,\n            options: optionAndDictionaryArray.map(({ option }) => option),\n        });\n        return {\n            requirement,\n            idToRequirement: new Map(\n                optionAndDictionaryArray.flatMap(({ idToRequirement }) => [...idToRequirement.entries()])\n            ),\n        };\n    }\n};\n\nconst getRequirementAndDictionaryFromJSON = (\n    json: RequirementsJSON,\n    codeToCourse: ReadonlyMap<string, Course>\n) => getInnerRequirementAndDictionaryFromJSON(json, codeToCourse, new Map())\n\nexport default getRequirementAndDictionaryFromJSON;\n","import codeToCourse from '../courses';\nimport { getRequirementAndDictionaryFromJSON } from '../Requirements';\nimport coins17_0 from './coins17.json';\nimport klis17_0 from './klis17.json';\nimport mast17_0 from './mast17.json';\n\nconst requirementAndDictionaryPairs = new Map([\n    ['coins17', {\n        id: 'coins17',\n        name: '情報科学類 / 2017年度入学',\n        ...getRequirementAndDictionaryFromJSON(coins17_0, codeToCourse)\n    }],\n    ['mast17', {\n        id: 'mast17',\n        name: '情報メディア創成学類 / 2017年度入学',\n        ...getRequirementAndDictionaryFromJSON(mast17_0, codeToCourse)\n    }],\n    ['klis17', {\n        id: 'klis17',\n        name: '知識情報・図書館学類 / 2017年度入学',\n        ...getRequirementAndDictionaryFromJSON(klis17_0, codeToCourse)\n    }],\n]);\n\nexport default requirementAndDictionaryPairs;","import React from 'react';\nimport { Badge } from 'react-bootstrap';\nimport Plan, { RegistrationStatus } from '../Plan';\nimport Requirements, { RequirementWithChildren, RequirementWithCourses } from '../Requirements';\n\nconst CreditsCountLabelDelimiter = () => (<span className=\"text-muted\"> / </span>)\n\nconst ExceededCreditsCountLabel = ({ creditsCount }: { creditsCount: number }) => (\n    <>\n        <span className=\"text-muted\">(</span>\n        +{creditsCount}\n        <span className=\"text-muted\">)</span>\n    </>\n);\n\nconst CreditsCountLabels = ({ requirement, plan }: {\n    requirement: Requirements,\n    plan: Plan,\n}) => {\n    const creditsCount = requirement.getRegisteredCreditCounts(plan, false);\n    const exceededCreditsCount = requirement.getRegisteredCreditCounts(plan, true);\n    const requiredCreditsCount = requirement.getRequiredCreditCount(plan.selectionNameToOptionName);\n\n    return (\n        <div>\n            <span>\n                <span className=\"text-muted\">修得</span>\n                <> </>\n                <strong className=\"text-success\">{creditsCount.acquired}</strong>\n                {exceededCreditsCount.acquired > creditsCount.acquired ? (<ExceededCreditsCountLabel creditsCount={exceededCreditsCount.acquired - creditsCount.acquired} />) : (<></>)}\n            </span>\n            <CreditsCountLabelDelimiter />\n            <span>\n                <span className=\"text-muted\">履修</span>\n                <> </>\n                <strong className=\"text-primary\">{creditsCount.registered}</strong>\n                {exceededCreditsCount.registered > creditsCount.registered ? (<ExceededCreditsCountLabel creditsCount={exceededCreditsCount.registered - creditsCount.registered} />) : (<></>)}\n            </span>\n            <CreditsCountLabelDelimiter />\n            <span>\n                <span className=\"text-muted\">必要</span>\n                <> </>\n                <strong>\n                    {\n                        requiredCreditsCount.min === requiredCreditsCount.max ?\n                            requiredCreditsCount.min :\n                            `${requiredCreditsCount.min}~${requiredCreditsCount.max}`\n                    }\n                </strong>\n            </span>\n        </div>\n    )\n};\n\nexport const RequirementSummaryView = ({ requirement, plan }: {\n    requirement: RequirementWithChildren | RequirementWithCourses,\n    plan: Plan,\n}) => {\n    const status = requirement.getStatus(plan);\n    return (\n        <>\n            <h5 className=\"d-flex justify-content-between align-items-center\">\n                <div>{requirement.name}</div>\n                <Badge className=\"ml-2 flex-shrink-0\" variant={status === RegistrationStatus.Acquired ? 'success' : status === RegistrationStatus.Registered ? 'primary' : 'secondary'}>\n                    {status === RegistrationStatus.Acquired ? '修得OK' : status === RegistrationStatus.Registered ? '履修OK' : '不足'}\n                </Badge>\n            </h5>\n            <div>\n                {requirement.description === undefined ? (<></>) : (<div className=\"text-muted\">{requirement.description}</div>)}\n                <CreditsCountLabels requirement={requirement} plan={plan} />\n            </div>\n        </>\n    );\n}\n","import React, { useState } from \"react\";\nimport { Button, Card, Modal } from \"react-bootstrap\";\nimport Plan from \"../Plan\";\nimport { RequirementWithCourses } from \"../Requirements\";\nimport { RequirementSummaryView } from \"./RequirementSummaryView\";\n\nconst CourseMovementConfirmationModal = ({ currentRequirement, plan, onReturn, onExited }: {\n    currentRequirement: RequirementWithCourses,\n    plan: Plan,\n    onReturn: (value: boolean) => void,\n    onExited: () => void,\n}) => {\n    const [show, setShow] = useState(true);\n\n    return (\n        <Modal show={show} onHide={() => { setShow(false); onReturn(false); }} onExited={onExited}>\n            <Modal.Header closeButton>\n                <Modal.Title>科目群の割り当てを変更</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <p>\n                    この科目は、すでに以下の科目群に割り当てられています。\n                    <strong>続けると、この科目群への割り当ては解除されます。</strong>\n                </p>\n                <p>各科目に割り当てできる科目群は1つまでです。</p>\n                <Card body>\n                    <RequirementSummaryView requirement={currentRequirement} plan={plan} />\n                </Card>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={() => { setShow(false); onReturn(false); }}>キャンセル</Button>\n                <Button variant=\"primary\" onClick={() => { setShow(false); onReturn(true); }}>続ける</Button>\n            </Modal.Footer>\n        </Modal>\n    );\n};\n\nexport default CourseMovementConfirmationModal;","import { RegistrationStatus } from '../Plan';\nimport RegistrationStatusLockTarget from '../RegistrationStatusLockTarget';\n\nconst getNextStatus = ({ currentStatus, lockTarget }: {\n    currentStatus: RegistrationStatus,\n    lockTarget: RegistrationStatusLockTarget,\n}): RegistrationStatus => {\n    switch (lockTarget) {\n        case RegistrationStatusLockTarget.All:\n            return currentStatus;\n        case RegistrationStatusLockTarget.Acquired:\n        case RegistrationStatusLockTarget.Unregistered:\n            const difference = (3 + lockTarget - currentStatus) % 3;\n            switch (difference) {\n                case 0:\n                    return currentStatus;\n                case 1:\n                    return (currentStatus + 2) % 3;\n                default:\n                    return (currentStatus + 1) % 3;\n            }\n        default:\n            return (currentStatus + 1) % 3;\n    }\n}\n\nexport default getNextStatus;","import React from 'react';\nimport { ListGroup } from 'react-bootstrap';\nimport Course from '../Course';\nimport FilterType from '../FilterType';\nimport Plan, { RegisteredCreditCounts } from '../Plan';\nimport RegistrationStatusLockTarget from '../RegistrationStatusLockTarget';\nimport { RequirementWithChildren, RequirementWithCourses } from '../Requirements';\nimport InnerRequirementView from './InnerRequirementView';\nimport { RequirementSummaryView } from './RequirementSummaryView';\n\nconst RequirementWithChildrenView = ({ requirement, filterType, lockTarget, plan, onCourseClick, onOthersCountsChange, onSelectionChange }: {\n    requirement: RequirementWithChildren,\n    filterType: FilterType,\n    lockTarget: RegistrationStatusLockTarget,\n    plan: Plan,\n    onCourseClick: (course: Course, requirement: RequirementWithCourses) => void,\n    onOthersCountsChange: (requirement: RequirementWithCourses, newOthersCount: RegisteredCreditCounts) => void,\n    onSelectionChange: (selectionName: string, newOptionName: string) => void,\n}) => (\n        <>\n            <RequirementSummaryView requirement={requirement} plan={plan} />\n            <ListGroup className=\"mt-3\">\n                {\n                    requirement.children.map(child => (\n                        <ListGroup.Item key={child.id}>\n                            <InnerRequirementView\n                                requirement={child} plan={plan}\n                                filterType={filterType} lockTarget={lockTarget}\n                                onCourseClick={onCourseClick} onSelectionChange={onSelectionChange}\n                                onOthersCountsChange={onOthersCountsChange}\n                            />\n                        </ListGroup.Item>\n                    ))\n                }\n            </ListGroup>\n        </>\n    );\n\nexport default RequirementWithChildrenView;","import React from 'react';\nimport { Badge, ListGroup, OverlayTrigger, Tooltip } from \"react-bootstrap\";\nimport Course from \"../Course\";\nimport Plan, { RegistrationStatus } from '../Plan';\nimport RegistrationStatusLockTarget from '../RegistrationStatusLockTarget';\nimport Requirements, { RequirementWithCourses } from \"../Requirements\";\nimport getNextStatus from './getNextStatus';\n\nconst isRegistrable = ({ course, courseToStatus }: {\n    course: Course,\n    courseToStatus: ReadonlyMap<Course, RegistrationStatus>,\n}) => ![...courseToStatus].some(\n    ([course1, status]) =>\n        course1 !== course && course1.title === course.title && status !== RegistrationStatus.Unregistered\n);\n\nconst CourseListItem = ({ course, onClick, newRequirement, plan, lockTarget }: {\n    course: Course,\n    newRequirement: Requirements,\n    plan: Plan,\n    lockTarget: RegistrationStatusLockTarget,\n    onClick: () => void,\n}) => {\n    const status = plan.courseToStatus.get(course) ?? RegistrationStatus.Unregistered;\n    const currentRequirement = plan.courseToRequirement.get(course);\n    const isRegisteredButInvalid = status !== RegistrationStatus.Unregistered && currentRequirement !== newRequirement;\n    const disabled = !isRegistrable({\n        course,\n        courseToStatus: plan.courseToStatus\n    });\n    const action = getNextStatus({ currentStatus: status, lockTarget }) !== status || isRegisteredButInvalid;\n\n    return (\n        <ListGroup.Item\n            action={action}\n            onClick={onClick}\n            disabled={disabled}\n            variant={\n                isRegisteredButInvalid ? 'dark' :\n                    status === RegistrationStatus.Acquired ? 'success' :\n                        status === RegistrationStatus.Registered ? 'primary' :\n                            undefined\n            }\n        >\n            <div className=\"d-flex justify-content-between align-items-center\">\n                <div>\n                    <div>{course.title}</div>\n                    <code>{course.code}</code>\n                </div>\n                <div className=\"ml-2 text-right flex-shrink-0\">\n                    {\n                        isRegisteredButInvalid ?\n                            (\n                                <OverlayTrigger\n                                    overlay={\n                                        <Tooltip id=\"tooltip1\">\n                                            {\n                                                currentRequirement === undefined ?\n                                                    'この科目はどの科目群にも割り当てられていません。' :\n                                                    'この科目はほかの科目群に割り当てられています。'\n                                            }\n                                        </Tooltip>\n                                    }\n                                >\n                                    {\n                                        currentRequirement === undefined ?\n                                            (<Badge variant=\"secondary\">?</Badge>) :\n                                            (<Badge variant=\"warning\">!</Badge>)\n                                    }\n                                </OverlayTrigger>\n                            ) :\n                            (<></>)\n                    }\n                    <Badge variant={status === RegistrationStatus.Acquired ? 'success' : status === RegistrationStatus.Registered ? 'primary' : 'secondary'}>\n                        {status === RegistrationStatus.Acquired ? '修得済み' : status === RegistrationStatus.Registered ? '履修する' : '履修しない'}\n                    </Badge>\n                    <div><span className=\"text-muted\">単位数</span> <strong>{course.creditCount}</strong></div>\n                </div>\n            </div>\n        </ListGroup.Item>\n    )\n};\n\nconst CourseList = ({ requirement, courses, plan, onCourseClick, lockTarget }: {\n    requirement: RequirementWithCourses,\n    courses: readonly Course[],\n    plan: Plan,\n    lockTarget: RegistrationStatusLockTarget\n    onCourseClick: (course: Course) => void,\n}) => (\n        <ListGroup>\n            {\n                courses.map((course: Course) => (\n                    <CourseListItem\n                        key={course.code}\n                        course={course} plan={plan}\n                        newRequirement={requirement}\n                        lockTarget={lockTarget}\n                        onClick={() => onCourseClick(course)}\n                    />\n                ))\n            }\n        </ListGroup>\n    );\n\nexport default CourseList;","import React, { useState } from 'react';\nimport { Accordion, Button, ButtonToolbar, Card, Col, Form } from 'react-bootstrap';\nimport Course from '../Course';\nimport FilterType from '../FilterType';\nimport Plan, { RegisteredCreditCounts, RegistrationStatus } from '../Plan';\nimport RegistrationStatusLockTarget from '../RegistrationStatusLockTarget';\nimport { RequirementWithCourses } from '../Requirements';\nimport CourseList from './CourseList';\nimport { RequirementSummaryView } from './RequirementSummaryView';\n\nconst OthersCountInput = ({ currentOthersCount, onReturn, onHide }: {\n    currentOthersCount: RegisteredCreditCounts,\n    onReturn: (newOthersCount: RegisteredCreditCounts) => void,\n    onHide: () => void,\n}) => {\n    const [acquired, setAcquired] = useState<number | undefined>();\n    const [registeredExcludingAcquired, setRegisteredExcludingAcquired] = useState<number | undefined>();\n    const [registeredIncludingAcquired, setRegisteredIncludingAcquired] = useState<number | undefined>();\n\n    const computed = {\n        acquired: acquired ?? currentOthersCount.acquired,\n        registered:\n            registeredIncludingAcquired !== undefined ?\n                registeredIncludingAcquired :\n                registeredExcludingAcquired !== undefined ?\n                    (acquired !== undefined ? acquired : currentOthersCount.acquired) + registeredExcludingAcquired :\n                    acquired !== undefined ?\n                        currentOthersCount.registered + acquired - currentOthersCount.acquired :\n                        currentOthersCount.registered,\n    }\n\n    return (\n        <Card border=\"primary\">\n            <Card.Header>単位数を入力</Card.Header>\n            <Card.Body>\n                <Form onSubmit={(e: React.FormEvent<HTMLFormElement>) => {\n                    e.preventDefault();\n                    onReturn(computed);\n                    onHide();\n                }}>\n                    <Form.Row>\n                        <Form.Group as={Col} md=\"4\">\n                            <Form.Label>修得済みの単位数 <span className=\"text-muted\">(a)</span></Form.Label>\n                            <Form.Control\n                                type=\"number\"\n                                min={0}\n                                step={0.5}\n                                placeholder={`${computed.acquired}`}\n                                value={acquired === undefined ? '' : `${acquired}`}\n                                onChange={\n                                    (e: React.ChangeEvent<HTMLInputElement>) =>\n                                        setAcquired(e.target.value === '' ? undefined : +e.target.value)\n                                }\n                                isInvalid={computed.acquired < 0}\n                            />\n                            <Form.Control.Feedback type=\"invalid\">(a) &gt;= 0</Form.Control.Feedback>\n                        </Form.Group>\n                        <Form.Group as={Col} md=\"4\">\n                            <Form.Label>履修する単位数 <span className=\"text-muted\">(b)</span></Form.Label>\n                            <Form.Control\n                                type=\"number\"\n                                min={0}\n                                step={0.5}\n                                placeholder={`${computed.registered - computed.acquired}`}\n                                value={registeredExcludingAcquired === undefined ? '' : `${registeredExcludingAcquired}`}\n                                onChange={\n                                    (e: React.ChangeEvent<HTMLInputElement>) => {\n                                        if (e.target.value === '') {\n                                            setRegisteredExcludingAcquired(undefined);\n                                        } else {\n                                            setRegisteredExcludingAcquired(+e.target.value);\n                                            setRegisteredIncludingAcquired(undefined);\n                                        }\n                                    }\n                                }\n                                isInvalid={computed.acquired > computed.registered}\n                            />\n                            <Form.Control.Feedback type=\"invalid\">(b) &gt;= 0</Form.Control.Feedback>\n                        </Form.Group>\n                        <Form.Group as={Col} md=\"4\">\n                            <Form.Label>計 <span className=\"text-muted\">(a) + (b)</span></Form.Label>\n                            <Form.Control\n                                type=\"number\"\n                                min={0}\n                                step={0.5}\n                                placeholder={`${computed.registered}`}\n                                value={registeredIncludingAcquired === undefined ? '' : `${registeredIncludingAcquired}`}\n                                onChange={\n                                    (e: React.ChangeEvent<HTMLInputElement>) => {\n                                        if (e.target.value === '') {\n                                            setRegisteredIncludingAcquired(undefined);\n                                        } else {\n                                            setRegisteredIncludingAcquired(+e.target.value);\n                                            setRegisteredExcludingAcquired(undefined);\n                                        }\n                                    }\n                                }\n                            />\n                        </Form.Group>\n                    </Form.Row>\n                    <ButtonToolbar>\n                        <Button\n                            type=\"submit\"\n                            disabled={computed.acquired < 0 || computed.acquired > computed.registered}\n                        >\n                            OK\n                        </Button>\n                        <Button variant=\"secondary\" onClick={onHide}>キャンセル</Button>\n                    </ButtonToolbar>\n                </Form>\n            </Card.Body>\n        </Card>\n    )\n}\n\nconst RequirementWithCoursesView = ({ requirement, filterType, lockTarget, plan, onCourseClick, onOthersCountsChange }: {\n    requirement: RequirementWithCourses,\n    filterType: FilterType,\n    lockTarget: RegistrationStatusLockTarget,\n    plan: Plan,\n    onCourseClick: (course: Course, requirement: RequirementWithCourses) => void,\n    onOthersCountsChange: (newOthersCount: RegisteredCreditCounts) => void,\n}) => {\n    const [isOpen, setIsOpen] = useState(false);\n    const [showsInput, setShowsInput] = useState(false);\n\n    const courses = requirement.courses.filter(course =>\n        filterType === FilterType.None ||\n        (plan.courseToStatus.has(course) && plan.courseToStatus.get(course) !== RegistrationStatus.Unregistered)\n    ).filter(course => filterType !== FilterType.Valid || requirement === plan.courseToRequirement.get(course));\n\n    return (\n        <>\n            <Accordion activeKey={isOpen ? '0' : ''}>\n                <div className={`bg-white ${isOpen ? 'sticky-top' : ''}`}>\n                    <RequirementSummaryView requirement={requirement} plan={plan} />\n                    {\n                        courses.length === 0 ?\n                            requirement.allowsOthers ? (\n                                showsInput ? (<></>) : (\n                                    <Button block className=\"mt-3\" variant=\"secondary\" onClick={() => setShowsInput(true)}>\n                                        単位数を入力\n                                    </Button>\n                                )\n                            ) : (\n                                    <Button block className=\"mt-3\" variant=\"outline-secondary\" disabled>\n                                        {filterType === FilterType.None ? '' : '履修する'}科目はありません\n                                    </Button>\n                                ) : (\n                                <Button\n                                    block className=\"mt-3\"\n                                    onClick={() => setIsOpen(!isOpen)}\n                                    variant={isOpen ? 'primary' : 'outline-secondary'}\n                                >\n                                    {filterType === FilterType.None ? '' : '履修する'}科目を{isOpen ? '非' : ''}表示\n                                </Button>\n                            )\n                    }\n                </div>\n                {\n                    showsInput ? (\n                        <div className=\"mt-3\">\n                            <OthersCountInput\n                                currentOthersCount={plan.requirementToOthersCount.get(requirement) || { acquired: 0, registered: 0 }}\n                                onReturn={onOthersCountsChange} onHide={() => setShowsInput(false)}\n                            />\n                        </div>\n                    ) : (<></>)\n                }\n                <Accordion.Collapse eventKey=\"0\">\n                    {\n                        courses.length === 0 ? (<></>) : (\n                            <div className=\"mt-3\">\n                                <CourseList\n                                    courses={courses} plan={plan}\n                                    requirement={requirement} lockTarget={lockTarget}\n                                    onCourseClick={course => onCourseClick(course, requirement)}\n                                />\n                            </div>\n                        )\n                    }\n                </Accordion.Collapse>\n            </Accordion>\n        </>\n    );\n}\n\nexport default RequirementWithCoursesView;","import React from 'react';\nimport { Dropdown } from 'react-bootstrap';\nimport Course from '../Course';\nimport FilterType from '../FilterType';\nimport Plan, { RegisteredCreditCounts } from '../Plan';\nimport RegistrationStatusLockTarget from '../RegistrationStatusLockTarget';\nimport { RequirementWithCourses, SelectionRequirement } from '../Requirements';\nimport InnerRequirementView from './InnerRequirementView';\n\nconst SelectionRequirementView = ({ requirement, filterType, lockTarget, plan, onCourseClick, onOthersCountsChange, onSelectionChange }: {\n    requirement: SelectionRequirement,\n    filterType: FilterType,\n    lockTarget: RegistrationStatusLockTarget,\n    plan: Plan,\n    onCourseClick: (course: Course, requirement: RequirementWithCourses) => void,\n    onOthersCountsChange: (requirement: RequirementWithCourses, newOthersCount: RegisteredCreditCounts) => void,\n    onSelectionChange: (selectionName: string, newOptionName: string) => void,\n}) => {\n    const selectedOptionName = requirement.getSelectedOptionName(plan.selectionNameToOptionName);\n    const selectedRequirement = requirement.getSelectedRequirement(plan.selectionNameToOptionName);\n\n    const handleOptionClick = (newOptionName: string) => {\n        if (selectedOptionName !== newOptionName) {\n            onSelectionChange(requirement.name, newOptionName);\n        }\n    };\n\n    return (\n        <>\n            <Dropdown>\n                <Dropdown.Toggle id=\"\" variant=\"secondary\" disabled={filterType === FilterType.Valid}>\n                    <span\n                        style={{\n                            overflow: 'hidden',\n                            textOverflow: 'ellipsis',\n                        }}\n                    >\n                        {requirement.name}\n                        <> : </>\n                        <strong>{selectedOptionName}</strong>\n                    </span>\n                </Dropdown.Toggle>\n\n                <Dropdown.Menu style={{ zIndex: 1100 }}>\n                    {\n                        requirement.options.map(option => (\n                            <Dropdown.Item key={option.name}\n                                active={option.name === selectedOptionName}\n                                onClick={() => handleOptionClick(option.name)}\n                            >\n                                {option.name}\n                            </Dropdown.Item>\n                        ))\n                    }\n                </Dropdown.Menu>\n            </Dropdown>\n            {\n                selectedRequirement === undefined ? (<></>) : (\n                    <div className=\"mt-3\">\n                        <InnerRequirementView\n                            requirement={selectedRequirement} plan={plan}\n                            filterType={filterType} lockTarget={lockTarget}\n                            onCourseClick={onCourseClick} onOthersCountsChange={onOthersCountsChange}\n                            onSelectionChange={onSelectionChange}\n                        />\n                    </div>\n                )\n            }\n        </>\n    );\n}\n\nexport default SelectionRequirementView;","import React from 'react';\nimport Course from \"../Course\";\nimport FilterType from '../FilterType';\nimport Plan, { RegisteredCreditCounts } from '../Plan';\nimport RegistrationStatusLockTarget from '../RegistrationStatusLockTarget';\nimport Requirements, { RequirementWithChildren, RequirementWithCourses } from \"../Requirements\";\nimport RequirementWithChildrenView from './RequirementWithChildrenView';\nimport RequirementWithCoursesView from './RequirementWithCoursesView';\nimport SelectionRequirementView from './SelectionRequirementView';\n\nconst InnerRequirementView = ({ requirement, filterType, lockTarget, plan, onCourseClick, onOthersCountsChange, onSelectionChange }: {\n    requirement: Requirements,\n    filterType: FilterType,\n    lockTarget: RegistrationStatusLockTarget,\n    plan: Plan,\n    onCourseClick: (course: Course, requirement: RequirementWithCourses) => void,\n    onOthersCountsChange: (requirement: RequirementWithCourses, newOthersCount: RegisteredCreditCounts) => void,\n    onSelectionChange: (selectionName: string, newOptionName: string) => void,\n}) => {\n    if (requirement instanceof RequirementWithChildren) {\n        return (\n            <RequirementWithChildrenView\n                requirement={requirement} plan={plan}\n                filterType={filterType} lockTarget={lockTarget}\n                onCourseClick={onCourseClick} onOthersCountsChange={onOthersCountsChange} onSelectionChange={onSelectionChange}\n            />\n        )\n    } else if (requirement instanceof RequirementWithCourses) {\n        return (\n            <RequirementWithCoursesView\n                requirement={requirement} plan={plan}\n                filterType={filterType} lockTarget={lockTarget}\n                onCourseClick={onCourseClick}\n                onOthersCountsChange={creditsCounts => onOthersCountsChange(requirement, creditsCounts)}\n            />\n        )\n    } else {\n        return (\n            <SelectionRequirementView\n                requirement={requirement} plan={plan}\n                filterType={filterType} lockTarget={lockTarget}\n                onCourseClick={onCourseClick} onOthersCountsChange={onOthersCountsChange} onSelectionChange={onSelectionChange}\n            />\n        );\n    }\n}\n\nexport default InnerRequirementView;\n","import React from 'react';\nimport Course from '../Course';\nimport FilterType from '../FilterType';\nimport getValueFromModal, { useModals } from '../getValueFromModal';\nimport Plan, { RegisteredCreditCounts, RegistrationStatus } from '../Plan';\nimport RegistrationStatusLockTarget from '../RegistrationStatusLockTarget';\nimport Requirements, { RequirementWithCourses } from '../Requirements';\nimport CourseMovementConfirmationModal from './CourseMovementConfirmationModal';\nimport getNextStatus from './getNextStatus';\nimport InnerRequirementView from './InnerRequirementView';\n\nconst RequirementView = ({ requirement, plan, filterType, lockTarget, onChange }: {\n    requirement: Requirements,\n    filterType: FilterType,\n    lockTarget: RegistrationStatusLockTarget,\n    plan: Plan,\n    onChange: (newPlan: Plan) => void,\n}) => {\n    const { courseToStatus, courseToRequirement, requirementToOthersCount, selectionNameToOptionName } = plan;\n    const { modals, setModalsAndCount } = useModals();\n\n    const handleCourseClick = async (course: Course, requirement: RequirementWithCourses) => {\n        const currentStatus: RegistrationStatus = courseToStatus.get(course) || RegistrationStatus.Unregistered;\n        const currentRequirement = courseToRequirement.get(course);\n        let nextCourseToStatus = courseToStatus;\n        if (currentStatus === RegistrationStatus.Unregistered || currentRequirement === requirement) {\n            const nextStatus = getNextStatus({ currentStatus, lockTarget });\n            nextCourseToStatus = new Map([...courseToStatus, [course, nextStatus]]);\n        } else if (\n            currentRequirement !== undefined &&\n            !await getValueFromModal(\n                CourseMovementConfirmationModal,\n                { currentRequirement, plan },\n                setModalsAndCount\n            )\n        ) {\n            return;\n        }\n        onChange({\n            ...plan,\n            courseToStatus: nextCourseToStatus,\n            courseToRequirement: new Map([...courseToRequirement, [course, requirement]]),\n        });\n    }\n\n    const handleOthersCountsChange = (requirement: RequirementWithCourses, newOthersCount: RegisteredCreditCounts) => {\n        onChange({\n            ...plan,\n            requirementToOthersCount: new Map([\n                ...requirementToOthersCount,\n                [requirement, newOthersCount]\n            ]),\n        });\n    }\n\n    const handleSelectionChange = (selectionName: string, newOptionName: string) => {\n        const nextSelectionNameToOptionName = new Map([...selectionNameToOptionName, [selectionName, newOptionName]]);\n        const visibleRequirements = requirement.getVisibleRequirements(nextSelectionNameToOptionName);\n        const nextCourseToRequirement = new Map([...courseToRequirement.entries()].filter(\n            ([_, requirement]) => visibleRequirements.includes(requirement)\n        ));\n        onChange({\n            ...plan,\n            courseToRequirement: nextCourseToRequirement,\n            selectionNameToOptionName: nextSelectionNameToOptionName,\n        });\n    }\n\n    return (\n        <>\n            {modals}\n            <InnerRequirementView\n                requirement={requirement} plan={plan}\n                filterType={filterType} lockTarget={lockTarget}\n                onCourseClick={handleCourseClick} onOthersCountsChange={handleOthersCountsChange}\n                onSelectionChange={handleSelectionChange}\n            />\n        </>\n    );\n}\n\nexport default RequirementView;","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React, { useState } from 'react';\nimport { Accordion, Alert, Container, Dropdown, Form, Navbar } from 'react-bootstrap';\nimport { HashRouter, Link, Redirect, Route, Switch, useParams } from 'react-router-dom';\nimport { useLocalStorage } from 'react-use';\nimport './App.css';\nimport AssignmentsFindView from './AssignmentsFindView';\nimport CollectivelyCourseSetView from './CollectivelyCourseSetView';\nimport codeToCourse from './courses';\nimport ExportView from './ExportView';\nimport FilterType from './FilterType';\nimport ImportView from './ImportView';\nimport Plan, { emptyPlan, fromJSON, PlanJSON, toJSON } from './Plan';\nimport RegistrationStatusLockTarget from './RegistrationStatusLockTarget';\nimport requirementAndDictionaryPairs from './requirementInstances';\nimport Requirements, { RequirementWithCourses } from './Requirements';\nimport RequirementView from './RequirementView';\n\nconst RequirementWithConfiguration: React.FC<{\n    requirement: Requirements,\n    nameToRequirement: ReadonlyMap<string, RequirementWithCourses>,\n    plan: Plan,\n    setPlan: (nextPlan: Plan) => void,\n}> = ({ requirement, nameToRequirement, plan, setPlan }) => {\n    const [filterType, setFilterType] = useState(FilterType.None);\n    const { lockTarget, setLockTarget } = useLockTarget(filterType);\n\n    return (\n        <>\n            <Accordion className=\"mb-3\">\n                <ExportView eventKey=\"0\" plan={plan} />\n                <ImportView\n                    eventKey=\"1\"\n                    onSubmit={setPlan}\n                    codeToCourse={codeToCourse}\n                    idToRequirement={nameToRequirement}\n                />\n            </Accordion>\n            <div className=\"mb-3\">\n                <CollectivelyCourseSetView\n                    codeToCourse={codeToCourse}\n                    onSubmit={courseToStatus => setPlan({ ...plan, courseToStatus })}\n                />\n            </div>\n            <div className=\"mb-3\">\n                <AssignmentsFindView\n                    requirement={requirement}\n                    idToRequirement={nameToRequirement}\n                    codeToCourse={codeToCourse}\n                    plan={plan}\n                    onSubmit={setPlan}\n                />\n            </div>\n            <Form.Group>\n                <Form.Label>履修状態のロック</Form.Label>\n                {\n                    [\n                        {\n                            label: \"ロックしない\",\n                            lockTarget: RegistrationStatusLockTarget.None,\n                            disabled: filterType !== FilterType.None,\n                        },\n                        {\n                            label: \"[履修する] と [修得済み] の間の変更のみ許可\",\n                            lockTarget: RegistrationStatusLockTarget.Unregistered,\n                        },\n                        {\n                            label: \"[履修しない] と [履修する] の間の変更のみ許可\",\n                            lockTarget: RegistrationStatusLockTarget.Acquired,\n                            disabled: filterType !== FilterType.None,\n                        },\n                        {\n                            label: \"すべてロックする\",\n                            lockTarget: RegistrationStatusLockTarget.All,\n                        },\n                    ].map(({ label, disabled, lockTarget: lockTarget1 }) => (\n                        <Form.Check\n                            custom type=\"radio\"\n                            id={`lockTargetCheck${lockTarget1}`}\n                            label={label} key={lockTarget1}\n                            disabled={disabled}\n                            checked={lockTarget === lockTarget1}\n                            onChange={() => setLockTarget(lockTarget1)}\n                        />\n                    ))\n                }\n            </Form.Group>\n            <Form.Group>\n                <Form.Check\n                    custom\n                    id=\"filterTypeCheck0\"\n                    label=\"履修する科目のみ表示する\"\n                    checked={filterType !== FilterType.None}\n                    onChange={\n                        () => {\n                            if (filterType === FilterType.None) {\n                                setFilterType(FilterType.Registered);\n                            } else {\n                                setFilterType(FilterType.None);\n                            }\n                        }\n                    }\n                />\n                <Form.Check\n                    custom\n                    id=\"filterTypeCheck1\"\n                    label=\"単位数の計算に含まれる科目のみ表示する\"\n                    checked={filterType === FilterType.Valid}\n                    onChange={\n                        () => {\n                            if (filterType === FilterType.Valid) {\n                                setFilterType(FilterType.Registered);\n                            } else {\n                                setFilterType(FilterType.Valid);\n                            }\n                        }\n                    }\n                />\n            </Form.Group>\n            <hr />\n            <div className=\"mb-3\">\n                <RequirementView\n                    requirement={requirement}\n                    lockTarget={lockTarget} filterType={filterType}\n                    plan={plan} onChange={setPlan}\n                />\n            </div>\n        </>\n    );\n}\n\nconst InnerMain: React.FC<{ selectedId: string }> = ({ selectedId }) => {\n    const { plan, setPlan } = usePlan(selectedId);\n\n    const {\n        requirement,\n        idToRequirement: nameToRequirement,\n        name: selectedName,\n    } = requirementAndDictionaryPairs.get(selectedId) ?? {};\n    if (requirement === undefined || nameToRequirement === undefined || selectedName === undefined) {\n        return (<Redirect to=\"/\" />);\n    }\n\n    return (\n        <>\n            <Alert variant=\"danger\" className=\"my-3\">\n                このツールの結果を利用する場合、必ず履修要覧や支援室などでその結果が正しいことを確認するようにしてください。\n                <strong>科目や要件の定義が誤っていることや、実際には認められない履修の組み合わせが存在することがあります。</strong>\n            </Alert>\n            <Dropdown className=\"mb-3\">\n                <Dropdown.Toggle id=\"department-dropdown\" variant=\"secondary\">\n                    <span\n                        style={{\n                            overflow: 'hidden',\n                            textOverflow: 'ellipsis',\n                        }}\n                    >\n                        学類\n                    <> : </>\n                        <strong>{selectedName}</strong>\n                    </span>\n                </Dropdown.Toggle>\n                <Dropdown.Menu>\n                    {\n                        [...requirementAndDictionaryPairs.values()].map(\n                            ({ id, name }) => (\n                                <Dropdown.Item as={Link} to={`/${id}`} active={id === selectedId} key={id}>\n                                    {name}\n                                </Dropdown.Item>\n                            )\n                        )\n                    }\n                </Dropdown.Menu>\n            </Dropdown>\n            <RequirementWithConfiguration requirement={requirement} nameToRequirement={nameToRequirement} plan={plan} setPlan={setPlan} />\n        </>\n    );\n}\n\nconst Main: React.FC = () => {\n    const { requirementId } = useParams();\n    if (requirementId === undefined) {\n        return (<Redirect to=\"/\" />);\n    } else {\n        return (<InnerMain selectedId={requirementId} />);\n    }\n}\n\nconst App: React.FC = () => (\n    <HashRouter>\n        <Navbar variant=\"dark\" bg=\"dark\">\n            <Navbar.Brand>卒業要件を満たしたい</Navbar.Brand>\n        </Navbar>\n        <Container>\n            <Switch>\n                <Route path=\"/:requirementId\">\n                    <Main />\n                </Route>\n                <Route path=\"/\">\n                    <Redirect to=\"/coins17\" />\n                </Route>\n            </Switch>\n        </Container>\n    </HashRouter>\n);\n\nconst useLockTarget = (filterType: FilterType) => {\n    const [lockTarget, setLockTarget] = useState(RegistrationStatusLockTarget.None);\n\n    if (filterType === FilterType.None) {\n        return { lockTarget, setLockTarget };\n    } else if (lockTarget === RegistrationStatusLockTarget.None) {\n        return {\n            lockTarget: RegistrationStatusLockTarget.Unregistered,\n            setLockTarget,\n        };\n    } else if (lockTarget === RegistrationStatusLockTarget.Acquired) {\n        return {\n            lockTarget: RegistrationStatusLockTarget.All,\n            setLockTarget,\n        };\n    } else {\n        return { lockTarget, setLockTarget };\n    }\n}\n\nconst COURSES_STATE = \"courses-state\"\n\nconst usePlanMap = () => {\n    const [storedJSON, setStoredJSON] = useLocalStorage<readonly (readonly [string, PlanJSON])[]>(COURSES_STATE);\n    const [planMap0, setPlanMap0] = useState(() => {\n        try {\n            const storedPlanEntries = storedJSON.map(([requirementName, planJSON]) => {\n                const nameToRequirement = requirementAndDictionaryPairs.get(requirementName)?.idToRequirement;\n                if (nameToRequirement === undefined) {\n                    return undefined;\n                } else {\n                    try {\n                        return [requirementName, fromJSON(planJSON, { codeToCourse, idToRequirement: nameToRequirement })] as const;\n                    } catch {\n                        return undefined;\n                    }\n                }\n            }).filter((value): value is NonNullable<typeof value> => value !== undefined);\n            const storedPlanMap: ReadonlyMap<string, Plan> = new Map(storedPlanEntries);\n            return storedPlanMap;\n        } catch {\n            const storedPlanMap: ReadonlyMap<string, Plan> = new Map();\n            return storedPlanMap;\n        }\n    });\n    const setPlanMap = (newPlanMap: ReadonlyMap<string, Plan>) => {\n        const planJSONEntries = [...newPlanMap].map(([requirementName, plan]) => [requirementName, toJSON(plan)] as const);\n        setPlanMap0(newPlanMap);\n        setStoredJSON(planJSONEntries);\n    };\n    return {\n        planMap: planMap0,\n        setPlanMap,\n    };\n}\n\nconst usePlan = (requirementName: string) => {\n    const { planMap, setPlanMap } = usePlanMap();\n\n    const plan = planMap.get(requirementName) || emptyPlan;\n    const setPlan = (newPlan: Plan) => {\n        const newPlanMap = new Map([\n            ...planMap,\n            [requirementName, newPlan]\n        ]);\n        setPlanMap(newPlanMap);\n    };\n\n    return { plan, setPlan };\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'react-app-polyfill/stable';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}