{"version":3,"sources":["RegistrationStatus.ts","getValueFromModal.tsx","CollectivelyCourseSetView.tsx","courses/index.ts","FilterType.ts","Plan.ts","ExportView.tsx","RegistrationStatusLockTarget.ts","ImportView.tsx","Requirements.ts","requirements/index.ts","RequirementSelector.tsx","RequirementSummaryView.tsx","CourseMovementConfirmationModal.tsx","getNextStatus.ts","RequirementWithChildrenView.tsx","CourseList.tsx","RequirementWithCoursesView.tsx","SelectionRequirementView.tsx","RequirementView.tsx","RequirementsRootView.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["RegistrationStatus","initialModalsAndCount","modals","count","useModals","useState","modalsAndCount","setModalsAndCount","getValueFromModal","ModalType","props","a","async","Promise","resolve","reject","modal","onReturn","value","onExited","filter","key","e","placeholder","join","CollectivelyCourseSetConfirmationModal","show","setShow","Modal","onHide","Header","closeButton","Title","Body","Footer","Button","variant","onClick","CodesInput","label","codeToCourse","onChange","setValue","coursesCount","setCoursesCount","undefinedCodes","setUndefinedCodes","Form","Group","as","Col","Label","Control","className","rows","nextValue","target","codes","split","map","line","trim","courses","Set","code","get","course","undefined","nextUndefinedCodes","has","size","Text","length","reduce","previous","current","CollectivelyCourseSetView","eventKey","onSubmit","registeredCourses","setRegisteredCourses","acquiredCourses","setAcquiredCourses","toggle","useAccordionToggle","coursesOfIntersection","intersection","Card","Accordion","Toggle","Collapse","preventDefault","Map","Registered","Acquired","Row","Alert","title","type","set","FilterType","toJSON","courseToStatus","courseToRequirement","requirementToOthersCount","selectionNameToOptionName","status","requirement","name","creditsCounts","fromJSON","json","nameToRequirement","Error","courseCode","requirementName","emptyPlan","ExportView","plan","readOnly","JSON","stringify","onFocus","select","RegistrationStatusLockTarget","ImportConfirmationModal","ImportView","jsonString","setJSONString","nextPlan","parse","isInvalid","Feedback","disabled","Requirement","requiredCreditsCount","this","getRequiredCreditsCount","registeredCreditsCounts","getRegisteredCreditsCount","acquired","min","registered","Unregistered","RequirementWithChildren","description","children","creditsCount","includesExcess","child","childRegisteredCreditsCount","Math","max","childRequiredCreditsCount","getStatus","RequirementWithCourses","allowsOthers","othersCount","courseStatus","SelectionRequirement","selectionName","options0","options","optionNameToRequirement","selectedOptionName","getSelectedOptionName","selectedRequirement","getSelectedRequirement","numberOrRangeToRange","numberOrRange","obj","isCompatible","$object","$number","getRequirementAndDictionaryFromJSON","selectionNameToCount","dictionary","requirementAndDictionaryArray","flatMap","entries","selectionCount","optionAndDictionaryArray","optionJSON","option","requirementAndDictionaryMap","coins17_0","mast17_0","klis17_0","defaultSelected","RequirementSelector","newRequirementName","CreditsCountLabelDelimiter","ExceededCreditsCountLabel","CreditsCountLabels","exceededCreditsCount","RequirementSummaryView","Badge","CourseMovementConfirmationModal","currentRequirement","body","getNextStatus","currentStatus","lockTarget","All","RequirementWithChildrenView","filterType","onCourseClick","onOthersCountsChange","onSelectionChange","ListGroup","Item","CourseListItem","newRequirement","isRegisteredButInvalid","some","course1","isRegistrable","action","CourseList","OthersCountInput","currentOthersCount","setAcquired","registeredExcludingAcquired","setRegisteredExcludingAcquired","registeredIncludingAcquired","setRegisteredIncludingAcquired","computed","border","md","ButtonToolbar","RequirementWithCoursesView","isOpen","setIsOpen","showsInput","setShowsInput","None","Valid","activeKey","block","SelectionRequirementView","Dropdown","id","style","overflow","textOverflow","Menu","zIndex","active","newOptionName","RequirementView","RequirementsRootView","clearCourseToRequirementInSelection","newCourseToRequirement","clearCourseToRequirement","delete","nextCourseToStatus","nextStatus","newOthersCount","useLockTarget","setLockTarget","usePlan","useLocalStorage","storedJSON","setStoredJSON","storedPlanEntries","planJSON","requirementAndDictionary","planMap0","setPlanMap0","planMap","setPlanMap","newPlanMap","planJSONEntries","usePlanMap","setPlan","newPlan","App","selected","setSelected","setFilterType","Navbar","bg","Brand","Container","lockTarget1","Check","custom","checked","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bd25f37a.chunk.js","sourcesContent":["enum RegistrationStatus {\n    Unregistered = 0,\n    Registered = 1,\n    Acquired = 2,\n}\n\nexport default RegistrationStatus;","import React, { useState } from 'react';\n\nconst getValueFromModal = async <T, P>(\n    ModalType: React.ComponentType<{\n        onReturn: (value: T) => void,\n        onExited: () => void,\n    } & P>,\n    props: P,\n    setModalsAndCount: React.Dispatch<React.SetStateAction<ModalsAndCount>>,\n): Promise<T> => new Promise((resolve, reject) => {\n    try {\n        setModalsAndCount(({ modals, count }) => {\n            const modal = (\n                <ModalType\n                    {...props}\n                    onReturn={value => resolve(value)}\n                    onExited={() => setModalsAndCount(\n                        ({ modals, count }) => ({\n                            modals: modals.filter(value => value !== modal),\n                            count,\n                        })\n                    )}\n                    key={count}\n                />\n            );\n            return ({\n                modals: [...modals, modal],\n                count: count + 1,\n            })\n        });\n    } catch (e) {\n        reject(e);\n    }\n});\n\nexport interface ModalsAndCount {\n    readonly modals: readonly JSX.Element[];\n    readonly count: number;\n}\n\nconst initialModalsAndCount: ModalsAndCount = {\n    modals: [],\n    count: 0,\n};\n\nexport const useModals = () => {\n    const [modalsAndCount, setModalsAndCount] = useState(initialModalsAndCount);\n    return {\n        modals: modalsAndCount.modals,\n        setModalsAndCount,\n    };\n};\n\nexport default getValueFromModal;","import { intersection } from 'lodash';\nimport React, { useState } from 'react';\nimport { Accordion, Button, Card, Col, Form, Modal, useAccordionToggle, Alert } from \"react-bootstrap\";\nimport Course from './Course';\nimport getValueFromModal, { useModals } from './getValueFromModal';\nimport RegistrationStatus from './RegistrationStatus';\n\nconst placeholder = ['GB10615', 'GB10664'].join('\\n');\n\nconst CollectivelyCourseSetConfirmationModal = ({ onReturn, onExited }: {\n    onReturn: (value: boolean) => void,\n    onExited: () => void\n}) => {\n    const [show, setShow] = useState(true);\n\n    return (\n        <Modal show={show} onHide={() => { setShow(false); onReturn(false); }} onExited={onExited}>\n            <Modal.Header closeButton>\n                <Modal.Title>科目の履修 / 修得状態をまとめて設定</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                続けると、現在の設定状態のうち、<strong>科目の履修 / 修得に関するものが失われます</strong>。\n                よろしいですか？\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={() => { setShow(false); onReturn(false); }}>いいえ</Button>\n                <Button variant=\"danger\" onClick={() => { setShow(false); onReturn(true); }}>はい</Button>\n            </Modal.Footer>\n        </Modal>\n    );\n}\n\nconst CodesInput = ({ label, codeToCourse, onChange }: {\n    label: string,\n    codeToCourse: ReadonlyMap<string, Course>,\n    onChange: (courses: ReadonlySet<Course>) => void,\n}) => {\n    const [value, setValue] = useState(\"\");\n    const [coursesCount, setCoursesCount] = useState(0);\n    const [undefinedCodes, setUndefinedCodes] = useState<string[]>([]);\n\n    const handleChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n        const nextValue = e.target.value;\n        const codes = nextValue.split('\\n').map(line => line.trim()).filter(line => line !== '');\n        const courses = new Set(\n            codes.map(code => codeToCourse.get(code))\n                .filter((course): course is NonNullable<typeof course> => course !== undefined)\n        );\n        const nextUndefinedCodes = [...new Set(codes.filter(code => !codeToCourse.has(code)))];\n        setValue(nextValue);\n        setCoursesCount(courses.size);\n        setUndefinedCodes(nextUndefinedCodes);\n        onChange(courses);\n    }\n\n    return (\n        <Form.Group as={Col}>\n            <Form.Label>{label}</Form.Label>\n            <Form.Control\n                as=\"textarea\" className=\"input-monospace\" rows={5}\n                placeholder={placeholder} value={value} onChange={handleChange}\n            />\n            <Form.Text>\n                {coursesCount}個の科目\n            </Form.Text>\n            {\n                undefinedCodes.length === 0 ? <></> : (\n                    <Form.Text>\n                        次の科目は見つかりません\n                        <> : </>\n                        {\n                            undefinedCodes\n                                .map<React.ReactNode>(code => (<code key={code}>{code}</code>))\n                                .reduce((previous, current) => [previous, ', ', current])\n                        }\n                    </Form.Text>\n                )\n            }\n        </Form.Group>\n    );\n}\n\nconst CollectivelyCourseSetView = ({ eventKey, codeToCourse, onSubmit }: {\n    eventKey: string,\n    codeToCourse: ReadonlyMap<string, Course>,\n    onSubmit: (courseToStatus: ReadonlyMap<Course, RegistrationStatus.Acquired | RegistrationStatus.Registered>) => void,\n}) => {\n    const [registeredCourses, setRegisteredCourses] = useState<ReadonlySet<Course>>(new Set());\n    const [acquiredCourses, setAcquiredCourses] = useState<ReadonlySet<Course>>(new Set<Course>());\n    const toggle = useAccordionToggle(eventKey, () => { });\n    const { modals, setModalsAndCount } = useModals();\n\n    const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        if (!await getValueFromModal(CollectivelyCourseSetConfirmationModal, {}, setModalsAndCount)) {\n            return;\n        }\n        onSubmit(new Map([\n            ...[...registeredCourses].map(course => [course, RegistrationStatus.Registered] as const),\n            ...[...acquiredCourses].map(course => [course, RegistrationStatus.Acquired] as const),\n        ]));\n        toggle();\n    }\n\n    const coursesOfIntersection = intersection([...registeredCourses], [...acquiredCourses]);\n\n    return (\n        <>\n            {modals}\n            <Card>\n                <Card.Header>\n                    <Accordion.Toggle eventKey={eventKey} variant=\"link\" as={Button}>\n                        科目の履修 / 修得状態をまとめて設定\n                    </Accordion.Toggle>\n                </Card.Header>\n                <Accordion.Collapse eventKey={eventKey}>\n                    <Card.Body>\n                        <p>\n                            <strong>[科目の履修状態のロック] と組み合わせる</strong>と、\n                            実際には履修していない科目を<strong>誤って [履修済み] / [修得済み] にすることを防げます</strong>。\n                            なお、 \"卒業要件を満たしているかどうか\" を自動で判定することはできません。\n                        </p>\n                        <p>[OK] を押すと、現在の設定状態のうち、<strong>科目の履修 / 修得に関するものが失われます</strong>。</p>\n                        <Form onSubmit={handleSubmit}>\n                            <Form.Row>\n                                <CodesInput label=\"履修する科目\" codeToCourse={codeToCourse} onChange={setRegisteredCourses} />\n                                <CodesInput label=\"修得済みの科目\" codeToCourse={codeToCourse} onChange={setAcquiredCourses} />\n                            </Form.Row>\n                            {\n                                coursesOfIntersection.length === 0 ? (<></>) : (\n                                    <Alert variant=\"warning\">\n                                        <p>\n                                            次の科目は [履修する科目] と [修得済みの科目] の両方に入力されています。\n                                            このまま [OK] を押すと、<strong>修得済みの科目として設定されます</strong>。\n                                        </p>\n                                        <ul className=\"mb-0\">\n                                            {\n                                                coursesOfIntersection.map(course => (\n                                                    <li key={course.code}>\n                                                        <code>{course.code}</code>\n                                                        <> : </>\n                                                        {course.title}\n                                                    </li>\n                                                ))\n                                            }\n                                        </ul>\n                                    </Alert>\n                                )\n                            }\n                            <Button type=\"submit\">OK</Button>\n                        </Form>\n                    </Card.Body>\n                </Accordion.Collapse>\n            </Card>\n        </>\n    )\n};\n\nexport default CollectivelyCourseSetView;","import Course from '../Course';\nimport courses from './courses1.json';\n\nconst codeToCourse = new Map<string, Course>();\n\nfor (const course of courses) {\n    codeToCourse.set(course.code, course);\n}\n\nexport default codeToCourse;","enum FilterType {\n    None,\n    Registered,\n    Valid,\n}\n\nexport default FilterType;","import Course from \"./Course\";\nimport RegistrationStatus from \"./RegistrationStatus\";\nimport { RegisteredCreditsCounts, RequirementWithCourses } from \"./Requirements\";\n\nexport type CourseCode = string;\nexport type RequirementName = string;\n\nexport interface PlanJSON {\n    readonly courseToStatus: readonly [CourseCode, RegistrationStatus][];\n    readonly courseToRequirement: readonly [CourseCode, RequirementName][];\n    readonly requirementToOthersCount: readonly [RequirementName, RegisteredCreditsCounts][];\n    readonly selectionNameToOptionName: readonly [string, string][];\n}\n\nexport default interface Plan {\n    readonly courseToStatus: ReadonlyMap<Course, RegistrationStatus>;\n    readonly courseToRequirement: ReadonlyMap<Course, RequirementWithCourses>;\n    readonly requirementToOthersCount: ReadonlyMap<RequirementWithCourses, RegisteredCreditsCounts>;\n    readonly selectionNameToOptionName: ReadonlyMap<string, string>;\n}\n\nexport const toJSON =\n    ({ courseToStatus, courseToRequirement, requirementToOthersCount, selectionNameToOptionName }: Plan): PlanJSON => ({\n        courseToStatus: [...courseToStatus].map(([course, status]) => [course.code, status]),\n        courseToRequirement: [...courseToRequirement].map(([course, requirement]) => [course.code, requirement.name]),\n        requirementToOthersCount: [...requirementToOthersCount].map(([requirement, creditsCounts]) => [requirement.name, creditsCounts]),\n        selectionNameToOptionName: [...selectionNameToOptionName],\n    });\n\nexport const fromJSON = (json: PlanJSON, { codeToCourse, nameToRequirement }: {\n    codeToCourse: ReadonlyMap<CourseCode, Course>,\n    nameToRequirement: ReadonlyMap<RequirementName, RequirementWithCourses>,\n}): Plan => {\n    const courseToStatus = new Map([...json.courseToStatus].map(([code, status]) => {\n        const course = codeToCourse.get(code);\n        if (course === undefined) { throw new Error(); }\n        return [course, status];\n    }));\n\n    const courseToRequirement = new Map([...json.courseToRequirement].map(([courseCode, requirementName]) => {\n        const course = codeToCourse.get(courseCode);\n        const requirement = nameToRequirement.get(requirementName);\n\n        if (course === undefined) { throw new Error(); }\n        if (requirement === undefined) { throw new Error(); }\n\n        return [course, requirement];\n    }));\n\n    const requirementToOthersCount = new Map([...json.requirementToOthersCount].map(([requirementName, creditsCounts]) => {\n        const requirement = nameToRequirement.get(requirementName);\n        if (requirement === undefined) { throw new Error(); }\n        return [requirement, creditsCounts];\n    }));\n\n    const selectionNameToOptionName = new Map(json.selectionNameToOptionName);\n\n    return { courseToStatus, courseToRequirement, requirementToOthersCount, selectionNameToOptionName }\n}\n\nexport const emptyPlan: Plan = {\n    courseToStatus: new Map(),\n    courseToRequirement: new Map(),\n    requirementToOthersCount: new Map(),\n    selectionNameToOptionName: new Map(),\n};","import React from 'react';\nimport { Accordion, Button, Card, Form } from \"react-bootstrap\";\nimport Plan, { toJSON } from \"./Plan\";\n\nconst ExportView = ({ plan, eventKey }: {\n    plan: Plan,\n    eventKey: string,\n}) => (\n        <Card>\n            <Card.Header>\n                <Accordion.Toggle eventKey={eventKey} variant=\"link\" as={Button}>\n                    エクスポート\n                </Accordion.Toggle>\n            </Card.Header>\n            <Accordion.Collapse eventKey={eventKey}>\n                <Card.Body>\n                    <p>テキストボックスの内容をコピーして、テキストファイルなどに保存します。</p>\n                    <Form>\n                        <Form.Group className=\"mb-0\">\n                            <Form.Label>JSON</Form.Label>\n                            <Form.Control\n                                readOnly className=\"input-monospace\"\n                                value={JSON.stringify(toJSON(plan))}\n                                onFocus={(e: React.FocusEvent<HTMLInputElement>) => e.target.select()}\n                            />\n                        </Form.Group>\n                    </Form>\n                </Card.Body>\n            </Accordion.Collapse>\n        </Card>\n    );\n\nexport default ExportView","enum RegistrationStatusLockTarget {\n    Unregistered = 0,\n    Acquired = 2,\n    All = 3,\n    None = 4,\n}\n\nexport default RegistrationStatusLockTarget;","import React, { useState } from 'react';\nimport { Accordion, Button, Card, Form, Modal, useAccordionToggle } from \"react-bootstrap\";\nimport Course from \"./Course\";\nimport getValueFromModal, { useModals } from './getValueFromModal';\nimport Plan, { emptyPlan, fromJSON, toJSON } from \"./Plan\";\nimport { RequirementWithCourses } from \"./Requirements\";\n\nconst ImportConfirmationModal = ({ onReturn, onExited }: {\n    onReturn: (value: boolean) => void,\n    onExited: () => void\n}) => {\n    const [show, setShow] = useState(true);\n\n    return (\n        <Modal show={show} onHide={() => { setShow(false); onReturn(false); }} onExited={onExited}>\n            <Modal.Header closeButton>\n                <Modal.Title>インポート</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                インポートすると現在の設定状態は失われますが、よろしいですか？\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={() => { setShow(false); onReturn(false); }}>いいえ</Button>\n                <Button variant=\"danger\" onClick={() => { setShow(false); onReturn(true); }}>はい</Button>\n            </Modal.Footer>\n        </Modal>\n    );\n}\n\nconst ImportView = ({ eventKey, codeToCourse, nameToRequirement, onSubmit }: {\n    eventKey: string,\n    codeToCourse: ReadonlyMap<string, Course>,\n    nameToRequirement: ReadonlyMap<string, RequirementWithCourses>,\n    onSubmit: (nextPlan: Plan) => void,\n}) => {\n    const [jsonString, setJSONString] = useState(\"\");\n    const toggle = useAccordionToggle(eventKey, () => { });\n    const { modals, setModalsAndCount } = useModals();\n\n    const nextPlan = (() => {\n        try {\n            return fromJSON(\n                JSON.parse(jsonString),\n                { codeToCourse, nameToRequirement }\n            );\n        } catch {\n            return undefined;\n        }\n    })();\n    const isInvalid = nextPlan === undefined;\n\n    const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        if (\n            nextPlan === undefined ||\n            !await getValueFromModal(ImportConfirmationModal, {}, setModalsAndCount)\n        ) {\n            return;\n        }\n        onSubmit(nextPlan);\n        toggle();\n    };\n\n    return (\n        <>\n            {modals}\n            <Card>\n                <Card.Header>\n                    <Accordion.Toggle eventKey={eventKey} variant=\"link\" as={Button}>\n                        インポート\n                    </Accordion.Toggle>\n                </Card.Header>\n                <Accordion.Collapse eventKey={eventKey}>\n                    <Card.Body>\n                        <p>\n                            テキストボックスに保存したテキストを貼り付けてから、 [インポート] ボタンを押します。\n                            <strong>インポートすると現在の設定状態は失われます。</strong>\n                        </p>\n                        <Form onSubmit={handleSubmit}>\n                            <Form.Group>\n                                <Form.Label>JSON</Form.Label>\n                                <Form.Control\n                                    className=\"input-monospace\" isInvalid={isInvalid}\n                                    value={jsonString} placeholder={JSON.stringify(toJSON(emptyPlan))}\n                                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => setJSONString(e.target.value)}\n                                />\n                                <Form.Control.Feedback type=\"invalid\">JSONが不正です</Form.Control.Feedback>\n                            </Form.Group>\n                            <Button type=\"submit\" disabled={isInvalid}>インポート</Button>\n                        </Form>\n                    </Card.Body>\n                </Accordion.Collapse>\n            </Card>\n        </>\n    );\n}\n\nexport default ImportView;","import { $number, $object, isCompatible } from \"@hiroto/json-type-checker\";\nimport Course from \"./Course\";\nimport Plan from \"./Plan\";\nimport RegistrationStatus from \"./RegistrationStatus\";\n\ntype Requirements = RequirementWithChildren | RequirementWithCourses | SelectionRequirement;\nexport default Requirements;\n\nabstract class Requirement {\n    abstract getRegisteredCreditsCount(plan: Plan, includesExcess: boolean): RegisteredCreditsCounts;\n    abstract getRequiredCreditsCount(selectionNameToOptionName: ReadonlyMap<string, string>): Range;\n    constructor(readonly name: string) { }\n    getStatus(plan: Plan): RegistrationStatus {\n        const requiredCreditsCount = this.getRequiredCreditsCount(plan.selectionNameToOptionName);\n        const registeredCreditsCounts = this.getRegisteredCreditsCount(plan, false);\n        return registeredCreditsCounts.acquired >= requiredCreditsCount.min ?\n            RegistrationStatus.Acquired :\n            registeredCreditsCounts.registered >= requiredCreditsCount.min ?\n                RegistrationStatus.Registered :\n                RegistrationStatus.Unregistered;\n    };\n}\n\nexport interface Range {\n    min: number;\n    max: number;\n}\nexport const isRange = (obj: unknown): obj is Range => isCompatible(obj, $object({ min: $number, max: $number }));\n\nexport interface RegisteredCreditsCounts {\n    acquired: number;\n    registered: number;\n}\n\nexport interface RequirementWithChildrenInit {\n    readonly name: string;\n    readonly description?: string;\n    readonly children: Iterable<Requirements>;\n    readonly creditsCount?: Range;\n}\n\nexport class RequirementWithChildren extends Requirement implements RequirementWithChildrenInit {\n    readonly description?: string;\n    readonly children: readonly Requirements[];\n    readonly creditsCount?: Range;\n    constructor({ name, description, children, creditsCount }: RequirementWithChildrenInit) {\n        super(name);\n        this.description = description\n        this.children = [...children];\n        this.creditsCount = creditsCount;\n    }\n    getRegisteredCreditsCount(plan: Plan, includesExcess: boolean): RegisteredCreditsCounts {\n        const creditsCounts = this.children.reduce(\n            (previous, child) => {\n                const childRegisteredCreditsCount = child.getRegisteredCreditsCount(plan, includesExcess);\n                return {\n                    acquired: previous.acquired + childRegisteredCreditsCount.acquired,\n                    registered: previous.registered + childRegisteredCreditsCount.registered,\n                }\n            },\n            { acquired: 0, registered: 0 }\n        );\n        return includesExcess || this.creditsCount === undefined ? creditsCounts : {\n            acquired: Math.min(this.creditsCount.max, creditsCounts.acquired),\n            registered: Math.min(this.creditsCount.max, creditsCounts.registered),\n        };\n    }\n    getRequiredCreditsCount(selectionNameToOptionName: ReadonlyMap<string, string>): Range {\n        return this.creditsCount === undefined ? this.children.reduce((previous, child) => {\n            const childRequiredCreditsCount = child.getRequiredCreditsCount(selectionNameToOptionName);\n            return {\n                min: previous.min + childRequiredCreditsCount.min,\n                max: previous.max + childRequiredCreditsCount.max,\n            }\n        }, { min: 0, max: 0 }) : this.creditsCount;\n    }\n    getStatus(plan: Plan): RegistrationStatus {\n        return Math.min(\n            super.getStatus(plan),\n            ...this.children.map(child => child.getStatus(plan))\n        );\n    };\n}\n\nexport interface RequirementWithCoursesInit {\n    readonly name: string;\n    readonly description?: string;\n    readonly courses: Iterable<Course>;\n    readonly creditsCount: Range;\n    readonly allowsOthers?: boolean;\n}\n\nexport class RequirementWithCourses extends Requirement {\n    readonly description?: string;\n    readonly courses: readonly Course[];\n    readonly creditsCount: Range;\n    readonly allowsOthers: boolean;\n    constructor({ name, description, courses, creditsCount, allowsOthers = false }: RequirementWithCoursesInit) {\n        super(name);\n        this.description = description;\n        this.courses = [...courses];\n        this.creditsCount = creditsCount;\n        this.allowsOthers = allowsOthers;\n    }\n    getRegisteredCreditsCount(plan: Plan, includesExcess: boolean): RegisteredCreditsCounts {\n        const othersCount = plan.requirementToOthersCount.get(this) || { acquired: 0, registered: 0 };\n        const creditsCounts = this.courses.reduce((previous, course): RegisteredCreditsCounts => {\n            const courseStatus = plan.courseToStatus.get(course) || RegistrationStatus.Unregistered;\n            if (plan.courseToRequirement.get(course) === this) {\n                return courseStatus === RegistrationStatus.Acquired ?\n                    {\n                        acquired: previous.acquired + course.creditsCount,\n                        registered: previous.registered + course.creditsCount,\n                    } :\n                    courseStatus === RegistrationStatus.Registered ?\n                        {\n                            acquired: previous.acquired,\n                            registered: previous.registered + course.creditsCount,\n                        } :\n                        previous;\n            } else {\n                return previous;\n            }\n        }, othersCount);\n        return includesExcess || this.creditsCount === undefined ? creditsCounts : {\n            acquired: Math.min(this.creditsCount.max, creditsCounts.acquired),\n            registered: Math.min(this.creditsCount.max, creditsCounts.registered),\n        };\n    }\n    getRequiredCreditsCount() {\n        return this.creditsCount;\n    }\n}\n\ninterface Option {\n    name: string;\n    requirement: Requirements;\n}\n\nexport interface SelectionRequirementInit {\n    readonly name: string;\n    readonly selectionName: string;\n    readonly options: Iterable<Option>;\n}\n\nexport class SelectionRequirement extends Requirement implements SelectionRequirementInit {\n    readonly selectionName: string;\n    readonly options: Option[];\n    readonly optionNameToRequirement: ReadonlyMap<string, Requirements>;\n    constructor({ name, selectionName, options: options0 }: SelectionRequirementInit) {\n        super(name);\n        this.selectionName = selectionName;\n        const options = [...options0]\n        this.options = options;\n        this.optionNameToRequirement = new Map(options.map(({ name, requirement }) => [name, requirement]));\n    }\n    getSelectedOptionName(selectionNameToOptionName: ReadonlyMap<string, string>) {\n        const selectedOptionName = selectionNameToOptionName.get(this.selectionName) || this.options[0].name;\n        return selectedOptionName;\n    }\n    getSelectedRequirement(selectionNameToOptionName: ReadonlyMap<string, string>) {\n        const selectedOptionName = this.getSelectedOptionName(selectionNameToOptionName);\n        const selectedRequirement = this.optionNameToRequirement.get(selectedOptionName);\n        return selectedRequirement;\n    }\n    getRegisteredCreditsCount(plan: Plan, includesExcess: boolean): RegisteredCreditsCounts {\n        const selectedRequirement = this.getSelectedRequirement(plan.selectionNameToOptionName);\n        if (selectedRequirement === undefined) {\n            return { acquired: 0, registered: 0 };\n        } else {\n            return selectedRequirement.getRegisteredCreditsCount(plan, includesExcess);\n        }\n    }\n    getRequiredCreditsCount(selectionNameToOptionName: ReadonlyMap<string, string>): Range {\n        const selectedRequirement = this.getSelectedRequirement(selectionNameToOptionName);\n        if (selectedRequirement === undefined) {\n            return { min: 0, max: 0 };\n        } else {\n            return selectedRequirement.getRequiredCreditsCount(selectionNameToOptionName);\n        }\n    }\n}\n","import codeToCourse from '../courses';\nimport Requirements, { isRange, Range, RequirementWithChildren, RequirementWithCourses, SelectionRequirement } from '../Requirements';\nimport coins17_0 from './coins17.json';\nimport klis17_0 from './klis17.json';\nimport mast17_0 from './mast17.json';\n\ntype RequirementsJSON = RequirementWithChildrenJSON | RequirementWithCoursesJSON | SelectionRequirementJSON;\n\ninterface RequirementWithChildrenJSON {\n    readonly name: string;\n    readonly description?: string;\n    readonly children: readonly RequirementsJSON[];\n    readonly creditsCount?: number | Range;\n}\n\ninterface RequirementWithCoursesJSON {\n    readonly name: string;\n    readonly description?: string;\n    readonly courses: readonly string[];\n    readonly creditsCount: number | Range;\n    readonly allowsOthers?: boolean;\n}\n\ntype OptionJSON = {\n    readonly name: string;\n    readonly requirement: RequirementsJSON;\n} | RequirementsJSON;\n\ninterface SelectionRequirementJSON {\n    readonly name?: string;\n    readonly selectionName: string;\n    readonly options: readonly OptionJSON[];\n}\n\ninterface RequirementAndDictionary {\n    readonly requirement: Requirements;\n    readonly dictionary: ReadonlyMap<string, RequirementWithCourses>;\n}\n\nconst numberOrRangeToRange = (numberOrRange: number | Range): Range =>\n    isRange(numberOrRange) ? numberOrRange : {\n        min: numberOrRange,\n        max: numberOrRange,\n    };\n\nconst getRequirementAndDictionaryFromJSON = (json: RequirementsJSON, selectionNameToCount: Map<string, number>): RequirementAndDictionary => {\n    if ('courses' in json) {\n        const requirement = new RequirementWithCourses({\n            name: json.name,\n            description: json.description,\n            creditsCount: numberOrRangeToRange(json.creditsCount),\n            courses: json.courses.map(courseCode => {\n                const course = codeToCourse.get(courseCode);\n                if (course === undefined) { throw new Error(`科目番号 ${courseCode} は定義されていません。`); }\n                return course;\n            }),\n            allowsOthers: json.allowsOthers,\n        });\n        return {\n            requirement,\n            dictionary: new Map([[requirement.name, requirement]]),\n        };\n    } else if ('children' in json) {\n        const requirementAndDictionaryArray = json.children.map(child => getRequirementAndDictionaryFromJSON(child, selectionNameToCount));\n        const requirement = new RequirementWithChildren({\n            name: json.name,\n            description: json.description,\n            children: requirementAndDictionaryArray.map(({ requirement }) => requirement),\n            creditsCount: json.creditsCount === undefined ? undefined : numberOrRangeToRange(json.creditsCount),\n        });\n        return {\n            requirement,\n            dictionary: new Map(\n                requirementAndDictionaryArray.flatMap(({ dictionary }) => [...dictionary.entries()])\n            ),\n        };\n    } else {\n        const selectionCount = selectionNameToCount.get(json.selectionName) || 0;\n        selectionNameToCount.set(json.selectionName, selectionCount + 1);\n        const optionAndDictionaryArray = json.options.map(optionJSON => {\n            if ('requirement' in optionJSON) {\n                const { requirement, dictionary } = getRequirementAndDictionaryFromJSON(optionJSON.requirement, selectionNameToCount);\n                return {\n                    option: { requirement, name: optionJSON.name },\n                    dictionary,\n                };\n            } else {\n                const { requirement, dictionary } = getRequirementAndDictionaryFromJSON(optionJSON, selectionNameToCount);\n                return {\n                    option: { requirement, name: requirement.name },\n                    dictionary,\n                };\n            }\n        })\n        const requirement = new SelectionRequirement({\n            name: `${json.selectionName}_${selectionCount}`,\n            selectionName: json.selectionName,\n            options: optionAndDictionaryArray.map(({ option }) => option),\n        });\n        return {\n            requirement,\n            dictionary: new Map(\n                optionAndDictionaryArray.flatMap(({ dictionary }) => [...dictionary.entries()])\n            )\n        };\n    }\n};\n\nconst requirementAndDictionaryMap = new Map([\n    ['coins17', { name: 'coins17', ...getRequirementAndDictionaryFromJSON(coins17_0, new Map()) }],\n    ['mast17', { name: 'mast17', ...getRequirementAndDictionaryFromJSON(mast17_0, new Map()) }],\n    ['klis17', { name: 'klis17', ...getRequirementAndDictionaryFromJSON(klis17_0, new Map()) }],\n]);\n\nexport default requirementAndDictionaryMap;","import React from \"react\";\nimport { Form } from \"react-bootstrap\";\nimport Requirements, { RequirementWithCourses } from \"./Requirements\";\nimport requirementAndDictionaryMap from './requirements/index';\n\nconst RequirementSelector = ({ onChange }: {\n    onChange: (selected: {\n        name: string,\n        requirement: Requirements,\n        dictionary: ReadonlyMap<string, RequirementWithCourses>,\n    }) => void\n}) => {\n    return (\n        <Form.Group>\n            <Form.Label>学類を選択</Form.Label>\n            <Form.Control\n                as=\"select\"\n                onChange={\n                    e => {\n                        const newRequirementName = (e.target as HTMLSelectElement).value;\n                        onChange(requirementAndDictionaryMap.get(newRequirementName)!);\n                    }\n                }\n            >\n                <option value=\"coins17\">情報科学類（2017年度入学）</option>\n                <option value=\"mast17\">情報メディア創成学類（2017年度入学）</option>\n                <option value=\"klis17\">知識情報・図書館学類（2017年度入学）</option>\n            </Form.Control>\n        </Form.Group>\n    )\n};\n\nexport const defaultSelected = requirementAndDictionaryMap.get('coins17')!;\nexport default RequirementSelector;","import React from 'react';\nimport { Badge } from 'react-bootstrap';\nimport Plan from './Plan';\nimport RegistrationStatus from './RegistrationStatus';\nimport Requirements, { RequirementWithChildren, RequirementWithCourses } from './Requirements';\n\nconst CreditsCountLabelDelimiter = () => (<span className=\"text-muted\"> / </span>)\n\nconst ExceededCreditsCountLabel = ({ creditsCount }: { creditsCount: number }) => (\n    <>\n        <span className=\"text-muted\">(</span>\n        +{creditsCount}\n        <span className=\"text-muted\">)</span>\n    </>\n);\n\nconst CreditsCountLabels = ({ requirement, plan }: {\n    requirement: Requirements,\n    plan: Plan,\n}) => {\n    const creditsCount = requirement.getRegisteredCreditsCount(plan, false);\n    const exceededCreditsCount = requirement.getRegisteredCreditsCount(plan, true);\n    const requiredCreditsCount = requirement.getRequiredCreditsCount(plan.selectionNameToOptionName);\n\n    return (\n        <div>\n            <span>\n                <span className=\"text-muted\">習得</span>\n                <> </>\n                <strong className=\"text-success\">{creditsCount.acquired}</strong>\n                {exceededCreditsCount.acquired > creditsCount.acquired ? (<ExceededCreditsCountLabel creditsCount={exceededCreditsCount.acquired - creditsCount.acquired} />) : (<></>)}\n            </span>\n            <CreditsCountLabelDelimiter />\n            <span>\n                <span className=\"text-muted\">履修</span>\n                <> </>\n                <strong className=\"text-primary\">{creditsCount.registered}</strong>\n                {exceededCreditsCount.registered > creditsCount.registered ? (<ExceededCreditsCountLabel creditsCount={exceededCreditsCount.registered - creditsCount.registered} />) : (<></>)}\n            </span>\n            <CreditsCountLabelDelimiter />\n            <span>\n                <span className=\"text-muted\">必要</span>\n                <> </>\n                <strong>\n                    {\n                        requiredCreditsCount.min === requiredCreditsCount.max ?\n                            requiredCreditsCount.min :\n                            `${requiredCreditsCount.min}~${requiredCreditsCount.max}`\n                    }\n                </strong>\n            </span>\n        </div>\n    )\n};\n\nexport const RequirementSummaryView = ({ requirement, plan }: {\n    requirement: RequirementWithChildren | RequirementWithCourses,\n    plan: Plan,\n}) => {\n    const status = requirement.getStatus(plan);\n    return (\n        <>\n            <h5 className=\"d-flex justify-content-between align-items-center\">\n                <div>{requirement.name}</div>\n                <Badge className=\"ml-2 flex-shrink-0\" variant={status === RegistrationStatus.Acquired ? 'success' : status === RegistrationStatus.Registered ? 'primary' : 'secondary'}>\n                    {status === RegistrationStatus.Acquired ? '修得OK' : status === RegistrationStatus.Registered ? '履修OK' : '不足'}\n                </Badge>\n            </h5>\n            <div>\n                {requirement.description === undefined ? (<></>) : (<div className=\"text-muted\">{requirement.description}</div>)}\n                <CreditsCountLabels requirement={requirement} plan={plan} />\n            </div>\n        </>\n    );\n}\n","import React, { useState } from \"react\";\nimport { Button, Card, Modal } from \"react-bootstrap\";\nimport Plan from \"./Plan\";\nimport { RequirementWithCourses } from \"./Requirements\";\nimport { RequirementSummaryView } from \"./RequirementSummaryView\";\n\nconst CourseMovementConfirmationModal = ({ currentRequirement, plan, onReturn, onExited }: {\n    currentRequirement: RequirementWithCourses,\n    plan: Plan,\n    onReturn: (value: boolean) => void,\n    onExited: () => void,\n}) => {\n    const [show, setShow] = useState(true);\n\n    return (\n        <Modal show={show} onHide={() => { setShow(false); onReturn(false); }} onExited={onExited}>\n            <Modal.Body>\n                <p>\n                    この科目はすでに以下の要件に割り当てられています。\n                    <strong>続けると、この要件への割り当ては解除されます。</strong>\n                </p>\n                <p>各科目に割り当てできる要件は1つまでです。</p>\n                <Card body>\n                    <RequirementSummaryView requirement={currentRequirement} plan={plan} />\n                </Card>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={() => { setShow(false); onReturn(false); }}>キャンセル</Button>\n                <Button variant=\"primary\" onClick={() => { setShow(false); onReturn(true); }}>続ける</Button>\n            </Modal.Footer>\n        </Modal>\n    );\n};\n\nexport default CourseMovementConfirmationModal;","import RegistrationStatus from './RegistrationStatus';\nimport RegistrationStatusLockTarget from './RegistrationStatusLockTarget';\n\nconst getNextStatus = ({ currentStatus, lockTarget }: {\n    currentStatus: RegistrationStatus,\n    lockTarget: RegistrationStatusLockTarget,\n}): RegistrationStatus => {\n    switch (lockTarget) {\n        case RegistrationStatusLockTarget.All:\n            return currentStatus;\n        case RegistrationStatusLockTarget.Acquired:\n        case RegistrationStatusLockTarget.Unregistered:\n            const difference = (3 + lockTarget - currentStatus) % 3;\n            switch (difference) {\n                case 0:\n                    return currentStatus;\n                case 1:\n                    return (currentStatus + 2) % 3;\n                default:\n                    return (currentStatus + 1) % 3;\n            }\n        default:\n            return (currentStatus + 1) % 3;\n    }\n}\n\nexport default getNextStatus;","import React from 'react';\nimport { ListGroup } from 'react-bootstrap';\nimport Course from './Course';\nimport FilterType from './FilterType';\nimport Plan from './Plan';\nimport RegistrationStatusLockTarget from './RegistrationStatusLockTarget';\nimport { RegisteredCreditsCounts, RequirementWithChildren, RequirementWithCourses } from './Requirements';\nimport { RequirementSummaryView } from './RequirementSummaryView';\nimport RequirementView from './RequirementView';\n\nconst RequirementWithChildrenView = ({ requirement, filterType, lockTarget, plan, onCourseClick, onOthersCountsChange, onSelectionChange }: {\n    requirement: RequirementWithChildren,\n    filterType: FilterType,\n    lockTarget: RegistrationStatusLockTarget,\n    plan: Plan,\n    onCourseClick: (course: Course, requirement: RequirementWithCourses) => void,\n    onOthersCountsChange: (requirement: RequirementWithCourses, newOthersCount: RegisteredCreditsCounts) => void,\n    onSelectionChange: (selectionName: string, newOptionName: string) => void,\n}) => (\n        <>\n            <RequirementSummaryView requirement={requirement} plan={plan} />\n            <ListGroup className=\"mt-3\">\n                {\n                    requirement.children.map(child => (\n                        <ListGroup.Item key={child.name}>\n                            <RequirementView\n                                requirement={child} plan={plan}\n                                filterType={filterType} lockTarget={lockTarget}\n                                onCourseClick={onCourseClick} onSelectionChange={onSelectionChange}\n                                onOthersCountsChange={onOthersCountsChange}\n                            />\n                        </ListGroup.Item>\n                    ))\n                }\n            </ListGroup>\n        </>\n    );\n\nexport default RequirementWithChildrenView;","import React from 'react';\nimport { Badge, ListGroup } from \"react-bootstrap\";\nimport Course from \"./Course\";\nimport getNextStatus from './getNextStatus';\nimport Plan from './Plan';\nimport RegistrationStatus from \"./RegistrationStatus\";\nimport RegistrationStatusLockTarget from './RegistrationStatusLockTarget';\nimport Requirements, { RequirementWithCourses } from \"./Requirements\";\n\nconst isRegistrable = ({ course, plan }: {\n    course: Course,\n    plan: Plan,\n}) => ![...plan.courseToStatus.entries()].some(\n    ([course1, status]) =>\n        course1 !== course && course1.title === course.title && status !== RegistrationStatus.Unregistered\n);\n\nconst CourseListItem = ({ course, onClick, newRequirement, plan, lockTarget }: {\n    course: Course,\n    newRequirement: Requirements,\n    plan: Plan,\n    lockTarget: RegistrationStatusLockTarget,\n    onClick: () => void,\n}) => {\n    const status = plan.courseToStatus.get(course) ?? RegistrationStatus.Unregistered;\n    const currentRequirement = plan.courseToRequirement.get(course);\n    const isRegisteredButInvalid = status !== RegistrationStatus.Unregistered && currentRequirement !== newRequirement;\n    const disabled = !isRegistrable({ course, plan });\n    const action = getNextStatus({ currentStatus: status, lockTarget }) !== status || isRegisteredButInvalid;\n\n    return (\n        <ListGroup.Item\n            action={action}\n            onClick={onClick}\n            disabled={disabled}\n            variant={\n                isRegisteredButInvalid ? 'dark' :\n                    status === RegistrationStatus.Acquired ? 'success' :\n                        status === RegistrationStatus.Registered ? 'primary' :\n                            undefined\n            }\n        >\n            <div className=\"d-flex justify-content-between align-items-center\">\n                <div>\n                    <div>{course.title}</div>\n                    <code>{course.code}</code>\n                </div>\n                <div className=\"ml-2 text-right flex-shrink-0\">\n                    {\n                        isRegisteredButInvalid ?\n                            currentRequirement === undefined ?\n                                (<Badge variant=\"secondary\">?</Badge>) :\n                                (<Badge variant=\"warning\">!</Badge>) :\n                            (<></>)\n                    }\n                    <Badge variant={status === RegistrationStatus.Acquired ? 'success' : status === RegistrationStatus.Registered ? 'primary' : 'secondary'}>\n                        {status === RegistrationStatus.Acquired ? '修得済み' : status === RegistrationStatus.Registered ? '履修する' : '履修しない'}\n                    </Badge>\n                    <div><span className=\"text-muted\">単位数</span> <strong>{course.creditsCount}</strong></div>\n                </div>\n            </div>\n        </ListGroup.Item>\n    )\n};\n\nconst CourseList = ({ requirement, courses, plan, onCourseClick, lockTarget }: {\n    requirement: RequirementWithCourses,\n    courses: readonly Course[],\n    plan: Plan,\n    lockTarget: RegistrationStatusLockTarget\n    onCourseClick: (course: Course) => void,\n}) => (\n        <ListGroup>\n            {\n                courses.map((course: Course) => (\n                    <CourseListItem\n                        key={course.code}\n                        course={course} plan={plan}\n                        newRequirement={requirement}\n                        lockTarget={lockTarget}\n                        onClick={() => onCourseClick(course)}\n                    />\n                ))\n            }\n        </ListGroup>\n    );\n\nexport default CourseList;","import React, { useState } from 'react';\nimport { Accordion, Button, ButtonToolbar, Card, Col, Form } from 'react-bootstrap';\nimport Course from './Course';\nimport CourseList from './CourseList';\nimport FilterType from './FilterType';\nimport Plan from './Plan';\nimport RegistrationStatus from './RegistrationStatus';\nimport RegistrationStatusLockTarget from './RegistrationStatusLockTarget';\nimport { RegisteredCreditsCounts, RequirementWithCourses } from './Requirements';\nimport { RequirementSummaryView } from './RequirementSummaryView';\n\nconst OthersCountInput = ({ currentOthersCount, onReturn, onHide }: {\n    currentOthersCount: RegisteredCreditsCounts,\n    onReturn: (newOthersCount: RegisteredCreditsCounts) => void,\n    onHide: () => void,\n}) => {\n    const [acquired, setAcquired] = useState<number | undefined>();\n    const [registeredExcludingAcquired, setRegisteredExcludingAcquired] = useState<number | undefined>();\n    const [registeredIncludingAcquired, setRegisteredIncludingAcquired] = useState<number | undefined>();\n\n    const computed = {\n        acquired: acquired ?? currentOthersCount.acquired,\n        registered:\n            registeredIncludingAcquired !== undefined ?\n                registeredIncludingAcquired :\n                registeredExcludingAcquired !== undefined ?\n                    (acquired !== undefined ? acquired : currentOthersCount.acquired) + registeredExcludingAcquired :\n                    acquired !== undefined ?\n                        currentOthersCount.registered + acquired - currentOthersCount.acquired :\n                        currentOthersCount.registered,\n    }\n\n    return (\n        <Card border=\"primary\">\n            <Card.Header>単位数を入力</Card.Header>\n            <Card.Body>\n                <Form onSubmit={(e: React.FormEvent<HTMLFormElement>) => {\n                    e.preventDefault();\n                    onReturn(computed);\n                    onHide();\n                }}>\n                    <Form.Row>\n                        <Form.Group as={Col} md=\"4\">\n                            <Form.Label>習得済みの単位数 <span className=\"text-muted\">(a)</span></Form.Label>\n                            <Form.Control\n                                type=\"number\" min={0}\n                                placeholder={`${computed.acquired}`}\n                                value={acquired === undefined ? '' : `${acquired}`}\n                                onChange={\n                                    (e: React.ChangeEvent<HTMLInputElement>) =>\n                                        setAcquired(e.target.value === '' ? undefined : +e.target.value)\n                                }\n                                isInvalid={computed.acquired < 0}\n                            />\n                            <Form.Control.Feedback type=\"invalid\">(a) &gt;= 0</Form.Control.Feedback>\n                        </Form.Group>\n                        <Form.Group as={Col} md=\"4\">\n                            <Form.Label>履修する単位数 <span className=\"text-muted\">(b)</span></Form.Label>\n                            <Form.Control\n                                type=\"number\" min={0}\n                                placeholder={`${computed.registered - computed.acquired}`}\n                                value={registeredExcludingAcquired === undefined ? '' : `${registeredExcludingAcquired}`}\n                                onChange={\n                                    (e: React.ChangeEvent<HTMLInputElement>) => {\n                                        if (e.target.value === '') {\n                                            setRegisteredExcludingAcquired(undefined);\n                                        } else {\n                                            setRegisteredExcludingAcquired(+e.target.value);\n                                            setRegisteredIncludingAcquired(undefined);\n                                        }\n                                    }\n                                }\n                                isInvalid={computed.acquired > computed.registered}\n                            />\n                            <Form.Control.Feedback type=\"invalid\">(b) &gt;= 0</Form.Control.Feedback>\n                        </Form.Group>\n                        <Form.Group as={Col} md=\"4\">\n                            <Form.Label>計 <span className=\"text-muted\">(a) + (b)</span></Form.Label>\n                            <Form.Control\n                                type=\"number\" min={0}\n                                placeholder={`${computed.registered}`}\n                                value={registeredIncludingAcquired === undefined ? '' : `${registeredIncludingAcquired}`}\n                                onChange={\n                                    (e: React.ChangeEvent<HTMLInputElement>) => {\n                                        if (e.target.value === '') {\n                                            setRegisteredIncludingAcquired(undefined);\n                                        } else {\n                                            setRegisteredIncludingAcquired(+e.target.value);\n                                            setRegisteredExcludingAcquired(undefined);\n                                        }\n                                    }\n                                }\n                            />\n                        </Form.Group>\n                    </Form.Row>\n                    <ButtonToolbar>\n                        <Button\n                            type=\"submit\"\n                            disabled={computed.acquired < 0 || computed.acquired > computed.registered}\n                        >\n                            OK\n                        </Button>\n                        <Button variant=\"secondary\" onClick={onHide}>キャンセル</Button>\n                    </ButtonToolbar>\n                </Form>\n            </Card.Body>\n        </Card>\n    )\n}\n\nconst RequirementWithCoursesView = ({ requirement, filterType, lockTarget, plan, onCourseClick, onOthersCountsChange }: {\n    requirement: RequirementWithCourses,\n    filterType: FilterType,\n    lockTarget: RegistrationStatusLockTarget,\n    plan: Plan,\n    onCourseClick: (course: Course, requirement: RequirementWithCourses) => void,\n    onOthersCountsChange: (newOthersCount: RegisteredCreditsCounts) => void,\n}) => {\n    const [isOpen, setIsOpen] = useState(false);\n    const [showsInput, setShowsInput] = useState(false);\n\n    const courses = requirement.courses.filter(course =>\n        filterType === FilterType.None ||\n        (plan.courseToStatus.has(course) && plan.courseToStatus.get(course) !== RegistrationStatus.Unregistered)\n    ).filter(course => filterType !== FilterType.Valid || requirement === plan.courseToRequirement.get(course));\n\n    return (\n        <>\n            <Accordion activeKey={isOpen ? '0' : ''}>\n                <div className={`bg-white ${isOpen ? 'sticky-top' : ''}`}>\n                    <RequirementSummaryView requirement={requirement} plan={plan} />\n                    {\n                        courses.length === 0 ?\n                            requirement.allowsOthers ? (\n                                showsInput ? (<></>) : (\n                                    <Button block className=\"mt-3\" variant=\"secondary\" onClick={() => setShowsInput(true)}>\n                                        単位数を入力\n                                    </Button>\n                                )\n                            ) : (\n                                    <Button block className=\"mt-3\" variant=\"outline-secondary\" disabled>\n                                        {filterType === FilterType.None ? '' : '履修する'}科目はありません\n                                    </Button>\n                                ) : (\n                                <Button\n                                    block className=\"mt-3\"\n                                    onClick={() => setIsOpen(!isOpen)}\n                                    variant={isOpen ? 'primary' : 'outline-secondary'}\n                                >\n                                    {filterType === FilterType.None ? '' : '履修する'}科目を{isOpen ? '非' : ''}表示\n                                </Button>\n                            )\n                    }\n                </div>\n                {\n                    showsInput ? (\n                        <div className=\"mt-3\">\n                            <OthersCountInput\n                                currentOthersCount={plan.requirementToOthersCount.get(requirement) || { acquired: 0, registered: 0 }}\n                                onReturn={onOthersCountsChange} onHide={() => setShowsInput(false)}\n                            />\n                        </div>\n                    ) : (<></>)\n                }\n                <Accordion.Collapse eventKey=\"0\">\n                    {\n                        courses.length === 0 ? (<></>) : (\n                            <div className=\"mt-3\">\n                                <CourseList\n                                    courses={courses} plan={plan}\n                                    requirement={requirement} lockTarget={lockTarget}\n                                    onCourseClick={course => onCourseClick(course, requirement)}\n                                />\n                            </div>\n                        )\n                    }\n                </Accordion.Collapse>\n            </Accordion>\n        </>\n    );\n}\n\nexport default RequirementWithCoursesView;","import React from 'react';\nimport { Dropdown } from 'react-bootstrap';\nimport Course from './Course';\nimport FilterType from './FilterType';\nimport Plan from './Plan';\nimport RegistrationStatusLockTarget from './RegistrationStatusLockTarget';\nimport { RegisteredCreditsCounts, RequirementWithCourses, SelectionRequirement } from './Requirements';\nimport RequirementView from './RequirementView';\n\nconst SelectionRequirementView = ({ requirement, filterType, lockTarget, plan, onCourseClick, onOthersCountsChange, onSelectionChange }: {\n    requirement: SelectionRequirement,\n    filterType: FilterType,\n    lockTarget: RegistrationStatusLockTarget,\n    plan: Plan,\n    onCourseClick: (course: Course, requirement: RequirementWithCourses) => void,\n    onOthersCountsChange: (requirement: RequirementWithCourses, newOthersCount: RegisteredCreditsCounts) => void,\n    onSelectionChange: (selectionName: string, newOptionName: string) => void,\n}) => {\n    const selectedOptionName = requirement.getSelectedOptionName(plan.selectionNameToOptionName);\n    const selectedRequirement = requirement.getSelectedRequirement(plan.selectionNameToOptionName);\n\n    const handleOptionClick = (newOptionName: string) => {\n        if (selectedOptionName !== newOptionName) {\n            onSelectionChange(requirement.selectionName, newOptionName);\n        }\n    };\n\n    return (\n        <>\n            <Dropdown>\n                <Dropdown.Toggle id=\"\" variant=\"secondary\" disabled={filterType === FilterType.Valid}>\n                    <span\n                        style={{\n                            overflow: 'hidden',\n                            textOverflow: 'ellipsis',\n                        }}\n                    >\n                        {requirement.selectionName}\n                        <> : </>\n                        <strong>{selectedOptionName}</strong>\n                    </span>\n                </Dropdown.Toggle>\n\n                <Dropdown.Menu style={{ zIndex: 1100 }}>\n                    {\n                        requirement.options.map(option => (\n                            <Dropdown.Item key={option.name}\n                                active={option.name === selectedOptionName}\n                                onClick={() => handleOptionClick(option.name)}\n                            >\n                                {option.name}\n                            </Dropdown.Item>\n                        ))\n                    }\n                </Dropdown.Menu>\n            </Dropdown>\n            {\n                selectedRequirement === undefined ? (<></>) : (\n                    <div className=\"mt-3\">\n                        <RequirementView\n                            requirement={selectedRequirement} plan={plan}\n                            filterType={filterType} lockTarget={lockTarget}\n                            onCourseClick={onCourseClick} onOthersCountsChange={onOthersCountsChange}\n                            onSelectionChange={onSelectionChange}\n                        />\n                    </div>\n                )\n            }\n        </>\n    );\n}\n\nexport default SelectionRequirementView;","import React from 'react';\nimport Course from \"./Course\";\nimport FilterType from './FilterType';\nimport Plan from './Plan';\nimport Requirements, { RegisteredCreditsCounts, RequirementWithChildren, RequirementWithCourses } from \"./Requirements\";\nimport RequirementWithChildrenView from './RequirementWithChildrenView';\nimport RequirementWithCoursesView from './RequirementWithCoursesView';\nimport SelectionRequirementView from './SelectionRequirementView';\nimport RegistrationStatusLockTarget from './RegistrationStatusLockTarget';\n\nconst RequirementView = ({ requirement, filterType, lockTarget, plan, onCourseClick, onOthersCountsChange, onSelectionChange }: {\n    requirement: Requirements,\n    filterType: FilterType,\n    lockTarget: RegistrationStatusLockTarget,\n    plan: Plan,\n    onCourseClick: (course: Course, requirement: RequirementWithCourses) => void,\n    onOthersCountsChange: (requirement: RequirementWithCourses, newOthersCount: RegisteredCreditsCounts) => void,\n    onSelectionChange: (selectionName: string, newOptionName: string) => void,\n}) => {\n    if (requirement instanceof RequirementWithChildren) {\n        return (\n            <RequirementWithChildrenView\n                requirement={requirement} plan={plan}\n                filterType={filterType} lockTarget={lockTarget}\n                onCourseClick={onCourseClick} onOthersCountsChange={onOthersCountsChange} onSelectionChange={onSelectionChange}\n            />\n        )\n    } else if (requirement instanceof RequirementWithCourses) {\n        return (\n            <RequirementWithCoursesView\n                requirement={requirement} plan={plan}\n                filterType={filterType} lockTarget={lockTarget}\n                onCourseClick={onCourseClick}\n                onOthersCountsChange={creditsCounts => onOthersCountsChange(requirement, creditsCounts)}\n            />\n        )\n    } else {\n        return (\n            <SelectionRequirementView\n                requirement={requirement} plan={plan}\n                filterType={filterType} lockTarget={lockTarget}\n                onCourseClick={onCourseClick} onOthersCountsChange={onOthersCountsChange} onSelectionChange={onSelectionChange}\n            />\n        );\n    }\n}\n\nexport default RequirementView;\n","import React from 'react';\nimport Course from './Course';\nimport CourseMovementConfirmationModal from './CourseMovementConfirmationModal';\nimport FilterType from './FilterType';\nimport getNextStatus from './getNextStatus';\nimport getValueFromModal, { useModals } from './getValueFromModal';\nimport Plan from './Plan';\nimport RegistrationStatus from './RegistrationStatus';\nimport RegistrationStatusLockTarget from './RegistrationStatusLockTarget';\nimport Requirements, { RegisteredCreditsCounts, RequirementWithChildren, RequirementWithCourses, SelectionRequirement } from './Requirements';\nimport RequirementView from './RequirementView';\n\nconst RequirementsRootView = ({ requirement, plan, filterType, lockTarget, onChange }: {\n    requirement: Requirements,\n    filterType: FilterType,\n    lockTarget: RegistrationStatusLockTarget,\n    plan: Plan,\n    onChange: (newPlan: Plan) => void,\n}) => {\n    const { courseToStatus, courseToRequirement, requirementToOthersCount, selectionNameToOptionName } = plan;\n    const { modals, setModalsAndCount } = useModals();\n\n    const handleCourseClick = async (course: Course, requirement: RequirementWithCourses) => {\n        const currentStatus: RegistrationStatus = courseToStatus.get(course) || RegistrationStatus.Unregistered;\n        const currentRequirement = courseToRequirement.get(course);\n        let nextCourseToStatus = courseToStatus;\n        if (currentStatus === RegistrationStatus.Unregistered || currentRequirement === requirement) {\n            const nextStatus = getNextStatus({ currentStatus, lockTarget });\n            nextCourseToStatus = new Map([...courseToStatus, [course, nextStatus]]);\n        } else if (\n            currentRequirement !== undefined &&\n            !await getValueFromModal(\n                CourseMovementConfirmationModal,\n                { currentRequirement, plan },\n                setModalsAndCount\n            )\n        ) {\n            return;\n        }\n        onChange({\n            ...plan,\n            courseToStatus: nextCourseToStatus,\n            courseToRequirement: new Map([...courseToRequirement, [course, requirement]]),\n        });\n    }\n\n    const clearCourseToRequirement = (requirement: Requirements, newCourseToRequirement: Map<Course, RequirementWithCourses>) => {\n        if (requirement instanceof RequirementWithChildren) {\n            for (const child of requirement.children) {\n                clearCourseToRequirement(child, newCourseToRequirement);\n            }\n        } else if (requirement instanceof RequirementWithCourses) {\n            for (const course of requirement.courses) {\n                if (newCourseToRequirement.get(course) === requirement) {\n                    newCourseToRequirement.delete(course);\n                }\n            }\n        } else {\n            const selectedRequirement = requirement.getSelectedRequirement(selectionNameToOptionName);\n            if (selectedRequirement !== undefined) {\n                clearCourseToRequirement(selectedRequirement, newCourseToRequirement);\n            }\n        }\n    }\n\n    const clearCourseToRequirementInSelection = (selectionName: string, requirement: Requirements, newCourseToRequirement: Map<Course, RequirementWithCourses>) => {\n        if (requirement instanceof RequirementWithChildren) {\n            for (const child of requirement.children) {\n                clearCourseToRequirementInSelection(selectionName, child, newCourseToRequirement);\n            }\n        } else if (requirement instanceof SelectionRequirement && requirement.selectionName === selectionName) {\n            clearCourseToRequirement(requirement, newCourseToRequirement);\n        }\n    }\n\n    const handleOthersCountsChange = (requirement: RequirementWithCourses, newOthersCount: RegisteredCreditsCounts) => {\n        onChange({\n            ...plan,\n            requirementToOthersCount: new Map([\n                ...requirementToOthersCount,\n                [requirement, newOthersCount]\n            ]),\n        });\n    }\n\n    const handleSelectionChange = (selectionName: string, newOptionName: string) => {\n        const newCourseToRequirement = new Map(courseToRequirement);\n        clearCourseToRequirementInSelection(selectionName, requirement, newCourseToRequirement);\n        onChange({\n            ...plan,\n            courseToRequirement: newCourseToRequirement,\n            selectionNameToOptionName: new Map([...selectionNameToOptionName, [selectionName, newOptionName]]),\n        });\n    }\n\n    return (\n        <>\n            {modals}\n            <RequirementView\n                requirement={requirement} plan={plan}\n                filterType={filterType} lockTarget={lockTarget}\n                onCourseClick={handleCourseClick} onOthersCountsChange={handleOthersCountsChange}\n                onSelectionChange={handleSelectionChange}\n            />\n        </>\n    );\n}\n\nexport default RequirementsRootView;","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React, { useState } from 'react';\nimport { Accordion, Alert, Container, Form, Navbar } from 'react-bootstrap';\nimport { useLocalStorage } from 'react-use';\nimport './App.css';\nimport CollectivelyCourseSetView from './CollectivelyCourseSetView';\nimport codeToCourse from './courses';\nimport ExportView from './ExportView';\nimport FilterType from './FilterType';\nimport ImportView from './ImportView';\nimport Plan, { emptyPlan, fromJSON, PlanJSON, toJSON } from './Plan';\nimport RegistrationStatusLockTarget from './RegistrationStatusLockTarget';\nimport requirementAndDictionaryMap from './requirements/';\nimport RequirementSelector, { defaultSelected } from './RequirementSelector';\nimport RequirementsRootView from './RequirementsRootView';\n\nconst COURSES_STATE = \"courses-state\"\n\nconst App = () => {\n    const [selected, setSelected] = useState(defaultSelected);\n    const [filterType, setFilterType] = useState(FilterType.None);\n    const { lockTarget, setLockTarget } = useLockTarget(filterType);\n    const { plan, setPlan } = usePlan(selected.name);\n\n    return (\n        <>\n            <Navbar variant=\"dark\" bg=\"dark\">\n                <Navbar.Brand>卒業要件を満たしたい</Navbar.Brand>\n            </Navbar>\n            <Container>\n                <Alert variant=\"danger\" className=\"my-3\">\n                    このツールの結果を利用する場合、必ず履修要覧や支援室などでその結果が正しいことを確認するようにしてください。\n                    <strong>科目や要件の定義が誤っていることや、実際には認められない履修の組み合わせが存在することがあります。</strong>\n                </Alert>\n                <RequirementSelector onChange={setSelected} />\n                <Accordion className=\"mb-3\">\n                    <CollectivelyCourseSetView\n                        eventKey=\"0\" codeToCourse={codeToCourse}\n                        onSubmit={courseToStatus => setPlan({ ...plan, courseToStatus })}\n                    />\n                    <ExportView eventKey=\"1\" plan={plan} />\n                    <ImportView\n                        eventKey=\"2\" onSubmit={setPlan}\n                        codeToCourse={codeToCourse} nameToRequirement={selected.dictionary}\n                    />\n                </Accordion>\n                <Form.Group>\n                    <Form.Label>科目の履修状態のロック</Form.Label>\n                    {\n                        [\n                            {\n                                label: \"ロックしない\",\n                                lockTarget: RegistrationStatusLockTarget.None,\n                                disabled: filterType !== FilterType.None,\n                            },\n                            {\n                                label: \"[履修する] と [修得済み] の間の変更のみ許可\",\n                                lockTarget: RegistrationStatusLockTarget.Unregistered,\n                            },\n                            {\n                                label: \"[履修しない] と [履修する] の間の変更のみ許可\",\n                                lockTarget: RegistrationStatusLockTarget.Acquired,\n                                disabled: filterType !== FilterType.None,\n                            },\n                            {\n                                label: \"すべてロックする\",\n                                lockTarget: RegistrationStatusLockTarget.All,\n                            },\n                        ].map(({ label, disabled, lockTarget: lockTarget1 }) => (\n                            <Form.Check\n                                custom type=\"radio\"\n                                id={`lockTargetCheck${lockTarget1}`}\n                                label={label} key={lockTarget1}\n                                disabled={disabled}\n                                checked={lockTarget === lockTarget1}\n                                onChange={() => setLockTarget(lockTarget1)}\n                            />\n                        ))\n                    }\n                </Form.Group>\n                <Form.Group>\n                    <Form.Check\n                        custom\n                        id=\"filterTypeCheck0\"\n                        label=\"履修する科目のみ表示する\"\n                        checked={filterType !== FilterType.None}\n                        onChange={\n                            () => {\n                                if (filterType === FilterType.None) {\n                                    setFilterType(FilterType.Registered);\n                                } else {\n                                    setFilterType(FilterType.None);\n                                }\n                            }\n                        }\n                    />\n                    <Form.Check\n                        custom\n                        id=\"filterTypeCheck1\"\n                        label=\"単位数の計算に含まれる科目のみ表示する\"\n                        checked={filterType === FilterType.Valid}\n                        onChange={\n                            () => {\n                                if (filterType === FilterType.Valid) {\n                                    setFilterType(FilterType.Registered);\n                                } else {\n                                    setFilterType(FilterType.Valid);\n                                }\n                            }\n                        }\n                    />\n                </Form.Group>\n                <hr />\n                <div className=\"mb-3\">\n                    <RequirementsRootView\n                        requirement={selected.requirement}\n                        lockTarget={lockTarget} filterType={filterType}\n                        plan={plan} onChange={setPlan}\n                    />\n                </div>\n            </Container>\n        </>\n    );\n}\n\nconst useLockTarget = (filterType: FilterType) => {\n    const [lockTarget, setLockTarget] = useState(RegistrationStatusLockTarget.None);\n\n    if (filterType === FilterType.None) {\n        return { lockTarget, setLockTarget };\n    } else if (lockTarget === RegistrationStatusLockTarget.None) {\n        return {\n            lockTarget: RegistrationStatusLockTarget.Unregistered,\n            setLockTarget,\n        };\n    } else if (lockTarget === RegistrationStatusLockTarget.Acquired) {\n        return {\n            lockTarget: RegistrationStatusLockTarget.All,\n            setLockTarget,\n        };\n    } else {\n        return { lockTarget, setLockTarget };\n    }\n}\n\nconst usePlanMap = () => {\n    const [storedJSON, setStoredJSON] = useLocalStorage<readonly (readonly [string, PlanJSON])[]>(COURSES_STATE);\n    const [planMap0, setPlanMap0] = useState(() => {\n        try {\n            const storedPlanEntries = storedJSON.map(([requirementName, planJSON]) => {\n                const requirementAndDictionary = requirementAndDictionaryMap.get(requirementName);\n                if (requirementAndDictionary === undefined) {\n                    return undefined;\n                } else {\n                    try {\n                        return [requirementName, fromJSON(planJSON, {\n                            codeToCourse,\n                            nameToRequirement: requirementAndDictionary.dictionary,\n                        })] as const;\n                    } catch {\n                        return undefined;\n                    }\n                }\n            }).filter((value): value is NonNullable<typeof value> => value !== undefined);\n            const storedPlanMap: ReadonlyMap<string, Plan> = new Map(storedPlanEntries);\n            return storedPlanMap;\n        } catch {\n            const storedPlanMap: ReadonlyMap<string, Plan> = new Map();\n            return storedPlanMap;\n        }\n    });\n    const setPlanMap = (newPlanMap: ReadonlyMap<string, Plan>) => {\n        const planJSONEntries = [...newPlanMap].map(([requirementName, plan]) => [requirementName, toJSON(plan)] as const);\n        setPlanMap0(newPlanMap);\n        setStoredJSON(planJSONEntries);\n    };\n    return {\n        planMap: planMap0,\n        setPlanMap,\n    };\n}\n\nconst usePlan = (requirementName: string) => {\n    const { planMap, setPlanMap } = usePlanMap();\n\n    const plan = planMap.get(requirementName) || emptyPlan;\n    const setPlan = (newPlan: Plan) => {\n        const newPlanMap = new Map([\n            ...planMap,\n            [requirementName, newPlan]\n        ]);\n        setPlanMap(newPlanMap);\n    };\n\n    return { plan, setPlan };\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'react-app-polyfill/stable';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}